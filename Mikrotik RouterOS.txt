

    Creado por Artūrs C., actualizado por última vez por Jānis Bērziņš el feb 10, 2025 7 min de lectura

    Introduction
    Create a file
    Append text to a file in a new line
    Check if IP on the interface has changed
    Strip netmask
    Resolve host-name
    Write simple queue stats in multiple files
    Generate backup and send it by e-mail
    Check bandwidth and add limitations
    Block access to specific websites
    Parse file to add ppp secrets
    Detect new log entry
    Allow use of ntp.org pool service for NTP
    Other scripts

Introduction

This section contains some useful scripts and shows all available scripting features. Script examples used in this section were tested with the latest 3.x version.
Create a file

it is not possible to create a file directly, however, there is a workaround:
/file print file=myFile
/file set myFile.txt contents=""
Append text to a file in a new line

There is no direct way to append text to a file, however you can store the old content and append to it in a new line:
:local oldText [/file get test.txt contents as-string]
:local addText "test append"
:local newText ($oldText."\n".$addText)
/file set myFile.txt contents=$newText
Check if IP on the interface has changed

Sometimes provider gives dynamic IP addresses. This script will compare if a dynamic IP address is changed.
:global currentIP;

:local newIP [/ip address get [find interface="ether1"] address];

:if ($newIP != $currentIP) do={
    :put "ip address $currentIP changed to $newIP";
    :set currentIP $newIP;
}


Strip netmask

This script is useful if you need an IP address without a netmask (for example to use it in a firewall), but "/ip address get [id] address" returns the IP address and netmask.
:global ipaddress 10.1.101.1/24

:for i from=( [:len $ipaddress] - 1) to=0 do={ 
	:if ( [:pick $ipaddress $i] = "/") do={ 
		:put [:pick $ipaddress 0 $i]
	} 
}



Another much more simple way:
:global ipaddress 10.1.101.1/24
:put [:pick $ipaddress 0 [:find $ipaddress "/"]]
Resolve host-name

Many users are asking features to use DNS names instead of IP addresses for radius servers, firewall rules, etc.

So here is an example of how to resolve the RADIUS server's IP.

Let's say we have the radius server configured:
/radius 
add address=3.4.5.6 comment=myRad


And here is a script that will resolve the IP address, compare resolved IP with configured one, and replace it if not equal:
/system script add name="resolver" source= {

:local resolvedIP [:resolve "server.example.com"];
:local radiusID [/radius find comment="myRad"];
:local currentIP [/radius get $radiusID address];

:if ($resolvedIP != $currentIP) do={
   /radius set $radiusID address=$resolvedIP;
   /log info "radius ip updated";
}

}


Add this script to the scheduler to run for example every 5 minutes
/system scheduler add name=resolveRadiusIP on-event="resolver" interval=5m


Write simple queue stats in multiple files

Let's consider queue namings are "some text.1" so we can search queues by the last number right after the dot.
:local entriesPerFile 10;
:local currentQueue 0;
:local queuesInFile 0;
:local fileContent "";
#determine needed file count
:local numQueues [/queue simple print count-only] ;
:local fileCount ($numQueues / $entriesPerFile);
:if ( ($fileCount * $entriesPerFile) != $numQueues) do={
   :set fileCount ($fileCount + 1);
}

#remove old files 
/file remove [find name~"stats"];

:put "fileCount=$fileCount";

:for i from=1 to=$fileCount do={
#create file
   /file print file="stats$i.txt";
#clear content
   /file set [find name="stats$i.txt"] contents="";

   :while ($queuesInFile < $entriesPerFile) do={
     :if ($currentQueue < $numQueues) do={
         :set currentQueue ($currentQueue +1);
         :put $currentQueue ;
         /queue simple
         :local internalID [find name~"\\.$currentQueue\$"];
         :put "internalID=$internalID";
         :set fileContent ($fileContent . [get $internalID target-address] . \
           " " . [get $internalID total-bytes] . "\r\n");
     }
     :set queuesInFile ($queuesInFile +1);
     
   }
   /file set "stats$i.txt" contents=$fileContent;
   :set fileContent "";
   :set queuesInFile 0;

}
 


Generate backup and send it by e-mail

This script generates a backup file and sends it to a specified e-mail address. The mail subject contains the router's name, current date, and time.

Note that the SMTP server must be configured before this script can be used. See /tool e-mail for configuration options.


/system backup save name=email_backup
/tool e-mail send file=email_backup.backup to="me@test.com" body="See attached file" \
   subject="$[/system identity get name] $[/system clock get time] $[/system clock get date] Backup")



The backup file contains sensitive information like passwords. So to get access to generated backup files, the script or scheduler must have a 'sensitive' policy.

Use string as a function
:global printA [:parse ":local A; :put \$A;" ];   
$printA  


Check bandwidth and add limitations

This script checks if the download on an interface is more than 512kbps if true then the queue is added to limit the speed to 256kbps.
:foreach i in=[/interface find] do={
    /interface monitor-traffic $i once do={
        :if ($"received-bits-per-second" > 0 ) do={
            :local tmpIP [/ip address get [/ip address find interface=$i] address] ;
#            :log warning $tmpIP ;
            :for j from=( [:len $tmpIP] - 1) to=0 do={
                :if ( [:pick $tmpIP $j] = "/") do={
                    /queue simple add name=$i max-limit=256000/256000 dst-address=[:pick $tmpIP 0 $j] ;
                } 
            }
        }
    }
}


Block access to specific websites

This script is useful if you want to block certain websites but you don't want to use a web proxy.

This example looks at entries "Rapidshare" and "youtube" in the DNS cache and adds IPs to the address list named "restricted". Before you begin, you must set up a router to catch all DNS requests:
/ip firewall nat
add action=redirect chain=dstnat comment=DNS dst-port=53 protocol=tcp to-ports=53
add action=redirect chain=dstnat dst-port=53 protocol=udp to-ports=53


and add firewall
/ip firewall filter
add chain=forward dst-address-list=restricted action=drop


Now we can write a script and schedule it to run, let's say, every 30 seconds.

Script Code:
:foreach i in=[/ip dns cache find] do={
    :local bNew "true";
    :local cacheName [/ip dns cache all get $i name] ;
#    :put $cacheName;

    :if (([:find $cacheName "rapidshare"] >= 0) || ([:find $cacheName "youtube"] >= 0)) do={

        :local tmpAddress [/ip dns cache get $i address] ;
#	:put $tmpAddress;

# if address list is empty do not check
        :if ( [/ip firewall address-list find list="restricted" ] = "") do={
            :log info ("added entry: $[/ip dns cache get $i name] IP $tmpAddress");
            /ip firewall address-list add address=$tmpAddress list=restricted comment=$cacheName;
        } else={
            :foreach j in=[/ip firewall address-list find list="restricted"] do={
                :if ( [/ip firewall address-list get $j address] = $tmpAddress ) do={
                    :set bNew "false";
                }
            }
            :if ( $bNew = "true" ) do={
                :log info ("added entry: $[/ip dns cache get $i name] IP $tmpAddress");
                /ip firewall address-list add address=$tmpAddress list=restricted comment=$cacheName;
            }
        }
    }
}


Parse file to add ppp secrets

This script requires that entries inside the file are in the following format:

username,password,local_address,remote_address,profile,service

For example:
janis,123,1.1.1.1,2.2.2.1,ppp_profile,myService
juris,456,1.1.1.1,2.2.2.2,ppp_profile,myService
aija,678,1.1.1.1,2.2.2.3,ppp_profile,myService



:global content [/file get [/file find name=test.txt] contents] ;
:global contentLen [ :len $content ] ;

:global lineEnd 0;
:global line "";
:global lastEnd 0;


:do {
       :set lineEnd [:find $content "\r\n" $lastEnd ] ;
       :set line [:pick $content $lastEnd $lineEnd] ;
       :set lastEnd ( $lineEnd + 2 ) ;

       :local tmpArray [:toarray $line] ;
	:if ( [:pick $tmpArray 0] != "" ) do={
	:put $tmpArray;
         /ppp secret add name=[:pick $tmpArray 0] password=[:pick $tmpArray 1] \
             local-address=[:pick $tmpArray 2] remote-address=[:pick $tmpArray 3] \
             profile=[:pick $tmpArray 4] service=[:pick $tmpArray 5];
}
} while ($lineEnd < $contentLen)


Detect new log entry

This script is checking if a new log entry is added to a particular buffer.

In this example we will use PPPoE logs:
/system logging action
add name="pppoe"
/system logging
add action=pppoe topics=pppoe,info,!ppp,!debug


Log buffer will look similar to this one:
[admin@mainGW] > /log print where buffer=pppoe 
13:11:08 pppoe,info PPPoE connection established from 00:0C:42:04:4C:EE  


Now we can write a script to detect if a new entry is added.
:global lastTime;

:global currentBuf [ :toarray [ /log find buffer=pppoe  ] ] ;
:global currentLineCount [ :len $currentBuf ] ;
:global currentTime [ :totime [/log get [ :pick $currentBuf ($currentLineCount -1) ] time   ] ];

:global message "";

:if ( $lastTime = "" ) do={ 
	:set lastTime $currentTime ; 
	:set message [/log get [ :pick $currentBuf ($currentLineCount-1) ] message];

} else={
	:if ( $lastTime < $currentTime ) do={ 
		:set lastTime $currentTime ; 
		:set message [/log get [ :pick $currentBuf ($currentLineCount-1) ] message];
	}
}


After a new entry is detected, it is saved in the "message" variable, which you can use later to parse log messages, for example, to get the PPPoE client's mac addresses.
Allow use of ntp.org pool service for NTP

This script resolves the hostnames of two NTP servers, compares the result with the current NTP settings, and changes the addresses if they're different. This script is required as RouterOS does not allow hostnames to be used in the NTP configuration. Two scripts are used. The first defines some system variables which are used in other scripts and the second does the grunt work:
# System configuration script - "GlobalVars"

:put "Setting system globals";

# System name
:global SYSname [/system identity get name];

# E-mail address to send notifications to
:global SYSsendemail "mail@my.address";

# E-mail address to send notifications from
:global SYSmyemail "routeros@my.address";

# Mail server to use
:global SYSemailserver "1.2.3.4";

# NTP pools to use (check www.pool.ntp.org)
:global SYSntpa "0.uk.pool.ntp.org";
:global SYSntpb "1.uk.pool.ntp.org";
# Check and set NTP servers - "setntppool"

# We need to use the following globals which must be defined here even
# though they are also defined in the script we call to set them.
:global SYSname;
:global SYSsendemail;
:global SYSmyemail;
:global SYSmyname;
:global SYSemailserver;
:global SYSntpa;
:global SYSntpb;

# Load the global variables with the system defaults
/system script run GlobalVars

# Resolve the two ntp pool hostnames
:local ntpipa [:resolve $SYSntpa];
:local ntpipb [:resolve $SYSntpb];

# Get the current settings
:local ntpcura [/system ntp client get primary-ntp];
:local ntpcurb [/system ntp client get secondary-ntp];

# Define a variable so we know if anything's changed.
:local changea 0;
:local changeb 0;

# Debug output
:put ("Old: " . $ntpcura . " New: " . $ntpipa);
:put ("Old: " . $ntpcurb . " New: " . $ntpipb);

# Change primary if required
:if ($ntpipa != $ntpcura) do={
    :put "Changing primary NTP";
    /system ntp client set primary-ntp="$ntpipa";
    :set changea 1;
    }

# Change secondary if required
:if ($ntpipb != $ntpcurb) do={
    :put "Changing secondary NTP";
    /system ntp client set secondary-ntp="$ntpipb";
    :set changeb 1;
    }

# If we've made a change, send an e-mail to say so.
:if (($changea = 1) || ($changeb = 1)) do={
    :put "Sending e-mail.";
    /tool e-mail send \
        to=$SYSsendemail \
        subject=($SYSname . " NTP change") \
        from=$SYSmyemail \
        server=$SYSemailserver \
        body=("Your NTP servers have just been changed:\n\nPrimary:\nOld: " . $ntpcura . "\nNew: " \
          . $ntpipa . "\n\nSecondary\nOld: " . $ntpcurb . "\nNew: " . $ntpipb);
    }

Scheduler entry:
/system scheduler add \
  comment="Check and set NTP servers" \
  disabled=no \
  interval=12h \
  name=CheckNTPServers \
  on-event=setntppool \
  policy=read,write,test \
  start-date=jan/01/1970 \
  start-time=16:00:00
Other scripts

    Dynamic_DNS_Update_Script_for_EveryDNS
    Dynamic_DNS_Update_Script_for_ChangeIP.com
    UPS Script




    Creado por Antons B. el nov 21, 2024 8 min de lectura

    Do not use console numbers to get parameter values
    Why find does not work even if correct value is specified?
    How to define empty array
    How to remove variables
    Get values for properties if 'get' command is not available
    Always check what value and type command returns
    Be careful when adding array to string
    Get/Set unnamed elements in array
    Set element value in 2D array
    Read value of global variable defined in other script
    Accessing global variable from function
    Running function from another function
    Always use unique variable names
    Get values from looped interactive commands like "monitor"
    Get file content received by fetch tool
    Check script permissions
    Be careful when using dont-require-permissions

Do not use console numbers to get parameter values

Lets start with very basics. When you work with console to access parameters, you are used to following syntax:

[admin@rack1_b34_CCR1036] /interface> print 
Flags: D - dynamic, X - disabled, R - running, S - slave 
 #     NAME                                TYPE       ACTUAL-MTU L2MTU  MAX-L2MTU
 0  R  ether1                              ether            1500  1580      1022
[admin@rack1_b34_CCR1036] /interface> set 0 name=LAN   

What print command does is temporary saves buffer with id numbers referencing to internal ID numbers, so obviously if you are trying to use non-existent buffer values script will fail, like, for example this script:

/system script add name=script1 source={
  /ip route set 0 gateway=3.3.3.3
}

Script does not know what you assume by "1" and will throw an error. Proper way is to use internal ID numbers, those numbers can be seen if you are doing print as-value or returned by find command, for example:

[admin@rack1_b34_CCR1036] /ip route> :put [find where dst-address="10.0.0.0/8"] 
*1

So in this case proper script would be:

/system script add name=script1 source={
  /ip route set *1 gateway=3.3.3.3
}

Note that it is not recommended to use internal numbers directly, since items can be removed and re-added in which case internal id number will change and script will fail again, so instead use find command directly in your code:

/system script add name=script1 source={
  /ip route set [find dst-address="0.0.0.0/0"] gateway=3.3.3.3
}


Why find does not work even if correct value is specified?

Lets say we want to print specific address:

[admin@rack1_b34_CCR1036] /ip address> print where address=111.111.1.1/24
Flags: X - disabled, I - invalid, D - dynamic 
 #   ADDRESS            NETWORK         INTERFACE      

So why it does not work?

Console tries to convert variable types as hard as it can, but it is not always possible to do it correctly, so lets look closely why this particular example does not work. First lets check what variable type "address" is:

[admin@rack1_b34_CCR1036] /ip address> :put [:typeof ([print as-value]->0->"address")]
str

So obviously we are comparing string to ip-prefix. And conversion from ip-prefix to string does not happen, so what we can do to solve the problem? Convert variable to correct format:

[admin@rack1_b34_CCR1036] /ip address> print where address=[:tostr 111.111.1.1/24]
  
Flags: X - disabled, I - invalid, D - dynamic 
 #   ADDRESS            NETWORK         INTERFACE                                
 0   111.111.1.1/24     111.111.1.0     ether2  


Or use string directly:

[admin@rack1_b34_CCR1036] /ip address> print where address="111.111.1.1/24"
  
Flags: X - disabled, I - invalid, D - dynamic 
 #   ADDRESS            NETWORK         INTERFACE                                
 0   111.111.1.1/24     111.111.1.0     ether2  

Obviously second method is not suitable if you are getting ip prefix from a variable, then conversion should be done as in first example or by writing variable to string with "$myVar".
How to define empty array

RouterOS does not allow to define empty array in a way that you think it should work:

[admin@1p_DUT_wAP ac] /interface> :global array {}
syntax error (line 1 column 17)

Insted a work around is to convert empty string to an array:

[admin@rack1_b36_CCR1009] > :global array [:toarray ""]
[admin@rack1_b36_CCR1009] > :environment print 
array={}

From here we can use this array to set elements:

[admin@rack1_b36_CCR1009] > :set ($array->"el0") "el0_val"       
[admin@rack1_b36_CCR1009] > :environment print            
array={el0="el0_val"}


How to remove variables

You could use /system script environment remove to remove unused variables, however more preferred method is to unset variable.

Setting no value to existing parameter will unset it, see example below:

[admin@MikroTik] /system script environment> :global myVar 1
[admin@MikroTik] /system script environment> print 
 # NAME               VALUE                                                      
 0 myVar              1                                                          
[admin@MikroTik] /system script environment> :set myVar
[admin@MikroTik] /system script environment> print 
 # NAME               VALUE                                                      
[admin@MikroTik] /system script environment> 

Get values for properties if 'get' command is not available

For example, how do you get usable output for scripting from /interface wireless info hw-info command? Use as-value:

[admin@1p_DUT_wAP ac] /interface wireless info> :put [hw-info wlan1 as-value ]
ranges=2312-2732/5/b;g;gn20;gn40;2484-2484/5/b;g;gn20;gn40;rx-chains=0;1;tx-chains=0;1

Output is 1D array so you can easily get interested property value

[admin@1p_DUT_wAP ac] /interface wireless info> :put ([hw-info wlan1 as-value ]->"tx-chains")      
0;1

Always check what value and type command returns

Lets say we want to get gateway of specific route using as-value, if we execute following command it will return nothing

[admin@rack1_b36_CCR1009] /ip address> :put ([/ip route print as-value where gateway="ether1"]->"gateway") 


Command assumes that output will be 1D array from which we could extract element gateway.

At first lets check if print is actually find anything:

[admin@rack1_b36_CCR1009] /ip address> :put ([/ip route print as-value where gateway="ether1"])  
.id=*400ae12f;distance=255;dst-address=111.111.111.1/32;gateway=ether1;pref-src=111.111.111.1

So obviously there is something wrong with variable itself or variable type returned. Lets check it more closely:

[admin@rack1_b36_CCR1009] /ip address> :global aa ([/ip route print as-value where gateway="ether1"
])       
[admin@rack1_b36_CCR1009] /ip address> :environment print 
aa={{.id=*400ae12f; distance=255; dst-address=111.111.111.1/32; gateway={"ether1"}; pref-src=111.11
1.111.1}}

Now it is clear that returned value is 2D array with one element. So the right sequence to extract gateway will be:

    get 2d array
    get first element
    get "gateway" from picked element

[admin@rack1_b36_CCR1009] /ip address> :put ([:pick [/ip route print as-value where gateway="ether1"] 0]->"gateway")  
ether1

Be careful when adding array to string

If you want to print an array or add an array to existing string, be very careful as it may lead to unexpected results. For example ,we have array with two elements and we want to print the array value on screen:

[admin@1p_DUT_wAP ac] /> :global array {"cccc", "ddddd"}
[admin@1p_DUT_wAP ac] /> :put ("array value is: " . $array )       
array value is: cccc;array value is: ddddd

Obviously this is not what we expected, because what . does is adds string to each array element and then prints the output. Instead you need to convert to string first:

[admin@1p_DUT_wAP ac] /> :put ("array value is: " . [:tostr  $array] )
array value is: cccc;ddddd


Get/Set unnamed elements in array

Lets say we have an array of elements { "el1"; "el2"; "el3" }. It is possible to pick elements of an array with pick command, but is not so neat as syntax below:

[admin@1p_DUT_wAP ac] /> :global test { "el1"; "el2"; "el3" }   
[admin@1p_DUT_wAP ac] /> :put ($test->1)                     
el2

The same syntax can be used to set values:

[admin@1p_DUT_wAP ac] /> :set ($test->2) "el3_changed"
[admin@1p_DUT_wAP ac] /> :environment print 
test={"el1"; "el2"; "el3_changed"}


Set element value in 2D array

Syntax used in example above can also be used to set element value in 2D array:

[admin@1p_DUT_wAP ac] /> :global test {{"11";"12";"13"};{"21";"22";"23"}}   
[admin@1p_DUT_wAP ac] > :set ($test->1->1) "22_changed"
[admin@1p_DUT_wAP ac] > :put [($test->1->1)]           
22_changed
[admin@1p_DUT_wAP ac] > :environment print  
test={{"11"; "12"; "13"}; {"21"; "22_changed"; "23"}}


Read value of global variable defined in other script

Lets say we have one script that declares variable and sets the value:

/system script add name=script1 source={
  :global myVar "hello!"
}

And we want to write the value of that variable in log from another script. Simply adding /log info $myVar will fail to return correct value, because second script does not know anything about variables defined in another scripts. To make it work properly variable need to be defined, so correct second script code is:

/system script add name=script2 source={
  :global myVar;
  :log info "value is: $myvar"
}

Accessing global variable from function

Logically you would think that globally defined variables should be accessible in functions too, but that is not really the case. Lets see an example:

:global myVar "test"
:global myFunc do={
  :put "global var=$myVar"
}
[$myFunc]

Output is:

global var=

So obviously global variable is not accessible directly. To make it work we need do declare global variable inside the function:

:global myVar "test"
:global myFunc do={
  :global myVar;
  :put "global var=$myVar"
}
[$myFunc]

Output:

global var=test


Running function from another function

Same as above applies also to functions. If you want to run function from another function then it need to be declared.

:global test do={
  :return ($1 + 1)
}

:global testtest do={
  :local x 5
  :local y [$test $x]
  :put "typeof = $[:typeof $y]"
  :put "testets_res=$y"
}

Code above will not work as expected, output will be:

typeof = nil
testets_res=

To fix this we need to declare global "test" in "testtest" function

:global testtest do={
  :global test
  :local x 5
  :local y [$test $x]
  :put "typeof = $[:typeof $y]"
  :put "testets_res=$y"
}

Always use unique variable names

One of the most common scripting mistakes that most users are doing is not using unique varible names, for example, variable defined in function has the same name as globally defined variable, which leads to unexpected result:

:global my2 "123"

:global myFunc do={ :global my2; :put $my2; :set my2 "lala"; :put $my2 }
$myFunc my2=1234
:put "global value $my2"

Output will be:

1234
lala
global value 123


Another common case is when user defined variable have the same name as RouterOS built in variable, for example, we want to print route with dst address defined in variable:

[admin@1p_DUT_wAP ac] /ip route> :global "dst-address" "0.0.0.0/0"
[admin@1p_DUT_wAP ac] /ip route> print where dst-address=$"dst-address" 
Flags: X - disabled, A - active, D - dynamic, C - connect, S - static, r - rip, b - bgp, o - ospf, m - mme, 
B - blackhole, U - unreachable, P - prohibit 
 #      DST-ADDRESS        PREF-SRC        GATEWAY            DISTANCE
 0 ADS  0.0.0.0/0                          10.155.136.1              1
 1 ADC  10.155.136.0/24    10.155.136.41   ether1                    0

Obviously result is not as expected, simple solution, use unique variable name:

[admin@1p_DUT_wAP ac] /ip route> :global myDst "0.0.0.0/0"
[admin@1p_DUT_wAP ac] /ip route> print where dst-address=$myDst             
Flags: X - disabled, A - active, D - dynamic, C - connect, S - static, r - rip, b - bgp, o - ospf, m - mme, 
B - blackhole, U - unreachable, P - prohibit 
 #      DST-ADDRESS        PREF-SRC        GATEWAY            DISTANCE
 0 ADS  0.0.0.0/0                          10.155.136.1              1


Get values from looped interactive commands like "monitor"

Frequently asked question s how to get values in script returned by, for example, monitor command? First problem with such commands is that they are running infinitely until user action is applied, obviously you cannot do that from script. Instead you can run with additional parameter once, it will allow to execute command only once and stop. Another problem is getting variable value sin script, there is no as-value, there is no get, but they have do. What it does is allows to access variables returned by the command as in example below:

[admin@1p_DUT_wAP ac] /interface> monitor-traffic ether1 once do={:global myBps $"rx-bits-per-second" }
...
[admin@1p_DUT_wAP ac] /interface> :environment print 
myBps=71464


Get file content received by fetch tool

Fetch tool allows for ease of use downloading file content into memory and allowing to access this data by script. To make it work use as-value parameter and output=user:

[admin@rack1_b34_CCR1036] > :put ([/tool fetch ftp://admin:@10.155.136.41/test.txt
 output=user as-value ]->"data")
my file content


Check script permissions

Lets say we have a script that creates and writes content to the file:

/system script add name=script1 policy=ftp,read,write source={
       /file print file=test;
       /file set test.txt content="my content"
}

Now lets add scheduler that will try to execute this script:

/system scheduler
add interval=10s name=test on-event=script2 policy=read,write

So now we wait 10 seconds, file not created, we wait another 10 seconds and still no file. What is going on? If you look closely script requires policy "ftp", to create a file, but scheduler has only "read" and "write" policies, so script will not be executed. Fix is to set scheduler to run with correct policies "read,write,ftp".

This applies also if you are trying to run script from netwatch, ppp on event and so on, which are limited to specific policies "read,write,test,reboot", so you will not be able to run advanced scripts that creates backups, creates files and so on.

Limitation could be fixed by using dont-require-permissions, but be very careful, read below.
Be careful when using dont-require-permissions

It is possible to set script with dont-require-permissions parameter. Basically it allows anyone without adequate permissions to execute the script. For example, if script has policies "read,write,test,sensitive", but user or application that executes the script has less, for example, "read,write", then by setting dont-require-permissions=yes will allow to run script anyway.

This could potentially allow to change sensitive information using script even if user doe snot have enough permissions. 


System Information and Utilities

    Creado por Usuario desconocido (emils), actualizado por última vez el may 31, 2022 1 min de lectura

In This Section:

        Clock
        Device-mode
        E-mail
        Fetch
        Files
        Identity
        Interface Lists
        Neighbor discovery
        Note
        NTP
        Partitions
        Precision Time Protocol
        Scheduler
        Services
        TFTP





    Creado por Usuario desconocido (olga), actualizado por última vez por Mārtiņš S. el feb 05, 2025 3 min de lectura

Introduction

RouterOS uses data from the TZ database, Most of the time zones from this database are included, and have the same names. Because local time on the router is used mostly for timestamping and time-dependent configuration, and not for historical date calculations, time zone information about past years is not included. Currently, only information starting from 2005 is included.

Following settings are available in the /system clock console path and in the "Time" tab of the "System > Clock" WinBox window.

Startup date and time is jan/02/1970 00:00:00 [+|-]gmt-offset. 
Properties

time (HH:MM:SS);
	

where HH - hour 00..24, MM - minutes 00..59, SS - seconds 00..59).
date (mmm/DD/YYYY);	where mmm - month, one of jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec, DD - date, 00..31, YYYY - year, 1970..2037): date and time show current local time on the router. These values can be adjusted using the set command. Local time cannot, however, be exported, and is not stored with the rest of the configuration.
time-zone-name (manual, or name of time zone; default value: manual);	Name of the time zone. As most of the text values in RouterOS, this value is case sensitive. Special value manual applies manually configured GMT offset, which by default is 00:00 with no daylight saving time.
time-zone-autodetect (yes or no; default: yes);	Feature available from v6.27. If enabled, the time zone will be set automatically.

 Time-zone-autodetect by default is enabled on new RouterOS installation and after configuration reset. The time zone is detected depending on the router's public IP address and our Cloud servers database. Since RouterOS v6.43 your device will use cloud2.mikrotik.com to communicate with MikroTik's Cloud server. Older versions will use cloud.mikrotik.com to communicate with the MikroTik's Cloud server.

Be aware that the router's internal CPU clock is not a reliable time source for precise timing operations, as its frequency may vary due to power management, thermal conditions, and hardware differences, even between identical models. This variation is expected and does not affect normal router performance. For accurate timekeeping, it is recommended to use network-based time synchronisation, such as NTP (Network Time Protocol).

Configuration
Active time zone information

    dst-active (yes or no>; read-only property): This property has the value yes while daylight saving time of the current time zone is active.
    gmt-offset ([+|-]HH:MM - offset in hours and minutes; read-only property): This is the current value of GMT offset used by the system, after applying base time zone offset and active daylight saving time offset.

Manual time zone configuration

These settings are available in /system clock manual console path and in the "Manual Time Zone" tab of the "System > Clock" WinBox window. These settings have an effect only when time-zone-name=manual. It is only possible to manually configure single daylight saving time period.

    time-zone, dst-delta ([+|-]HH:MM - time offset in hours and minutes, leading plus sign is optional; default value: +00:00) : While DST is not active use GMT offset time-zone. While DST is active use GMT offset time-zone + dst-delta.
    dst-start, dst-end (mmm/DD/YYYY HH:MM: SS - date and time, either date or time can be omitted in the set command; default value: jan/01/1970 00:00:00): Local time when DST starts and ends.





    Creado por Oskars K., actualizado por última vez por Serhii T. el mar 28, 2025 7 min de lectura

The device-mode is a feature which sets specific limitations on a device, or limits access to specific configuration options. Such feature is required in order to protect your router and network from attackers who might in some way gain access to your router and use it as a gateway for attacks to other networks. By protecting your device in such a way, even if an attacker manages to gain access to your unprotected device, he will not be able to use it in order to abuse your or any other network.

There are three available modes: advanced, home and basic. Device modes are factory pre-installed to routers, if the router is manufactured and shipped with MikroTik RouterOS v7.17 or later. Advanced (previously called enterprise) mode is assigned to CCR and 1100 series devices, home mode is assigned to home routers and basic mode to any other type of device. For devices running versions prior to RouterOS version 7.17, all devices use the advanced/enterprise mode. 
[admin@MikroTik] > system/device-mode/print 
                 mode: advanced     
     allowed-versions: 7.13+,6.49.8+
              flagged: no           
     flagging-enabled: yes          
            scheduler: yes          
                socks: yes          
                fetch: yes          
                 pptp: yes          
                 l2tp: yes          
       bandwidth-test: yes          
          traffic-gen: no           
              sniffer: yes          
                ipsec: yes          
                romon: yes          
                proxy: yes          
              hotspot: yes          
                  smb: yes          
                email: yes          
             zerotier: yes          
            container: no           
  install-any-version: no           
           partitions: no           
          routerboard: yes          
        attempt-count: 0   

The device-mode can be changed by the user, but remote access to the device is not enough to change it. After changing the device-mode, you need to confirm it, by pressing a button on the device itself, or perform a "cold reboot" - that is, unplug the power. When the change is confirmed, regardless of confirmation mode, the device will be rebooted! 
[admin@MikroTik] > system/device-mode/update mode=home 
  update: please activate by turning power off or pressing reset or mode button 
          in 5m00s
-- [Q quit|D dump|C-z pause]

If no power off or button press is performed within the specified time, the mode change is canceled. If another update command is run in parallel, both will be canceled. 

There are several EOL products which do not "confirm" mode changes with a reset button press. These routers can confirm mode change only with a power cycle.

In order to protect your device against attacker who might silently gain access to your router, abuse it with some scripts and simply try to wait until you will reboot your router and not even know that at that time you are accepting changes requested by some intruder, you can "update" mode only three times. There is a counter which will count how many update attempts are made and will not allow any more updates. This counter can be reset only when administrator does power-cycle the router or press a button when seeing such a warning on mode settings update attempt (same as with accepting any updates).
[admin@MikroTik] > system/device-mode/update container=yes 
  update: too many unsuccessful attempts, turn off power or reboot by pressing reset or mode button in 4m55s to reset attempt-count

The following commands are available in the /system/device-mode menu: 

get
	

Returns value that you can assign to variable or print on the screen.
print	Shows the active mode and its properties.
update	Applies changes to the specified properties, see below. 
Available device-mode modes

There are three device modes available for configuration (mode=advanced is default one), each mode has a subset of features that are not allowed when it is used. Note that there is no mode, which has all features enabled. Certain features need to be enabled even if you have "advanced" mode enabled. See section "Feature clarification" for more details about what each option means. So, as per the below table it can be seen that "traffic-gen, container, partitions, routerboard" features are always disabled, unless specifically enabled by the admin user. 
advanced (default)	traffic-gen, container, install-any-version, partitions, routerboard
basic	

socks, bandwidth-test, traffic-gen, proxy, hotspot, zerotier, container, install-any-version, partitions, routerboard
home	scheduler, socks, fetch, bandwidth-test, traffic-gen, sniffer, romon, proxy, hotspot, email, zerotier, container, install-any-version, partitions, routerboard
List of available properties
scheduler, socks, fetch, pptp, l2tp, bandwidth-test, traffic-gen, sniffer, ipsec, romon, proxy, hotspot, smb, email, zerotier, container, install-any-version, partitions, routerboard  (yes | no)	The list of available features, which can be controlled with the device-mode option. See section "Feature clarification" for more details about what each option means. 
activation-timeout (default: 5m);	The reset button or power off activation timeout can be set in range 00:00:10 .. 1d00:00:00. If the reset button is not pressed (or cold reboot is not performed) during this interval, the update will be canceled. 
flagging-enabled (yes | no; Default: yes)	

Device will perform configuration analysis and if traces of suspicious code are found, flagged mode will be triggered, setting flagged=yes, enabling restrictions described in the flagged=yes. See the See the "Flagged status" paragraph.
flagged (yes | no; Default: no)	RouterOS employs various mechanisms to detect tampering with it's system files. If the system has detected unauthorized access to RouterOS, the status "flagged" is set to yes. If "flagged" is set to yes, for your safety, certain limitations are put in place. See below chapter for more information. 
mode: (basic, home, advanced; default: advanced);	Allows choosing from available modes that will limit device functionality.

By default, advanced mode allows options except traffic-gen, container, partitions, install-any-version, routerboard. So to use these features, you will need to turn it on by performing a device-mode update. 

By default, home mode disables the following features: scheduler, socks, fetch, bandwidth-test, traffic-gen, sniffer, romon, proxy, hotspot, email, zerotier, container, install-any-version, partitions, routerboard.

More specific control over the available features is possible. Each of the features controlled by device-mode can be specifically turned on or off. 

For instance scheduler won't allow to perform any action at system scheduler. Used device-mode disables all listed features, for instance  mode=home is used, but zerotier is required for your setup, device-mode update /system device-mode update zerotier=yes will be required with the physical access to device to push the button or cut the power.

 
[admin@MikroTik] > system/device-mode/update mode=home email=yes
[admin@MikroTik] > system/device-mode/update mode=advanced zerotier=no

If the update command specifies any of the mode parameters, this update replaces the entire device-mode configuration. In this case, all "per-feature" settings will be lost, except those specified with this command. For instance:
[admin@MikroTik] > system/device-mode/update mode=home email=yes fetch=yes
[admin@MikroTik] > system/device-mode/print config
   mode: home
  fetch: yes
  email: yes
[admin@MikroTik] > system/device-mode/update mode=advanced sniffer=no
-- reboot --
[admin@MikroTik] > system/device-mode/print config
     mode: advanced
  sniffer: no

We see that fetch = yes and email = yes is missing, as they were overriden with the mode change. However, specifying only "per-feature" settings will change only those:
[admin@MikroTik] > system/device-mode/update hotspot=no
-- reboot --
[admin@MikroTik] > system/device-mode/print config
     mode: advanced
  sniffer: no
  hotspot: no

If the feature is disabled, an error message is displayed for interactive commands:
[admin@MikroTik] > system/device-mode/print config
     mode: advanced
  sniffer: no
  hotspot: no
[admin@MikroTik] > tool/sniffer/quick 
failure: not allowed by device-mode

However, it is possible to add the configuration to a disabled feature, but there will be a comment showing the disabled feature in the device-mode:
[admin@MikroTik] > ip hotspot/add interface=ether1 
[admin@MikroTik] > ip hotspot/print 
Flags: X, S - HTTPS
Columns: NAME, INTERFACE, PROFILE, IDLE-TIMEOUT
#   NAME      INTERFACE  PROFILE  IDLE-TIMEOUT
;;; inactivated, not allowed by device-mode
0 X hotspot1  ether1     default  5m          
Feature clarification 
Feature	Clarification of which menus become unavailable to change
bandwidth-test	

/tool bandwidth-test
/tool bandwidth-server

/tool speed-test
routerboard	/system routerboard settings (except auto-upgrade option)
container	all container functionality

install-any-version
	

RouterOS will no longer allow for you to install RouterOS version below versions listed under "allowed-versions" attribute.
email	/tool e-mail 
fetch	/tool fetch
hotspot	/ip hotspot
ipsec	/ip ipsec
l2tp	

/interface l2tp-server

/interface l2tp-client
partitions	

/partitions 

does not allow to change count of partitions. If your router is unable to boot, it will still be able to boot into your other partitions. No restriction for crash recovery.
pptp	

/interface pptp-server

/interface pptp-client
proxy	/ip proxy
romon	/tool romon
scheduler	/system scheduler
smb	/ip smb
sniffer	/tool sniffer
socks	/ip socks
traffic-gen	

/tool traffic-generator

/tool flood-ping

/tool ping-speed
zerotier	/zerotier
Allowed versions

Device mode lists in its parameters an argument called "allowed-versions". This is a list of versions which MikroTik considers as secure and which ones do not include any serious vulnerabilities which could be used by an attacker. This list can be updated to versions which includes some major changes in RouterOS below which downgrade should not be allowed.

This setting does not depend on the installed RouterOS version and works as a separate mechanism, in order to disallow attacker to downgrade version step-by-step in order to reach some vulnerable RouterOS release. This means that if you upgrade RouterOS to a release where a newer "allowed-versions" list is available, oldest list will be overwritten. If you downgrade RouterOS, "allowed-versions" list will not change and will remain updated to the latest list.

This list is ignored, if device-mode "install-any-version" is enabled.
Flagged status

Along with the device-mode feature, RouterOS now can analyze the whole configuration at system startup, to determine if there are any signs of unauthorized access to your router. If suspicious configuration is detected, the suspicious configuration will be disabled and the flagged parameter will be set to "yes". The device has now a Flagged state and enforces certain limitations. 
[admin@MikroTik] > system/device-mode/print 
     mode: advanced
  flagged: yes
  sniffer: no
  hotspot: no

If the system has this flagged status, the current configuration works, but it is not possible to perform the following actions: 

bandwidth-test, traffic-generator, sniffer, as well as configuration actions that enable or create new configuration entries (it will still be possible to disable or delete them) for the following programs: system scheduler, SOCKS proxy, pptp, l2tp, ipsec, proxy, smb.

When performing the aforementioned actions while the router has the flagged state, you will receive an error message:
[admin@MikroTik] > /tool sniffer/quick 
failure: configuration flagged, check all router configuration for unauthorized changes and update device-mode
[admin@MikroTik] > /int l2tp-client/add connect-to=1.1.1.1 user=user
failure: configuration flagged, check all router configuration for unauthorized changes and update device-mode

To exit the flagged state, you must perform the command "/system/device-mode/update flagged=no". The system will ask to either press a button, or issue a hard reboot (cut power physically or do a hard reboot of the virtual machine). 

Important! Although the system has disabled any malicious looking rules, which triggered the flagged state, it is crucial to inspect all of your configuration for other unknown things, before exiting the flagged state. If your system has been flagged, assume that your system has been compromised and do a full audit of all settings before re-enabling the system for use. After completing the audit, change all the system passwords and upgrade to the latest RouterOS version. 

Starting from RouterOS version 7.17 device-mode restricts SwOS/RouterOS transition for dual-boot; in order to enable: system/device-mode/update routerboard=yes



    Creado por Usuario desconocido (reinisjs), actualizado por última vez por Serhii T. el abr 25, 2025 3 min de lectura

    Properties
    Sending Email
    Basic examples

An E-mail tool is a utility that allows sending e-mails from the router. The tool can be used to send regular configuration backups and exports to a network administrator.

Email tool uses only plain authentication and TLS encryption. Other methods are not supported.
Properties
/tool e-mail

This submenu allows setting SMTP server that will be used.
address (IP/IPv6 address; Default: 0.0.0.0)	

SMTP server's IP address.
from (string; Default: <>)	Name or email address that will be shown as a receiver.
password (string; Default: "")	Password used for authenticating to an SMTP server.
port (integer[0..65535]; Default: 25)	SMTP server's port.
tls (no|yes|starttls; Default: no)	Whether to use TLS encryption:

    yes - sends STARTTLS and drops the session if TLS is not available on the server
    no - do not send STARTTLS
    starttls - sends STARTTLS and continue without TLS if a server responds that TLS is not available

user (string; Default: "")	The username used for authenticating to an SMTP server.

vrf (VRF name; default value: main)
	Set VRF on which service is creating outgoing connections.


Note: All server's configurations (if specified) can be overridden by send command.
Sending Email
/tool e-mail send

Send command takes the following parameters:
body (string; Default: )	The actual body of the email message
cc (string; Default: )	Send a copy to listed recipients. Multiple addresses allowed, use "," to separate entries
file (File[,File]; Default: )	List of the file names that will be attached to the mail separated by a comma.
from (string; Default: )	Name or email address which will appear as the sender. If a not specified value from the server's configuration is used.
password (string; Default: )	Password used to authenticate to an SMTP server. If a not specified value from the server's configuration is used.
port (integer[0..65535]; Default: )	Port of SMTP server. If not specified, a value from the server's configuration is used.
server (IP/IPv6 address; Default: )	Ip or IPv6 address of SMTP server. If not specified, a value from the server's configuration is used.
tls (yes|no|starttls; Default: no)	Whether to use TLS encryption:

    yes - sends STARTTLS and drops the session if TLS is not available on the server
    no - do not send STARTTLS
    starttls - sends STARTTLS and continue without TLS if a server responds that TLS is not available

subject (string; Default: )	The subject of the message.
to (string; Default: )	Destination email address. Single address allowed.
user (string; Default: )	The username used to authenticate to an SMTP server. If not specified, a value from the server's configuration is used.
Basic examples

This example will show how to send an email with configuration export every 24hours.

1. Configure SMTP server
[admin@MikroTik] /tool e-mail> set server=10.1.1.1 port=25 from="router@mydomain.com"

2. Add a new script named "export-send":
/export file=export 
/tool e-mail send to="config@mydomain.com" subject="$[/system identity get name] export" \ 
body="$[/system clock get date] configuration file" file=export.rsc

3. Add scheduler to run our script:
/system scheduler add on-event="export-send" start-time=00:00:00 interval=24h


Send e-mail to a server using TLS/SSL encryption. For example, Google mail requires that.

After the Google mail added a new security policy that does not allow 3d-party devices to authenticate using your standard Gmail password → you need to generate a 16-digit passcode ("App password") and use it instead of your Gmail password. To configure this, navigate to the "Security>How you sign in to Google" section settings and:

    Enable 2-Step Verification;
    Generate an App password.

Use the newly generated App password in the "set password=mypassword" setting shown below.

1. configure a client to connect to the correct server:
/tool e-mail 
set address=smtp.gmail.com
set port=465
set tls=yes 
set from=myuser@gmail.com 
set user=myuser 
set password=mypassword

2. send e-mail using send command:
/tool e-mail send to=myuser@anotherdomain.com subject="email test" body="email test" 



    Creado por Artūrs C., actualizado por última vez por Matīss O. el feb 25, 2025 4 min de lectura

    Summary
    Properties
    Configuration Examples
        Sending information to a remote host
        Return value to a variable

Summary

Fetch is one of the console tools in MikroTik RouterOS. It is used to copy files to/from a network device via HTTP, HTTPS, FTP or SFTP. It can also be used to send POST/GET requests and send any kind of data to a remote server. In HTTPS mode by default, no certificate checks are made, setting check-certificate to yes enables trust chain validation from the local certificate store (can be used only in HTTPS mode).
Properties
address (string; Default: )	IP address of the device to copy file from. Also at the end of the address you can specify "@vrf_name" in order to run fetch on particular VRF. You can skip specifying address and specify only VRF on this parameter, if you use URL parameter.
as-value (set | not-set; Default: not-set)	Store the output in a variable, should be used with the output property.
ascii (yes | no; Default: no)	Can be used with FTP and TFTP
certificate (string; Default: )	

Certificate that should be used for host verification. Can be used only in HTTPS mode.
check-certificate (yes | yes-without-crl | no; Default: no)	

Enables trust chain validation from local certificate store. yes-without-crl, validates a certificate, not performing CRL check (certificate revocation list).  Can be used only in HTTPS mode.
dst-path (string; Default: )	Destination path. Can be used to download file directly into an external disk, for example.
duration (time; Default: )	

Time how long fetch should run.
host (string; Default: )	

A domain name or virtual domain name (if used on a website, from which you want to copy information). For example,

address=wiki.mikrotik.com host=forum.mikrotik.com


In this example the resolved ip address is the same (66.228.113.27), but hosts are different.
http-auth-scheme (basic|digest; Default: basic)	HTTP authentication scheme

http-method (delete|get|head|post|put|patch; Default: get)
	HTTP method to use
http-data (string; Default: )	The data, that is going to be sent, when using PUT or POST methods. Data limit is 64Kb.
http-header-field (string; Default: *empty*)	List of all header fields and their values, in the form of http-header-field="h1:fff,h2:yyy" or http-header-field="h:fff\\,yyy" (within a single header multiple values need to be "escaped" using two backlashes).
http-content-encoding (deflate|gzip; Default: *empty*)	Encodes the payload using gzip or deflate compression and adds a corresponding Content-Encoding header. Usable for HTTP POST and PUT only.
http-max-redirect-count (integer; Default: 0)	Allows to follow redirects the specified number of times.
idle-timeout (time; Default: 10s)	Idle timeout since last read/write action.
keep-result (yes | no; Default: yes)	If yes, creates an input file.
mode (ftp|http|https|sftp|tftp; Default: http)	Choose the protocol of connection - http, https , ftp, sftp or tftp. Mode option is deprecated. To specify a protocol that you wish to use, we advise using "url" parameter instead (for example, like this "url=sftp://your_IP_address").
output (none|file|user|user-with-headers; Default: file)	Sets where to store the downloaded data.

    none - do not store downloaded data
    file - store downloaded data in a file
    user - store downloaded data in the data variable (variable limit is 64Kb)
    user-with-headers - store downloaded data and headers in the data variable (variable limit is 64Kb (20Kb for downloaded data, 44Kb for headers))

password (string; Default: anonymous)	Password, which is needed for authentication to the remote device.
port (integer; Default: )	Connection port.
src-address (ip address; Default: )	Source address that is used to establish connection. Can be used only HTTP/S and SFTP modes.
src-path (string; Default: )	Title of the remote file you need to copy.
upload (yes | no; Default: no)	Only (S)FTP modes support upload. If enabled then fetch will be used to upload files to a remote server. Requires src-path and dst-path parameters to be set.
url (string; Default: )	URL pointing to file. Can be used instead of address and src-path parameters.
user (string; Default: anonymous)	Username, which is needed for authentication to the remote device.


Configuration Examples

The following example shows how to copy the file with filename "conf.rsc" from a device with ip address 192.168.88.2 by FTP protocol and save it as file with filename "123.rsc". User and password are needed to login into the device.
[admin@MikroTik] /tool> fetch address=192.168.88.2 src-path=conf.rsc \
user=admin mode=ftp password=123 dst-path=123.rsc port=21 \
host="" keep-result=yes

Example to upload file to another router:
[admin@MikroTik] /tool> fetch address=192.168.88.2 src-path=conf.rsc \
user=admin mode=ftp password=123 dst-path=123.rsc upload=yes

Another file download example that demonstrates the usage of url property.
[admin@MikroTik] /> /tool fetch url="https://www.mikrotik.com/img/netaddresses2.pdf" mode=http 
  status: finished

[admin@test_host] /> /file print 
 # NAME                     TYPE                  SIZE                 CREATION-TIME       
 ...
 5 netaddresses2.pdf        .pdf file             11547                jun/01/2010 11:59:51
Sending information to a remote host

It is possible to use an HTTP POST request to send information to a remote server, that is prepared to accept it. In the following example, we send geographic coordinates to a PHP page:
/tool/fetch http-method=post http-header-field="Content-Type:application/json" http-data="{\"lat\":\"56.12\",\"lon\":\"25.12\"}" url="https://testserver.lv/index.php"    

In this example, the data is uploaded as a file. Important note, since variable data comes from a file, a file can only be in size up to 4KB. This is a limitation of RouterOS variables.
/export file=export.rsc

:global data [/file get [/file find name=export.rsc] contents];
:global $url "https://prod-51.westeurope.logic.azure.com:443/workflows/blabla/triggers/manual/paths/invoke....";

/tool fetch mode=https http-method=put http-data=$data url=$url
Return value to a variable

It is possible to save the result of the fetch command to a variable. For example, it is possible to trigger a certain action based on the result that an HTTP page returns. You can find a very simple example below that disables ether2 whenever a PHP page returns "0":
{
    :local result [/tool fetch url=https://10.0.0.1/disable_ether2.php as-value output=user];
    :if ($result->"status" = "finished") do={
        :if ($result->"data" = "0") do={
            /interface ethernet set ether2 disabled=yes;
        } else={
            /interface ethernet set ether2 disabled=no;
        }
    }
}



    Creado por Artūrs C., actualizado por última vez por Matīss O. el feb 11, 2025 3 min de lectura

    Overview
    Create new file or directory
        Properties
    Properties
    Get file contents
        Properties

Overview

File menu shows all user space files on the router. It is possible to create a new file, directory, edit file content, delete file or directory.  If RouterOS ".npk" package is uploaded, the file menu will also show package-specific information, for example, architecture, build date and time, etc.

It is possible to retrieve content and edit files up to 60KB in size. For accessing contents of larger files, please refer to section Get File Contents.


[admin@MikroTik] > file print detail 
 0 name=wireless-7.16.1-arm.npk type=package size=1924.1KiB last-modified=2024-11-25 13:14:28 package-name="wireless" package-version="7.16.1" package-build-time=2024-10-10 14:03:32 
   package-architecture="arm" 

 1 name=routeros-7.16.1-arm.npk type=package size=11.1MiB last-modified=2024-11-25 13:14:34 package-name="system" package-version="7.16.1" package-build-time=2024-10-10 14:03:32 
   package-architecture="arm" 

 2 name=flash type=disk last-modified=2024-11-25 13:12:10 

 3 name=flash/skins type=directory last-modified=2024-11-25 13:10:52 

 4 name=flash/skins/newskin.json type=.json file size=0 last-modified=2024-11-25 13:10:52 

 5 name=flash/filename type=file size=0 last-modified=2024-11-25 13:11:58 

 6 name=flash/directory_name type=directory last-modified=2024-11-25 13:12:10 
Create new file or directory

To create a new file or directory: 
[admin@MikroTik] > file add name=/flash/filename type=file           
[admin@MikroTik] > file add name=/flash/directory_name type=directory 
Properties
contents (string; Default: )	File contents that must be added. Works only for type=file
name (string; Default: )	File/directory name
type (file | directory; Default: file)	Specifies type 


If the device has a directory named "flash" in its file list, then files which you want to be kept after the system reboot/power cycle must be stored within it. As anything outside of it is kept within a RAM disk and will be lost upon reboot. This does not include .npk upgrade files as they will be applied by the upgrade process before the system discards the RAM drive content.

For multicore devices with a NAND flash memory (e.g. CCR series routers, RB4011iGS), RouterOS uses a write-back that will cache file changes into RAM memory instead of writing them straight away into flash media. The file changes will be stored on the flash when it is absolutely necessary, the writing can be delayed by up to 40 seconds. This helps to reduce CPU cycles which results in better performance. However, this can cause empty or zero-length files when a device experiences a sudden power loss, because files were not fully saved on a flash.
Properties
contents (string; Default: )	The actual content of the file

creation-time (time)

Until RouterOS 7.16
	

A time when the file was created

last-modified (time) 
	

The time when the file was created or last modified. Introduced instead of creation-time in RouterOS 7.16.
name (string)	Name of the file
package-architecture (string)	Architecture that package is built for. Applies only to RouterOS ".npk" files
package-built-time (string)	A time when the package was built. Applies only to RouterOS ".npk" files
package-name (string)	Name of the installable package that. Applies only to RouterOS ".npk" files
package-version (string)	A version of the installable package that. Applies only to RouterOS ".npk" files
size (integer)	File size in bytes
type (string)	Type of the file. For folders, the file type is the directory
Get file contents

Using the get command, it is possible to retrieve file contents only from files up to 60KB in size. For accessing contents of larger files, use command read. The result is returned as an array.

For example:
[admin@MikroTik] > :put [/file/get text.txt contents]
123456

[admin@MikroTik] > /file/read file=text.txt offset=2 chunk-size=3    
  data: 345
Properties
chunk-size (integer [1..32768]; Default: )	Chunk size that will be read from file
file (string; Default: )	File name from which to read
offset (integer; Default:)	Specifies offset where to start read file






    Creado por Usuario desconocido (olga), actualizado por última vez por Artūrs C. el ene 28, 2021 1 min de lectura

Overview

Setting the System's Identity provides a unique identifying name for when the system identifies itself to other routers in the network and when accessing services such as DHCP, Neighbour Discovery, and default wireless SSID. The default system Identity is set to 'MikroTik'.

System Identity has a 64 maximum character length
Configuration

To set system identity in RouterOS:
[admin@MikroTik] > /system identity set name=New_Identity 
[admin@New_Identity] >


The current System Identity is always displayed after the logged-in account name and with the print command:
[admin@New_Identity] /system identity>print
name: New_Identity
[admin@New_Identity] /system identity>
SNMP

It is also possible to change the router system identity by SNMP set command:
snmpset -c public -v 1 192.168.0.0 1.3.6.1.2.1.1.5.0 s New_Identity

snmpset - Linux based SNMP application used for SNMP SET requests to set information on a network entity;

    public - router's community name;
    192.168.0.0 - IP address of the router;
    1.3.6.1.2.1.1.5.0 - SNMP value for router's identity;





    Creado por Usuario desconocido (emils), actualizado por última vez por GG el mar 26, 2024 2 min de lectura

    Summary
    Lists
    Members

Summary

Allows defining a set of interfaces for easier interface management in the different interface-based configuration sections such as Neighbor Discovery, Firewall, Bridge, and Internet Detect. 
Lists

Sub-menu: /interface list

This menu contains information about all interface lists available on the router. There are four predefined lists - all (contains all interfaces), none (contains no interfaces), dynamic (contains dynamic interfaces), and static (contains static interfaces). It is also possible to create additional interface lists.

Dynamic interfaces are interfaces that have a "dynamic" flag. Any interface that doesn't have a dynamic flag will be part of the static interface list.


name (string)	Name of the interface list
include (string)	Defines interface list which members are included in the list. It is possible to add multiple lists separated by commas
exclude (string)	Defines interface list which members are excluded from the list. It is possible to add multiple lists separated by commas


Members are added to the interface list in the following order:

    include members are added to the interface list
    exclude members are removed from the list
    Statically configured members are added to the list

Members

Sub-menu: /interface list member

This sub-menu contains information about statically configured interface members to each interface list. Note that dynamically added interfaces by include and exclude statements are not represented in this sub-menu.
interface (string)	Name of the interface
list (string)	Name of the interface list


Care must be taken when working with bridges and lists. Adding a bridge as a member is not the same as adding all its ports! And adding all slave ports as members is not the same as adding the bridge itself. This can particularly impact functionality of neighbor discovery.



    Creado por GG, actualizado por última vez por Mārtiņš S. el jun 20, 2025 6 min de lectura

    Summary
    Neighbor list
    Discovery configuration
    LLDP

Summary

Neighbor Discovery protocols allow us to find devices compatible with MNDP (MikroTik Neighbor Discovery Protocol), CDP (Cisco Discovery Protocol), or LLDP (Link Layer Discovery Protocol) in the Layer2 broadcast domain. It can be used to map out your network.
Neighbor list

The neighbor list shows all discovered neighbors in the Layer2 broadcast domain. It shows to which interface neighbor is connected, its IP/MAC addresses, and other related parameters. The list is read-only, an example of a neighbor list is provided below:
[admin@MikroTik] /ip neighbor print 
 # INTERFACE ADDRESS         MAC-ADDRESS       IDENTITY   VERSION    BOARD      
 0 ether13   192.168.33.2    00:0C:42:00:38:9F MikroTik   5.99       RB1100AHx2
 1 ether11   1.1.1.4         00:0C:42:40:94:25 test-host  5.8        RB1000   
 2 Local     10.0.11.203     00:02:B9:3E:AD:E0 c2611-r1   Cisco I...                    
 3 Local     10.0.11.47      00:0C:42:84:25:BA 11.47-750  5.7        RB750  
 4 Local     10.0.11.254     00:0C:42:70:04:83 tsys-sw1   5.8        RB750G    
 5 Local     10.0.11.202     00:17:5A:90:66:08 c7200      Cisco I...

Sub-menu: /ip neighbor
address (IP)	The highest IP address configured on a discovered device
address6 (IPv6)	IPv6 address configured on a discovered device
age (time)	Time interval since last discovery packet
discovered-by (cdp|lldp|mndp)	Shows the list of protocols the neighbor has been discovered by. The property is available since RouterOS version 7.7.
board (string)	RouterBoard model. Displayed only to devices with installed RouterOS
identity (string)	Configured system identity
interface (string)	Interface name to which discovered device is connected
interface-name (string)	Interface name on the neighbor device connected to the L2 broadcast domain. Applies to CDP.
ipv6 (yes | no)	Shows whether the device has IPv6 enabled.
mac-address (MAC)	Mac address of the remote device. Can be used to connect with mac-telnet.
platform (string)	Name of the platform. For example "MikroTik", "cisco", etc.
software-id (string)	RouterOS software ID on a remote device. Applies only to devices installed with RouterOS.
system-caps (string)	System capabilities reported by the Link-Layer Discovery Protocol (LLDP).
system-caps-enabled (string)	Enabled system capabilities reported by the Link-Layer Discovery Protocol (LLDP).
unpack (none|simple|uncompressed-headers|uncompressed-all)	Shows the discovery packet compression type.
uptime (time)	Uptime of remote device. Shown only to devices installed with RouterOS.
version (string)	Version number of installed software on a remote device
running (string array)	Report a list of "features" running on neighbour device. Currently lists only "CAPsMAN" feature.

Starting from RouterOS v6.45, the number of neighbor entries are limited to (total RAM in megabytes)*16 per interface to avoid memory exhaustion.
Discovery configuration

It is possible to change whether an interface participates in neighbor discovery or not using an Interface list. If the interface is included in the discovery interface list, it will send out basic information about the system and process received discovery packets broadcasted in the Layer2 network. Removing an interface from the interface list will disable both the discovery of neighbors on this interface and also the possibility of discovering this device itself on that interface.
/ip neighbor discovery-settings


discover-interface-list (string; Default: static)	Interface list on which members the discovery protocol will run on.
discover-interval (time: 5s..9h6m8s; Default: 30s)	Adjusts the frequency at which neighbor discovery packets are transmitted. It also adjusts the Time-to-Live (TTL) TLV value for CDP and LLDP packets using the formula: (discover-interval * 4) + 1. The setting is available since RouterOS version 7.16.
lldp-dcbx (yes | no; Default: no)	

Whether to send Data Center Bridging Capabilities Exchange Protocol (DCBX) TLVs, which allows to communicate switch QoS settings and capabilities with other neighboring devices using LLDP. Only applies to CRS3xx, CRS5xx, CCR2116 and CCR2216 devices.

Enabled DCBX includes the following TLVs:

    ETS (Enhanced Transmission Selection) Configuration TLV. This TLV is used to share the switch's ETS configuration. It includes:
        The willingness bit, which indicates whether the device is willing to accept QoS configuration from neighboring devices. In RouterOS, the willing bit is set to disabled, meaning the switch will not accept remote configurations and instead uses its own settings.
        The priority assignment table, which maps priorities to specific traffic-class.
        The bandwidth allocation table, where RouterOS calculates the percentage of bandwidth allocated to each queue based on the weight property. This applies to queues using the high-priority-group in the /interface/ethernet/switch/qos/tx-manager/queue settings.
        The Transmission Selection Algorithm (TSA) table, where high-priority-group queues are assigned to ETS, strict-priority queues to Strict Priority, and low-priority-group or non-hardware offloaded queues to the Vendor Specific Algorithm.
    ETS Recommendation TLV. This provides a recommendation on how neighboring devices should configure ETS. RouterOS uses the same data as in the ETS Configuration TLV to give its recommendation.
    Priority-based Flow Control Configuration TLV. This TLV is used to share PFC configuration. Similar to the ETS TLV, the willingness bit is set to disabled, meaning the switch does not accept remote PFC configurations. PFC is enabled for specific priorities based on settings configured under /interface/ethernet/switch/qos/priority-flow-control, and /interface/ethernet/switch/qos/port.
    Application Priority TLV. This TLV is used to communicate how different applications are prioritized in the network.
    Application VLAN TLV. This TLV is used to share VLAN configurations for applications. RouterOS currently does not support sending values in this TLV and will send an empty VLAN table instead.

lldp-mac-phy-config (yes | no; Default: no)	

Whether to send MAC/PHY Configuration/Status TLV in LLDP, which indicates the interface capabilities, current setting of the duplex status, bit rate, and auto-negotiation. Only applies to the Ethernet interfaces. While TLV is optional in LLDP, it is mandatory when sending LLDP-MED, meaning this TLV will be included when necessary even though the property is configured as disabled.
lldp-max-frame-size (yes | no; Default: no)	

Whether to send Maximum Frame Size TLV in LLDP, which indicates the maximum frame size capability of the interface in bytes (l2mtu + 18). Only applies to the Ethernet interfaces.
lldp-poe-power (yes | no; Default: yes)	

Two specific TLVs facilitate Power over Ethernet (PoE) management between Power Sourcing Equipment (PSE) and Powered Devices (PD):

    IEEE 802.3 Organizationally Specific Power Via MDI TLV
    TIA-1057 (LLDP-MED) Organizationally Specific Extended Power via MDI TLV

The lldp-poe-power attribute determines whether to transmit the IEEE 802.3 Organizationally Specific Power Via MDI TLV in LLDP messages.

The transmission of LLDP-MED Organizationally Specific Extended Power via MDI TLV is not configurable. It is automatically included in outgoing LLDP-MED packets when the remote device has transmitted LLDP-MED capability of receiving power.

These TLVs are relevant only for Ethernet interfaces that support PoE-Out. The setting is available since RouterOS version 7.15, and it replaces PoE-out port poe-lldp-enabled setting.
lldp-med-net-policy-vlan (integer 0..4094; Default: disabled)	

Advertised VLAN ID for LLDP-MED Network Policy TLV. This allows assigning a VLAN ID for LLDP-MED capable devices, such as VoIP phones. The TLV will only be added to interfaces where LLDP-MED capable devices are discovered. Other TLV values are predefined and cannot be changed:

    Application Type - Voice
    VLAN Type - Tagged
    L2 Priority - 0
    DSCP Priority - 0

When used together with the bridge interface, the (R/M)STP protocol should be enabled with protocol-mode setting. 

Additionally, other neighbor discovery protocols (e.g. CDP) should be excluded using protocol setting to avoid LLDP-MED misconfiguration.
lldp-vlan-info (yes | no; Default: no)	

Whether to send IEEE 802.1 Organizationally Specific TLVs in LLDP related to VLANs.

When this setting is enabled, three TLVs are advertised:

    Port VLAN ID. This applies to the bridge port's pvid property.
    Port And Protocol VLAN ID. This TLV is not used and always indicates "not supported" and "not enabled".
    VLAN Name. This includes up to 10 active VLANs from the "/interface/bridge/vlan" table.

These TLVs are relevant to interfaces that are added to a vlan-filtering bridge, and the setting is available since RouterOS version 7.16.
mode (rx-only | tx-only | tx-and-rx; Default: tx-and-rx)	

Selects the neighbor discovery packet sending and receiving mode. The setting is available since RouterOS version 7.7.
protocol (cdp | lldp | mndp; Default: cdp,lldp,mndp)	List of used discovery protocols.

Since RouterOS v6.44, neighbor discovery is working on individual slave interfaces. Whenever a master interface (e.g. bonding or bridge) is included in the discovery interface list, all its slave interfaces will automatically participate in neighbor discovery. It is possible to allow neighbor discovery only to some slave interfaces. To do that, include the particular slave interface in the list and make sure that the master interface is not included.
/interface bonding
add name=bond1 slaves=ether5,ether6
/interface list
add name=only-ether5
/interface list member
add interface=ether5 list=only-ether5
/ip neighbor discovery-settings
set discover-interface-list=only-ether5

Now the neighbor list shows a master interface and actual slave interface on which a discovery message was received.
[admin@R2] > ip neighbor print
 # INTERFACE ADDRESS                                           MAC-ADDRESS       IDENTITY   VERSION    BOARD         
 0 ether5    192.168.88.1                                      CC:2D:E0:11:22:33 R1         6.45.4 ... CCR1036-8G-2S+
   bond1    
LLDP

Depending on RouterOS configuration, different type-length-value (TLV) can be sent in the LLDP message, this includes:

    Chassis ID (MAC address)
    Port ID (interface name)
    Time To Live
    System Name (system identity)
    System Description (platform - MikroTik, software version - RouterOS version,  hardware name - RouterBoard name)
    Management Address (all IP addresses configured on the port)
    System Capabilities (enabled system capabilities, e.g. bridge or router)
    Port Description (combined interface name like "bridge/ether1" if the sending interface is part of bridge or bond, or interface name same as Port ID)
    IEEE 802.1 Port VLAN ID
    IEEE 802.1 Port And Protocol VLAN ID
    IEEE 802.1 VLAN Name
    IEEE 802.3 MAC/PHY Configuration/Status
    IEEE 802.3 Power Via MDI
    IEEE 802.3 Maximum Frame Size
    LLDP-MED Media Capabilities (list of MED capabilities)
    LLDP-MED Network Policy (assigned VLAN ID for voice traffic)
    LLDP-MED Extended Power via MDI
    Port Extension (Port Extender and Controller Bridge advertisement)
    End of LLDPDU






    Creado por Usuario desconocido (olga), actualizado por última vez por Toms Filatovs el dic 05, 2024 3 min de lectura

Summary
/system note


The system note feature allows you to assign arbitrary text notes or messages that will be displayed on each login right after the banner. For example, you may distribute warnings between system administrators this way, or describe what does that particular router actually do. To configure system note, you may upload a plain text file named sys-note.txt on the router's FTP server, or, additionally, edit the settings in this menu
Properties
note (string; Default: )	Note that will be displayed.
show-at-login (yes | no; Default: yes)	Whether to show system note on each login
show-at-cli-login (yes | no, Default: no)
	Whether to show system note before telnet login prompt.


Example

It is possible to add multi-line notes using an embedded text editor ( /system note edit note), for example, add ASCII art to your home router:


system/note/set note=

                                       .&                                       
                                     @&   @&                                    
                                     @@   @#                                    
                                       @@&                                      
                                ,      @@@      .                               
                                @@@@@@@@@@@@@@@@@                               
                                       @@@                                      
                                       @@@                                      
                                       @@@                                      
                          ,@           @@@           &                          
                         @@@@          @@@          @@@@                        
                          @@           @@@           @(                         
                           &@@         @@@         @@@                          
                             @@@@@     @@@     &@@@&                            
                                &@@@@@@@@@@@@@@@&                               
                                      @@@@@             





    Creado por Usuario desconocido (olga), actualizado por última vez por Jānis Bērziņš el may 08, 2025 6 min de lectura

    RouterOS version 6
        SNTP Client properties:
        Client settings example: 
        NTP Server settings:
    RouterOS version 7
        NTP Client properties:
        NTP Server settings:
    Log messages

RouterOS v6 implements the SNTP protocol defined in RFC4330, manycast mode is not supported. SNTP client is included in the system package. To use an NTP server, ntp package must be installed and enabled.

RouterOS v7 main package includes NTP client and server functionality, which is based on RFC5905.

The client configuration is located in the /system ntp client console path, and the "System > SNTP Client" (RouterOS version 6), "System > NTP Client" (RouterOS version 7) WinBox window. This configuration is shared by the SNTP client implementation in the system package and the NTP client implementation in the ntp package. When ntp package is installed and enabled, the SNTP client is disabled automatically.
RouterOS version 6
SNTP Client properties:
enabled (yes, no default: no)	Enable SNTP client for time synchronization
mode (broadcast, unicast, filed is read-only)	Mode that the SNTP client will operate in. If no NTP servers are configured broadcast mode will be used. If there is a dynamic or static NTP server IP address or FQDN used it will automatically switch to unicast mode.
primary-ntp (IP address default: 0.0.0.0)	

IP address of the NTP server that has to be used for time synchronization. If both values are non-zero, then the SNTP client will alternate between the two server addresses, switching to the other when the request to the current server times out or when the "KoD" packet is received, indicating that the server is not willing to respond to requests from this client.

The following formats are accepted:

- ipv4
- ipv6
secondary-ntp (IP address default: 0.0.0.0)	see primary-ntp
server-dns-names (Comma separated domain name list default: )	To set the NTP server using its domain name. The domain name will be resolved each time an NTP request is sent. Router has to have /ip dns configured.

Status

    active-server (IP address; read-only property) : Currently selected NTP server address. This value is equal to primary-ntp or secondary-ntp.
    poll-interval (Time interval; read-only property) : Current interval between requests sent to the active server. The initial value is 16 seconds, and it is increased by doubling to 15 minutes.

Last received packet information

Values of the following properties are reset when the SNTP client is stopped or restarted, either because of a configuration change, or because of a network error.

    last-update-from (IP address; read-only property) : Source IP address of the last received NTP server packed that was successfully processed.
    last-update-before (Time interval; read-only property) : Time since the last successfully received server message.
    last-adjustment (Time interval; read-only property) : Amount of clock adjustment that was calculated from the last successfully received NTP server message.
    last-bad-packet-from (IP address; read-only property) : Source IP address of last received SNTP packed that was not successfully processed. Reason of the failure and time since this packet was received is available in the next two properties.
    last-bad-packet-before (Time interval; read-only property) : Time since the last receive failure.
    last-bad-packet-reason (Text; read-only property) : Text that describes the reason of the last receive failure. Possible values are:
        bad-packet-length - Packet length is not in the acceptable range.
        server-not-synchronized - Leap Indicator field is set to "alarm condition" value, which means that clock on the server has not been synchronized yet.
        zero-transmit-timestamp - Transmit Timestamp field value is 0.
        bad-mode - Value of the Mode field is neither 'server' nor 'broadcast'.
        kod-ABCD - Received "KoD" (Kiss-o'-Death) response. ABCD is the short "kiss code" text from the Reference Identifier field.
        broadcast - Received broadcast message, but mode=unicast.
        non-broadcast - Received packed was server reply, but mode=broadcast.
        server-ip-mismatch - Received response from address that is not active-server.
        originate-timestamp-mismatch - Originate Timestamp field in the server response message is not the same as the one included in the last request.
        roundtrip-too-long - request/response roundtrip exceeded 1 second.

Client settings example: 

To check the status of the NTP client in CLI, use the "print" command
[admin@ntp-example_v6] > /system ntp client print 
           enabled: no
       primary-ntp: 0.0.0.0
     secondary-ntp: 0.0.0.0
  server-dns-names: 
              mode: unicast

To enable the NTP client and set IP addresses or FQDN of the NTP servers:
[admin@ntp-example_v6] > /system ntp client set enabled=yes
[admin@ntp-example_v6] > /system ntp client print 
             enabled: yes
         primary-ntp: 0.0.0.0
       secondary-ntp: 0.0.0.0
    server-dns-names: 
                mode: unicast
     dynamic-servers: x.x.x.x, x.x.x.x
       poll-interval: 15s
       active-server: x.x.x.x
    last-update-from: x.x.x.x
  last-update-before: 6s570ms
     last-adjustment: -1ms786us
[admin@ntp-example_v6] > /system ntp client set primary-ntp=162.159.200.123
[admin@ntp-example_v6] > /system ntp client print 
           enabled: yes
       primary-ntp: 162.159.200.123
     secondary-ntp: 0.0.0.0
  server-dns-names: 
              mode: unicast
   dynamic-servers: x.x.x.x, x.x.x.x
     poll-interval: 16s
     active-server: x.x.x.x
NTP Server settings:

Server configuration is located in /system ntp server

enabled (yes or no; default value: no)
	Enable  NTP server

broadcast (yes or no; default value: no)
	Enable certain NTP server mode, for this mode to work you have to set up broadcast-addresses field

multicast (yes or no; default value: no)
	Enable certain NTP server mode

manycast (yes or no; default value: no)
	Enable certain NTP server mode

broadcast-addresses (IP address; default value: )
	Set broadcast address to use for NTP server broadcast mode

Example:

Set up an NTP server for the local network that is 192.168.88.0/24
/system ntp server set broadcast=yes broadcast-addresses=192.168.88.255 enabled=yes manycast=no
RouterOS version 7
NTP Client properties:
enabled (yes, no default: no)	Enable NTP client for time synchronization
mode (broadcast, manycast, multicast, unicast)	Mode that the NTP client will operate in

NTP servers
	

The list of NTP servers. It is possible to add static entries.

The following formats are accepted:

- FQDN ("Resolved Address" will appear in the "Servers"- window in an appropriate column if the address is resolved) or IP address can be used. If DHCP-Client property use-peer-ntp=yes - the dynamic entries advertised by DHCP
- ipv4
- ipv4@vrf
- ipv6
- ipv6@vrf
- ipv6-linklocal%interface
vrf (default: main)	Virtual Routing and Forwarding
Servers (Button/Section)	

A detailed table of dynamically and statically added NTP servers (Address, Resolved address, Min Poll, Max Poll, iBurst, Auth. Key)

To set the NTP server using its FQDN. The domain name will be resolved each time an NTP request is sent. Router has to have /ip/dns configured.

Peers
	

Current parameter values
[admin@ntp-example_v7] > /system/ntp/monitor-peers
 type="ucast-client" address=x.x.x.x refid="y.y.y.y" stratum=3 hpoll=10 ppoll=10 root-delay=28.869 ms root-disp=50.994 ms 
   offset=-0.973 ms delay=0.522 ms disp=15.032 ms jitter=0.521 ms 
-- [Q quit|D dump|C-z pause]

Keys
	

NTP symmetric keys, used for authentication between the NTP client and server. Key Identifier (Key ID) - an integer identifying the cryptographic key used to generate the message-authentication code.

Status

    synchronized, stopped, waiting, using-local-clock - Current status of the NTP client
    Frequency drift - The fractional frequency drift per unit time.
    synced-server - The IP address of the NTP Server.
    synced-stratum - The accuracy of each server is defined by a number called the stratum, with the topmost level (primary servers) assigned as one and each level downwards (secondary servers) in the hierarchy assigned as one greater than the preceding level.
    system-offset - This is a signed, fixed-point number indicating the offset of the NTP server's clock relative to the local clock, in seconds.

NTP Server settings:

Server configuration is located in /system ntp server
enabled (yes or no; default value: no)	Enable NTP server

broadcast (yes or no; default value: no)
	Enable certain NTP server mode, for this mode to work you have to set up broadcast-addresses field

multicast (yes or no; default value: no)
	Enable certain NTP server mode

manycast (yes or no; default value: no)
	Enable certain NTP server mode

broadcast-addresses (IP address; default value: )
	Set broadcast address to use for NTP server broadcast mode

vrf (default: main)
	Virtual Routing and Forwarding

use-local-clock (yes or no; default value: no)
	The server will supply its local system time as valid if others are not available.

local-clock-stratum
	Manually set stratum if use-local-clock=yes

auth-key (default value: none)
	NTP symmetric key, used for authentication between the NTP client and server. Key Identifier (Key ID) - an integer identifying the cryptographic key used to generate the message-authentication code.

If you use use-local-clock, then be aware that the router's internal CPU clock is not a reliable time source for precise timing operations, as its frequency may vary due to power management, thermal conditions, and hardware differences, even between identical models. This variation is expected and does not affect normal router performance. For accurate timekeeping, it is recommended to use network-based time synchronisation, such as NTP (Network Time Protocol).
Log messages

SNTP client can produce the following log messages. See the article "log" on how to set up logging and how to inspect logs.

    ntp,debug gradually adjust by OFFS
    ntp,debug instantly adjust by OFFS
    ntp,debug Wait for N seconds before sending the next message
    ntp,debug Wait for N seconds before restarting
    ntp,debug,packet packet receive an error, restarting
    ntp,debug,packet received PKT
    ntp,debug,packet ignoring received PKT
    ntp,debug,packet error sending to IP, restarting
    ntp,debug,packet sending to IP PKT

Explanation of log message fields

    OFFS - difference of two NTP timestamp values, in hexadecimal.
    PKT - dump of NTP packet. If the packet is shorter than the minimum 48 bytes, it is dumped as a hexadecimal string. Otherwise, the packet is dumped as a list of field names and values, one per log line. Names of fields follow RFC4330.
    IP - remote IP address.

NOTE: the above logging rules work only with the built-in SNTP client, the separate NTP package doesn't have any logging facilities.



    Creado por Normunds R., actualizado por última vez por Serhii T. el jun 13, 2025 2 min de lectura

Summary

Partitioning is supported on ARM, ARM64, MIPS, TILE, and PowerPC RouterBOARD devices that use NAND flash.

RouterOS allows repartitioning of NAND flash, enabling:

    Separate RouterOS installations on each partition.

    The ability to specify primary and fallback partitions.

If one partition fails to boot (due to a failed upgrade, configuration issue, or software error), the next partition will automatically boot, providing a fallback. This feature acts as an interactive backup, allowing you to keep a verified, working installation and perform upgrades only on a secondary partition.

Once you've confirmed the new configuration is stable, you can use the "Save Config To" function to copy it to the other partitions.

Repartitioning of the NAND requires the latest bootloader version
Requirements and Limits:

    Starting from RouterOS 7.20beta2, the minimum storage size for repartitioning is 128 MiB.
    Minimum RouterOS partition size during repartitioning: 60 MiB.
    The maximum number of allowed partitions is 8.

For devices where the Partitions menu is supposed to be hidden, but were previously repartitioned:

    It will be possible to repartition into a single partition.

    The Partitions menu will then be hidden after reboot.

Example:

For a device with 128 MiB NAND, that previously had 4*32 MiB partitions, where RouterOS fits within 32 MiB, the behavior after upgrading, starting from RouterOS 7.20beta2, will be as follows:

    It will continue using all 4 partitions with full partitioning options, as before repartitioning.
    In case of repartitioning, the only available options will be 1*128 MiB or 2*64 MiB partitions, and full partitioning features will remain available.

[admin@MikroTik] > /partitions/print
Flags: A - ACTIVE; R - RUNNING
Columns: NAME, FALLBACK-TO, VERSION, SIZE
# NAME FALL VERSION SIZE 
0 AR part0  next         RouterOS v7.18.2 2025-03-11 11:59:04  128MiB

Starting from RouterOS version 7.17, you need to update the device-mode to use the partitions.
Commands
activate (<partition>)	

Assigns another partition as Active. This option is available if the "partitions" setting is enabled in device mode (since RouterOS 7.17).
repartition (integer)	Will reboot the router and reformat the NAND, leaving only active partition.
copy-to (<partition>)	Clone running OS with the config to specified partition. Previously stored data on the partition will be erased.
save-config-to (<partition>)	Clone running-config on a specified partition. Everything else is untouched.
restore-config-from (<partition>)	Copy config from specified partition to running partition
Properties
name (string; Default: )	Name of the partition
fallback-to (etherboot | next | <partition-name>; Default: next)	What to do if an active partition fails to boot:

    etherboot - switch to etherboot
    next' - try next partition
    fallback to the specified partition

Read-only
active (yes | no)	Partition is active
running (yes | no)	Currently running partition
size (integer[MiB])	Partition size
version (string)	Current RouterOS version installed on the partition


