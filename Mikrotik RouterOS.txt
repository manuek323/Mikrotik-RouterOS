

    Creado por Oskars K., actualizado por última vez por GG el mar 06, 2024 1 min de lectura

Summary

The application is available for both Android and iOS operating systems. It is a good way to configure a new device, as it provides a simple and user-friendly setup screen for the most basic settings of your new router. It also features an advanced menu, for the more experienced user.
Downloading app

MikroTik application is available to download on App Store and Google Play, please see our web page Software section for direct download links or scan the QR code.

Use the MikroTik smartphone app to configure your router in the field, or to apply the most basic initial settings for your MikroTik home access point.
Quick start with the application

    Scan QR code and choose your preferred OS;

    Install and connect to your wireless network;

    Open application, by default, the IP address and username will be already entered;

    Click Connect to establish a connection to;

    Choose Quick setup, and the application will guide you through all basic configuration settings in a couple of easy steps.







    Creado por Normunds R., actualizado por última vez por GG el mar 06, 2024 6 min de lectura

        Summary
        Modes
        HomeAP
            Wireless
            Internet
            Local Network
            VPN
            System
        FAQ

Summary

Quickset is a simple configuration wizard page that prepares your router in a few clicks. It is the first screen a user sees, when opening the default IP address 192.168.88.1 in a web browser.

Quickset is available for all devices that have some sort of default configuration from factory. Devices that do not have configuration must be configured by hand. The most popular and recommended mode is the HomeAP (or HomeAP dual, depending on the device). This Quickset mode provides the simplest of terminology and the most common options for the home user.
Modes

Depending on the router model, different Quickset modes might be available from the Quickset dropdown menu:

    CAP: Controlled Access Point, an AP device, that will be managed by a centralized CAPsMAN server. Only use if you have already set up a CAPsMAN server.
    CPE: Client device, which will connect to an Access Point (AP) device. Provides option to scan for AP devices in your area.
    HomeAP: The default Access Point config page for most home users. Provides fewer options and simplified terminology.
    HomeAP dual: Dual band devices (2GHz/5GHz). The default Access Point config page for most home users. Provides fewer options and simplified terminology.
    Home Mesh: Made for making bigger WiFi networks. Enables the CAPsMAN server in the router, and places the local WiFi interfaces under CAPsMAN control. Just boot other MikroTik WiFi APs with the reset button pressed, and they will join this HomeMesh network (see their Quick guide for details)
    PTP Bridge AP: When you need to transparently interconnect two remote locations together in the same network, set one device to this mode, and the other device to the next (PTP Bridge CPE) mode.
    PTP Bridge CPE: When you need to transparently interconnect two remote locations together in the same network, set one device to this mode, and the other device to the previous (PTP Bridge AP) mode.
    WISP AP: Similar to the HomeAP mode, but provides more advanced options and uses industry standard terminology, like SSID and WPA.

HomeAP

This is the mode you should use if you would like to quickly configure a home access point.
Wireless

Set up your wireless network in this section:

    Network Name: How will your smartphone see your network? Set any name you like here. In HomeAP dual, you can set the 2GHz (legacy) and 5GHz (modern) networks to same, or different names (see FAQ). Use any name you like, in any format.
    Frequency: Normally you can leave "Auto", in this way, the router will scan the environment, and select the least occupied frequency channel (it will do this once). Use a custom selection if you need to experiment.
    Band: Normally leave this to defaults (2GHz b/g/n and 5GHz A/N/AC).
    Use Access List (ACL): Enable this if you would like to restrict who can connect to your AP, based on the user's MAC (hardware) address. To use this option, first you need to allow these clients to connect, and then use the below button "Copy to ACL". This will copy the selected client to the access list. After you have built an Access list (ACL), you can enable this option to forbid anyone else to attempt connections to your device. Normally you can leave this alone, as the Wireless password already provides the needed restrictions.
    WiFi Password: The most important option here. Sets a secure password that also encrypts your wireless communications, which will be needed to connect to wireless network.
    WPS accept: Use this button to grant access to a specific device that supports the WPS connection mode. Useful for printers and other peripherals where typing a password is difficult. First start WPS mode in your client device, then once click the WPS button here to allow said device. Button works for a few seconds and operates on a per-client basis.
    Guest network: Useful for house guests who don't need to know your main WiFi password. Set a separate password for them in this option. Important! Guest users will not be able to access other devices in your LAN and other guest devices. This mode enabled Bridge filters to prevent this.
    Wireless clients: This table shows the currently connected client devices (their MAC address, if they are in your Access List, their last used IP address, how long are they connected, their signal level in dBm and in a bar graph).

Internet

    Port: Select which port is connected to the ISP (internet) modem. Usually Eth1.
    Address Acquisition: Select how the ISP is giving you the IP address. Ask your service provider about this and the other options (IP address, Netmask, Gateway).
    MAC address: Normally should not be changed, unless your ISP has locked you to a specific MAC address, and you have changed the router to a new one.
    Firewall router: This enables a secure firewall for your router and your network. Always make sure this box is selected, so that no access is possible to your devices from the internet port.
    MAC server / MAC Winbox: Allows connection with the [Winbox utility https://mt.lv/winbox] from the LAN port side in MAC address mode. Useful for debugging and recovery, when IP mode is not available. Advanced use only.
    Discovery: Allows the device to be identified by model name from other RouterOS devices.

Local Network

    IP address: Mostly can stay at the default 192.168.88.1 unless your router is behind another router. To avoid IP conflict, change to 192.168.89.1 or similar
    Netmask: In most situations can leave 255.255.255.0
    Bridge all LAN ports: Allows your devices to communicate to each other, even if, say, your TV is connected via Ethernet LAN cable, but your PC is connected via WiFi.
    DHCP server: Normally, you would want automatic IP address configuration in your home network, so leave the DHCP settings ON and on their defaults.
    NAT: Turn this off ONLY if your ISP has provided a public IP address for both the router and also the local network. If not, leave NAT on.
    UPnP: This option enables automatic port forwarding ("opening ports to the local network" as some call it) for supported programs and devices, like your NAS disks and peer-to-peer utilities. Use with care, as this option can sometimes expose internal devices to the internet without your knowledge. Enable only if specifically needed.

VPN

If you want to access your local network (and your router) from the internet, use a secure VPN tunnel. This option gives you a domain name where to connect to, and enables PPTP and L2TP/IPsec (the second one is recommended). The username is 'vpn' and you can specify your own password. All you need to do is enable it here, and then provide the address, username and password in your laptop or phone, and when connected to the VPN, you will have a securely encrypted connection to your home network. Also, useful when travelling - you will be able to browse the internet through a secure line, as if connecting from your home. This also helps to avoid geographical restrictions that are set up in some countries.
System

    Check for updates: Always make sure your device is up-to-date with this button. Checks if an updated RouterOS release is available, and installs it.
    Password: Sets the password for the device config page itself. Make sure nobody can access your router config page and change the settings.

FAQ

Q: How is Quickset different from the Webfig tab, where a bunch of new menus appear?

A: QuickSet is for new users who only need their device up and running in no time. It provides the most commonly used options in one place. If you need more options, do not use any Quickset settings at all, click on "Webfig" to open the advanced configuration interface. The full functionality is unlocked.

Q: Can I use Quickset and Webfig together? While settings that are not conflicting can be configured this way, it is not recommended to mix up these menus.

A: If you are going to use Quickset, use only Quickset and vice versa. What is difference between Router and Bridge mode? Bridge mode adds all interfaces to the bridge, allowing to forward Layer2 packets (acts as a hub/switch). In Router mode, packets are forwarded in Layer3 by using IP addresses and IP routes (acts as a router).

Q: In HomeAP mode, should the 2GHz and 5GHz network names be the same, or different?

A: If you prefer that all your client devices, like TV, phones, game consoles, would automatically select the best preferred network, set the names identically. If you would like to force a client device to use the faster 5GHz 802.11ac connection, set the names unique.

Q: Can I create an AP without security settings - no password or connect to such AP while using QuickSet?

A: QuickSet uses WPA2 pre-shared key by default. It means that the minimal password length is 8 symbols and the device can only connect to WPA2 secured AP or serve as AP itself. For configurations with no security settings, you need to configure them manually using WinBox, Webfig, or console.

QuickSet interface:




    Creado por Māris B., actualizado por última vez por Druvis Timma el sept 25, 2024 5 min de lectura

    Overview
    Authentication
        JSON format
    HTTP Methods
        GET
        PATCH
        PUT
        DELETE
        POST
            Proplist
            Query
            Timeout
    Errors

Overview

Watch our video about this feature.

The term "REST API" generally refers to an API accessed via HTTP protocol at a predefined set of resource-oriented URLs.
Starting from RouterOS v7.1beta4, it is implemented as a JSON wrapper interface of the console API. It allows to create, read, update and delete resources and call arbitrary console commands.

To start using REST API, the www-ssl or www (starting with RouterOS v7.9) service must be configured and running. When the www-ssl service (HTTPS access) is enabled, the REST service can be accessed by connecting to https://<routers_IP>/rest. When www service (HTTP access) is enabled the REST service can be accessed by connecting to http://<routers_IP>/rest.

We do not advise enabling HTTP access (www service). The main risk is that authentication credentials can be read with passive eavesdropping. You can use it only when performing tests (not in a production environment) and when you are certain that nobody can listen in (inspect your traffic)!

The easiest way to start is to use cURL, wget, or any other HTTP client even RouterOS fetch tool.
$ curl -k -u admin: https://10.155.101.214/rest/system/resource
[{"architecture-name":"tile","board-name":"CCR1016-12S-1S+",
"build-time":"Dec/04/2020 14:19:51","cpu":"tilegx","cpu-count":"16",
"cpu-frequency":"1200","cpu-load":"1","free-hdd-space":"83439616",
"free-memory":"1503133696","platform":"MikroTik",
"total-hdd-space":"134217728","total-memory":"2046820352",
"uptime":"2d20h12m20s","version":"7.1beta4 (development)"}]

Watch how to set up REST api.
Authentication

Authentication to the REST API is performed via HTTP Basic Auth. Provide your Username and password are the same as for the console user (by default "admin" with no password).

You have to set up certificates to use secure HTTPS, if self-signed certs are used, then CA must be imported to the trusted root. However, for testing purposes, it is possible to connect insecurely (for cUrl use -k flag, for wget use --no-check-certificate).
JSON format

Server broadly follows ECMA-404 standard, with following notes:

    In JSON replies all object values are encoded as strings, even if the underlying data is a number or a boolean.
    The server also accepts numbers in octal format (begins with 0) and hexadecimal format (begins with 0x). If the numbers are sent in a string format, they are assumed to be in decimal format.
    Numbers with exponents are not supported.

HTTP Methods

Below is a table summarising supported HTTP methods
GET	Read	print	To get the records.
PATCH	Update/Modify	set	To update a single record.
PUT	Create	add	To create a new record.
DELETE	Delete	remove	To delete a single record.
POST	
	
	Universal method to get access to all console commands.
GET

This method allows getting the list of all records or a single record from the specified menu encoded in the URL.
For example, get all IP addresses (equivalent to the 'ip/address/print' command from the CLI):
$ curl -k -u admin: https://10.155.101.214/rest/ip/address
[{".id":"*1","actual-interface":"ether2","address":"10.0.0.111/24","disabled":"false",
"dynamic":"false","interface":"ether2","invalid":"false","network":"10.0.0.0"},
{".id":"*2","actual-interface":"ether3","address":"10.0.0.109/24","disabled":"true",
"dynamic":"false","interface":"ether3","invalid":"false","network":"10.0.0.0"}]

To return a single record, append the ID at the end of the URL:
$ curl -k -u admin: https://10.155.101.214/rest/ip/address/*1
{".id":"*1","actual-interface":"ether2","address":"10.0.0.111/24","disabled":"false",
"dynamic":"false","interface":"ether2","invalid":"false","network":"10.0.0.0"}

If table contains named parameters, then name instread of ID can be used, for example, get ether1:
$ curl -k -u admin: https://10.155.101.214/rest/interface/ether1

It is also possible to filter the output, for example, return only valid addresses that belong to the 10.155.101.0 network:
$ curl -k -u admin: "https://10.155.101.214/rest/ip/address?network=10.155.101.0&dynamic=true"
[{".id":"*8","actual-interface":"sfp12","address":"10.155.101.214/24","disabled":"false",
"dynamic":"true","interface":"sfp12","invalid":"false","network":"10.155.101.0"}]

Another example returns only addresses on the "dummy" interface and with the comment "test":
$ curl -k -u admin: 'https://10.155.101.214/rest/ip/address?comment=test&interface=dummy'
[{".id":"*3","actual-interface":"dummy","address":"192.168.99.2/24","comment":"test",
"disabled":"false","dynamic":"false","interface":"dummy","invalid":"false","network":"192.168.99.0"}]

If you want to return only specific properties, you can use the '.proplist', followed by the '=' and a list of comma-separated properties. For example, to show only the address and if it's disabled:
$ curl -k -u admin: https://10.155.101.214/rest/ip/address?.proplist=address,disabled
[{"address":"10.0.0.111/24","disabled":"false"},{"address":"10.0.0.109/24","disabled":"true"}]
PATCH

This method is used to update a single record. Set PATCH call body as a JSON object which contains fields and values of the properties to be updated. For example, add a comment:
$ curl -k -u admin: -X PATCH https://10.155.101.214/rest/ip/address/*3 \
  --data '{"comment": "test"}' -H "content-type: application/json"
{".id":"*3","actual-interface":"dummy","address":"192.168.99.2/24","comment":"test",
"disabled":"false","dynamic":"false","interface":"dummy","invalid":"false","network":"192.168.99.0"}

In case of a successful update, the server returns the updated object with all its parameters.
PUT

A method is used to create new records in the menu encoded in the URL. The body should be set as a JSON object containing parameters applied to the newly created record.

In case of success, the server returns the created object with all its parameters.

Only one resource can be created in a single request.

For example, add an IP address to a dummy interface:
$ curl -k -u admin: -X PUT https://10.155.101.214/rest/ip/address \
  --data '{"address": "192.168.111.111", "interface": "dummy"}' -H "content-type: application/json"
{".id":"*A","actual-interface":"dummy","address":"192.168.111.111/32","disabled":"false",
"dynamic":"false","interface":"dummy","invalid":"false","network":"192.168.111.111"}
DELETE

This method is used to delete the record with a specified ID from the menu encoded in the URL. If the deletion has been succeeded, the server responds with an empty response. For example, call to delete the record twice, on second call router will return 404 error:
$ curl -k -u admin: -X DELETE https://10.155.101.214/rest/ip/address/*9
$ curl -k -u admin: -X DELETE https://10.155.101.214/rest/ip/address/*9
{"error":404,"message":"Not Found"}
POST

All the API features are available through the POST method. The command word is encoded in the header and optional parameters are passed in the JSON object with the corresponding fields and values. For example, to change the password of the active user, send
POST https://router/rest/password
{"old-password":"old","new-password":"N3w", "confirm-new-password":"N3w"}

REST response is structured similar to API response: 

    If the response contains '!re' sentences (records), the JSON reply will contain a list of objects.
    If the '!done' sentence contains data, the JSON reply will contain an object with the data.
    If there are no records or data in the '!done' sentence, the response will hold an empty list.

There are two special keys: .proplist and .query, which are used with the print command word. Read more about APIs responses, prop lists, and queries in the API documentation.
Proplist

The '.proplist' key is used to create .proplist attribute word. The values can be a single string with comma-separated values:
POST https://router/rest/interface/print
{".proplist":"name,type"}

or a list of strings:
POST https://router/rest/interface/print
{".proplist":["name","type"]}

For example, return address and interface properties from the ip/address list:
$ curl -k -u admin: -X POST https://10.155.101.214/rest/ip/address/print\
  --data '{"_proplist": ["address","interface"]}' -H "content-type: application/json"
[{"address":"192.168.99.2/24","interface":"dummy"},
{"address":"172.16.5.1/24","interface":"sfpplus1"},
{"address":"172.16.6.1/24","interface":"sfp2"},
{"address":"172.16.7.1/24","interface":"sfp3"},
{"address":"10.155.101.214/24","interface":"sfp12"},
{"address":"192.168.111.111/32","interface":"dummy"}]
Query

The '.query' key is used to create a query stack. The value is a list of query words. For example this POST request :
POST https://router/rest/interface/print
{".query":["type=ether","type=vlan","#|!"]}

is equivalent to this API sentence
/interface/print
?type=ether
?type=vlan
?#|!

For example, let's combine 'query' and 'proplist', to return '.id', 'address', and 'interface' properties for all dynamic records and records with the network 192.168.111.111
$ curl -k -u admin: -X POST https://10.155.101.214/rest/ip/address/print \
  --data '{".proplist": [".id","address","interface"], ".query": ["network=192.168.111.111","dynamic=true","#|"]}'\
  -H "content-type: application/json"
[{".id":"*8","address":"10.155.101.214/24","interface":"sfp12"},
{".id":"*A","address":"192.168.111.111/32","interface":"dummy"}]
Timeout

If the command runs indefinitely, it will timeout and the connection will be closed with an error. The current timeout interval is 60 seconds. To avoid timeout errors, add a parameter that would sufficiently limit the command execution time.

Timeout is not affected by the parameters passed to the commands. If the command is set to run for an hour, it will terminate early and return an error message.

For example, let's see what we get when the ping command exceeds the timeout and how to prevent this by adding a count parameter:
$ curl -k -u admin: -X POST https://10.155.101.214/rest/ping \
  --data '{"address":"10.155.101.1"}' \
  -H "content-type: application/json"
{"detail":"Session closed","error":400,"message":"Bad Request"}

$ curl -k -u admin: -X POST https://10.155.101.214/rest/ping \
  --data '{"address":"10.155.101.1","count":"4"}' \
  -H "content-type: application/json"
[{"avg-rtt":"453us","host":"10.155.101.1","max-rtt":"453us","min-rtt":"453us","packet-loss":"0","received":"1","sent":"1","seq":"0","size":"56","time":"453us","ttl":"64"},
{"avg-rtt":"417us","host":"10.155.101.1","max-rtt":"453us","min-rtt":"382us","packet-loss":"0","received":"2","sent":"2","seq":"1","size":"56","time":"382us","ttl":"64"},
{"avg-rtt":"495us","host":"10.155.101.1","max-rtt":"650us","min-rtt":"382us","packet-loss":"0","received":"3","sent":"3","seq":"2","size":"56","time":"650us","ttl":"64"},
{"avg-rtt":"461us","host":"10.155.101.1","max-rtt":"650us","min-rtt":"359us","packet-loss":"0","received":"4","sent":"4","seq":"3","size":"56","time":"359us","ttl":"64"}]

Another example is a bandwidth test tool, which can be limited by providing run duration:
$ curl -k -u admin: -X POST 'https://10.155.101.214/rest/tool/bandwidth-test' \
  --data '{"address":"10.155.101.1","duration":"2s"}' \
  -H "content-type: application/json"
[{".section":"0","connection-count":"20","direction":"receive","lost-packets":"0",
"random-data":"false","rx-10-second-average":"0","rx-current":"0","rx-size":"1500",
"rx-total-average":"0",
"status":"connecting"},
{".section":"1","connection-count":"20","direction":"receive","duration":"1s",
"lost-packets":"0","random-data":"false","rx-10-second-average":"0","rx-current":"0",
"rx-size":"1500","rx-total-average":"0",
"status":"running"},
{".section":"2","connection-count":"20","direction":"receive","duration":"2s",
"lost-packets":"581175","random-data":"false","rx-10-second-average":"854372352",
"rx-current":"854372352","rx-size":"1500","rx-total-average":"854372352",
"status":"running"},
{".section":"3","connection-count":"20","direction":"receive","duration":"3s",
"lost-packets":"9014","random-data":"false","rx-10-second-average":"891979008",
"rx-current":"929585664","rx-size":"1500","rx-total-average":"891979008",
"status":"done testing"}]
Errors

The success or failure of the API calls is indicated in the HTTP status code. In case of failure (status code 400 or larger), the body of the response contains a JSON object with the error code, a description of the error, and optional error details. For example, trying to delete an interface will return
{"error":406,"message":"Not Acceptable","detail":"no such command or directory (remove)"}



    Creado por Artūrs C., actualizado por última vez por Edgars P. el jun 03, 2025 5 min de lectura

    Summary
    Configuration
    Secrets
    Peer discovery
    Configuration Examples
        Applications
        Run RoMON in WinBox by using CLI
        Connect to RoMON through WinBox GUI

Summary

RoMON stands for "Router Management Overlay Network". RoMON works by establishing an independent MAC layer peer discovery and data forwarding network. RoMON packets are encapsulated with EtherType 0x88bf and DST-MAC 01:80:c2:00:88:bf and its network operate independently of L2 or L3 forwarding configuration. When RoMON is enabled, any received RoMON packets will not be displayed by sniffer or torch tools.

Each router on the RoMON network is assigned its RoMON ID. RoMON ID can be selected from the port MAC address or specified by the user.

RoMON protocol does not provide encryption services. Encryption is provided at the "application" level, by e.g. using ssh or by using a secure WinBox.

RoMON packets can be forwarded through network switches or bridges, unless there are specific restrictions on multicast traffic. When using a MikroTik bridge with hardware offloading, these packets are treated like regular multicast packets and are flooded across the network.

Since RouterOS v7.17, if the RoMON service is enabled and the switch chip supports ACL rules, dynamic rules are automatically created to redirect these packets to the CPU, where the RoMON service operates. However, if the switch does not support ACL rules and configuration does not align, such as when CPU and RoMON untagged packets are not in the same VLAN, the RoMON service might not function as expected.
Configuration

In order for a device to participate in RoMON network, RoMON feature must be enabled and ports that participate in RoMON network must be specified.

Sub-menu: /tool/romon
enabled (yes | no; Default: no)	Disable or enable RoMON feature.
id (MAC address; Default: 00:00:00:00:00:00)	MAC address to use as ID of this router.
secrets (string; Default: )	List of global secrets used for RoMON message hashing.

When RoMON is enabled without specifying ID, the ID is automatically selected:
[admin@MikroTik] /tool/romon> print 
     enabled: yes              
          id: 00:00:00:00:00:00
     secrets:                  
  current-id: DC:2C:6E:9E:11:27

Ports that participate in RoMON network are configured in /tool/romon/port menu. Port list is a list of entries that match either a specific interface or interface-list. Each entry defines whether the matched interface is allowed or forbidden to participate in the RoMON network. If participation is allowed, the entry also specifies the port's cost.

Sub-menu: /tool/romon/port
comment (string; Default: )	Short description of the entry.
cost (integer: 0..4294967295; Default: 100)	

Changes the port's cost.
disabled (yes | no; Default: no)	Changes whether the entry is disabled.
interface (name; Default: )	Interface name or interface-list used for RoMON.
secrets (string; Default: )	List of individual port secrets used for RoMON message hashing.


A default entry with the interface-list "all" is preconfigured. This means that when the RoMON service is enabled, all interfaces are allowed to participate in the RoMON network by default. This default entry cannot be removed or enabled/disabled, but you can still modify its cost, set it to forbid participation, or configure secrets.
Secrets

RoMON protocol secrets are used for message authentication, integrity check and replay prevention by means of hashing message contents with MD5.

For each interface, if the interface-specific secret list is empty, a global secret list is used. When sending out, messages are hashed with the first secret in list if list is not empty and first is not "empty secret" (empty string = ""), otherwise, messages are sent unhashed. When received, unhashed messages are only accepted if a secret list is empty or contains "empty secret", hashed messages are accepted if they are hashed with any of the secrets in list.

This design allows for the incremental introduction and/or change of secrets in-network without RoMON service interruption and can happen over RoMON itself, e.g.:

     initially, all routers are without secrets;
     configure each router one by one with secrets="","mysecret" - this will make all routers still send unprotected frames, but they all will be ready to accept frames protected with secret "mysecret";
     configure each router one by one with secrets="mysecret","" - this will make all routers use secret "mysecret", but also still accept unprotected frames (from routers that have not yet been changed);
     configure each router with secrets="mysecret" - this will make all routers use secret "mysecret" and also only accept frames protected with "mysecret";

Changing of secret in a network should be performed in a similar fashion where for some time both secrets are in use in network.
Peer discovery

In order to discover all routers on RoMON network RoMON discover command must be used:
[admin@MikroTik] > /tool/romon/discover 
Flags: A - active
Columns: ADDRESS, COST, HOPS, PATH, L2MTU, IDENTITY, VERSION, BOARD
   ADDRESS            COS  H  PATH               L2MT  IDENTITY   VERSION    BOARD              
A  6C:3B:6B:48:0E:8B  200  1  6C:3B:6B:48:0E:8B  1500  hEX        6.47beta7  RB750Gr3           
A  6C:3B:6B:ED:83:69  200  1  6C:3B:6B:ED:83:69  1500  CCR1009    6.47beta7  CCR1009-7G-1C-1S+  
A  B8:69:F4:B3:1B:D2  200  1  B8:69:F4:B3:1B:D2  1500  4K11       6.47beta7  RB4011iGS+5HacQ2HnD
A  CC:2D:E0:26:22:4D  200  1  CC:2D:E0:26:22:4D  1500  CCR1036    6.47beta7  CCR1036-8G-2S+     
A  CC:2D:E0:8D:01:88  200  1  CC:2D:E0:8D:01:88  1500  CRS328     6.47beta7  CRS328-24P-4S+     
A  E4:8D:8C:1C:D3:0E  200  1  E4:8D:8C:1C:D3:0E  1500  MikroTik   6.47beta7  RB2011iLS          
A  E4:8D:8C:49:49:DB  200  1  E4:8D:8C:49:49:DB  1500  hAP        6.47beta7  RB962UiGS-5HacT2HnT

Configuration Examples

In order for a device to participate in the RoMON network, the RoMON feature must be enabled and ports that participate in the RoMON network must be specified.
/tool romon set enabled=yes secrets=testing

Ports that participate in the RoMON network are configured in the RoMON port menu. Port list is a list of entries that match either specific port or all ports and specifies if matching port(s) is forbidden to participate in the RoMON network and in case port is allowed to participate in RoMON network entry also specifies the port cost. Note that all specific port entries have higher priority than the wildcard entry with interface=all.

For example, the following list specifies that all ports participate in RoMON network with cost 100 and ether7 interface with cost 200:
[admin@MikroTik] > /tool/romon/port/print
Flags: * - default
Columns: INTERFACE, FORBID, COST
#     INTERF  FO  COS
0  *  all     no  100
1     ether7  no  200

By default, one wildcard entry with forbid=no and cost=100 is created.
Applications

Multiple applications can be run over the RoMON network.

In order to test the reachability of specific router on RoMON network RoMON ping command can be used:
[admin@MikroTik] > /tool/romon/ping id=6C:3B:6B:48:0E:8B count=5
  SEQ HOST                                    TIME  STATUS                                                    
    0 6C:3B:6B:48:0E:8B                       1ms                                                             
    1 6C:3B:6B:48:0E:8B                       0ms                                                             
    2 6C:3B:6B:48:0E:8B                       1ms                                                             
    3 6C:3B:6B:48:0E:8B                       0ms                                                             
    4 6C:3B:6B:48:0E:8B                       1ms                                                             
    sent=5 received=5 packet-loss=0% min-rtt=0ms avg-rtt=0ms max-rtt=1ms

In order to establish a secure terminal connection to router on RoMON network RoMON SSH command can be used:
[admin@MikroTik] > /tool/romon/ssh 6C:3B:6B:48:0E:8B
Run RoMON in WinBox by using CLI

In order to establish the RoMON session directly by using the command line on a computer, you must specify RoMON agents and desired routers addresses. RoMON agent must be saved on Managed routers list in WinBox in order to make a successful connection: 
winbox.exe --romon 192.168.88.1 6C:3B:6B:48:0E:8B admin ""
Connect to RoMON through WinBox GUI

Watch a video here.



    Creado por Normunds R., actualizado por última vez por GG el mar 06, 2024 8 min de lectura

    Overview
    Serial Console Connections
        Null Modem Without Handshake
        Null Modem With Loopback Handshake
        Null Modem With Partial Handshake
        Null Modem With Full Handshake
        Null Modem Compatibility
        RJ45 Type Serial Port
        RB M33G Additional Serial Header
        CCR Serial Header
    Serial Terminal Usage
    Special Login

Overview

The Serial Console and Serial Terminal are tools, used to communicate with devices and other systems that are interconnected via the serial port. The serial terminal may be used to monitor and configure many devices - including modems, network devices (including MikroTik routers), and any device that can be connected to a serial (asynchronous) port.

The Serial Console feature is for configuring direct-access configuration facilities (monitor/keyboard and serial port) that are mostly used for initial or recovery configuration. A special null-modem cable is needed to connect two hosts (like two PCs, or two routers; not modems). Note that a terminal emulation program (e.g., HyperTerminal on Windows or minicom on Linux) is required to access the serial console from another computer. Default settings of the router's serial port are 115200 bits/s (for x86 default is 9600 bits/s), 8 data bits, 1 stop bit, no parity, hardware (RTS/CTS) flow control. 

Several customers have described situations where the Serial Terminal (managing side) feature would be useful:

    on a mountaintop, where a MikroTik wireless installation sits next to equipment (including switches and Cisco routers) that can not be managed in-band (by telnet through an IP network)
    monitoring weather-reporting equipment through a serial port
    connection to a high-speed microwave modem that needed to be monitored and managed by a serial connection

With the serial-terminal feature of the MikroTik, up to 132 (and, maybe, even more) devices can be monitored and controlled.
Serial Console Connections

Serial communications between devices are done with RS232, it is one of the oldest and most widely spread communication methods in the computer world. It was used for communication with the modems or other peripheral devices DTE/DCE. In the modern world, the main use of serial communication is DTE/DTE communication (Data Terminal Equipment) e.g. using a null-modem cable. There are several types of null modem cables and some of them may not work with RouterBoards at all.
Null Modem Without Handshake

This cable does not utilize handshake pins at all:
2	3	

Rx ← Tx
3	2	Tx → Rx
5	5	GND

It allows data-only traffic on the cross-connected Rx/Tx lines. Hardware flow control is not possible with this type of cable. The only way to perform flow control is with software flow control using the XOFF and XON characters.
Null Modem With Loopback Handshake

The problem with the first cable is when connected to a device on which hardware flow control is enabled software may hang when checking modem signal lines. 

Null modem cable with loop back handshake fixes the problem, its main purpose is to fool well-defined software into thinking there is handshaking available:
2	3	

Rx ← Tx
3	2	Tx → Rx
5	5	

GND
1+4+6	-	DTR → CD + DSR
-	1+4+6	DTR → CD + DSR
7+8	-	RTS → CTS
-	7+8	RTS → CTS

Hardware flow control is not possible with this cable. Also if remote software does not send its own ready signal to DTR output communication will hang.
Null Modem With Partial Handshake

This cable can be used when flow control enabled without being incompatible with the original way flow control was used with DTE/DCE communication.

This type of cable is not recommended for use with RouterOS.
1	7+8	

RTS2 → CTS2 + CD1
2	3	Rx ← Tx
3	2	

Tx → Rx
4	6	DTR → DSR
5	5	GND
6	4	DSR ← DTR
7+8	1	RTS1 → CTS1 + CD2
Null Modem With Full Handshake

Used with special software and should not be used with RouterOS.
2	3	Rx ← Tx
3	2	

Tx → Rx
4	6	DTR → DSR
5	5	GND
6	4	DSR ← DTR
7	8	RTS → CTS
8	7	CTS ← RTS
Null Modem Compatibility

Summary tables below will allow you to choose the proper cable for your application.
RouterBoards
with limited port functionality	Y	Y	N*	N
RouterBoards
with full functionality	Y	Y	Y	N

* - may work only when hardware flow control is disabled
Software flow
control only	Y	Y*	Y**	Y**
Low-speed DTE/DCE compatible
hardware flow control	N	Y	Y*	N
High-speed DTE/DCE compatible
hardware flow control	N	Y	Y**	N
High speed
communication
using special software	N	N	Y*	Y

* - will work as an alternative

** - will work but not recommended
RJ45 Type Serial Port

This type of port is used on RouterBOARD 2011, 3011, 4011, CCR1072, CCR1036 r2, CCR2xxx and CRS series devices, sometimes called "Cisco style" serial port.

RJ45 to DB9 Cable Pinout:



RTS	1	8	8	5	CTS
DTR	2	7	6	6	DSR
TxD	3	6	2	3	RxD
Ground	4	5	5	7	Ground
Ground	5	4	5	7	Ground
RxD	6	3	3	2	TxD
DSR	7	2	4	20	DTR
CTS	8	1	7	4	RTS
RB M33G Additional Serial Header

For RBM33G additional serial header can be attached on GPIO pins U3_RXD, GND, U3_TXD, and 3V3
CCR Serial Header

The Cloud Core Router series devices have a serial header on the PCB board, called J402 or 100

Here is the pin-out of that connector:

Serial Terminal Usage

RouterOS allows to communicate with devices and other systems that are connected to the router via the serial port using a /system serial-terminal  command. All keyboard input will be forwarded to the serial port and all data from the port is output to the connected device.

First, you have to have a free serial port, if the device has only one serial port (like all RouterBoards, WRAP/ALIX boards, etc.) you will have to disable the system console on this serial port to be able to use it as Serial Terminal for connection to other equipment (switches, modems, etc):
/system console disable 0

Be sure to just disable the console rather than removing it, as RouterOS will recreate the console after the next reboot when you really remove it.

Note that there are some caveats you should be aware of! Take your time understanding those limits to avoid strange things to happen when connecting a device to a serial port on a RouterBoard:

    By re-configuring port Serial0 on a RouterBoard as seen above, you will lose your serial console access to RouterOS. This means, that if you cannot access your RouterBoard over the network anymore, you might even have to reset the whole configuration of it to gain access again.

    When rebooting a RouterBoard the boot loader (RouterBOOT) will always use the serial console (Serial0 on RouterBoards) to send out some startup messages and offer access to the RouterBOOT menu.

    Having text coming out of the serial port to the connected device might confuse your attached device. Furthermore, in the standard config, you can enter the RouterBOOT menu by pressing ANY key. So if your serial device sends any character to the serial port of your RouterBoard during boot time, the RouterBoard will enter the RouterBOOT menu and will NOT boot RouterOS unless you manually intervene!

    You can reconfigure RouterBOOT to enter the RouterBOOT menu only when a DEL character is received - use this to reduce the chance to get a router that's stuck when rebooting!

    Or if newer versions are used "Silent boot" feature can be used to suppress any output on the serial interface, including removal of booting sounds.

Next, you will have to configure your serial port according to the serial port settings of the connected device. Using the following command you will set your serial port to 19200 Baud 8N1. What settings you need to use depends on the device you connect:
/port set serial0 baud-rate=19200 data-bits=8 parity=none stop-bits=1

You can also try to let RouterOS guess the needed baud rate by setting
/port set serial0 baud-rate=auto

Now's the time to connect your device if not already done. Usually, you will have to use a null modem cable (the same thing as a cross-over-cable for Ethernet). Now we're ready to go:
/system serial-terminal serial0

This will give you access to the device you connected to port Serial0. Ctrl-A is the prefix key, which means that you will enter a small "menu". If you need to send the Ctrl-A character to a remote device, press Ctrl-A twice.

If you want to exit the connection to the serial device type Ctrl-A, then Q. This will return you to your RouterOS console.

Do not connect to devices at an incorrect speed and avoid dumping binary data.
Special Login

Special login can be used to access another device (like a switch, for example) that is connected through a serial cable by opening a telnet/ssh session that will get you directly on this device (without having to login to RouterOS first). 

For demonstration we will use two RouterBoards and one PC. 

Routers R1 and R2 are connected with serial cable and PC is connected to R1 via ethernet. Lets say we want to access router R2 via serial cable from our PC. To do this you have to set up serial interface proxy on R1. It can be done by feature called special-login.

By default console is bound to serial port. 

First task is to unbind console from serial simply by disabling entry in /system console menu:
[admin@MikroTik] /system console> print
Flags: X - disabled, U - used, F - free
 #   PORT                                                                    TERM
 0 X serial0                                                                 vt102

Next step is to add new user, in this case serial, and bind it to the serial port
[admin@MikroTik] > /user add name=serial group=full
[admin@MikroTik] > /special-login add user=serial port=serial0 disabled=no
[admin@MikroTik] > /special-login print
Flags: X - disabled
 #   USER                                                                    PORT
 0   serial                                                                  serial0

Now we are ready to access R2 from our PC.
maris@bumba:/$ ssh serial@10.1.101.146

[Ctrl-A is the prefix key]
R2 4.0beta4
R2 Login:

[admin@R2] >

To exit special login mode press Ctrl+A and Q
[admin@MikroTik] >
[Q - quit connection]      [B - send break]
[A - send Ctrl-A prefix]   [R - autoconfigure rate]


Connection to 10.1.101.146 closed.


After router reboot and serial cable attached router may stuck at Bootloader main menu

To fix this problem you need to allow access bootloader main menu from <any> key to <delete>:

    enter bootloader menu
    press 'k' for boot key options
    press '2' to change key to <delete>

What do you want to configure?                                                   
d - boot delay                                                                
k - boot key                                                                  
s - serial console                                                            
n - silent boot                                                              
o - boot device                                                               
u - cpu mode                                                                 
f - cpu frequency                                                             
r - reset booter configuration                                                 
e - format nand                                                               
g - upgrade firmware                                                         
i - board info                                                                
p - boot protocol                                                            
b - booter options                                                            
t - call debug code                                                           
l - erase license                                                             
x - exit setup                         
your choice: k - boot key

Select key which will enter setup on boot:
 * 1 - any key
   2 - <Delete> key only

your choice: 2




    Creado por Usuario desconocido (emils), actualizado por última vez por Matīss O. el ene 21, 2025 4 min de lectura

    SSH Server
        Properties
        Enabling PKI authentication
    SSH Client
        Simple log-in to remote host
        Log-in from certain IP address of the router
        Log-in using RSA public/private key
        Executing remote commands
    SSH exec
        Retrieve information

SSH Server

RouterOS has built in SSH (SSH v2) server that is enabled by default and is listening for incoming connections on port TCP/22. It is possible to change the port and disable the server under Services menu.
Properties

Sub-menu: /ip ssh
allow-none-crypto (yes|no; Default: no)	Whether to allow connection if cryptographic algorithms are set to none.
always-allow-password-login (yes | no; Default: no)	Whether to allow password login at the same time when public key authorization is configured for a user.
ciphers (3des-cbc | aes-cbc | aes-ctr | aes-gcm | auto | null; Default: auto)	

Allow to configure SSH ciphers.
forwarding-enabled (both | local | no | remote; Default: no)	Allows to control which SSH forwarding method to allow:

    no - SSH forwarding is disabled;
    local - Allow SSH clients to originate connections from the server(router), this setting controls also dynamic forwarding;
    remote - Allow SSH clients to listen on the server(router) and forward incoming connections;
    both - Allow both local and remote forwarding methods.

host-key-size (1024 | 1536 | 2048 | 4096 | 8192; Default: 2048)	RSA key size when host key is being regenerated.
host-key-type (ed25519 | rsa; Default: rsa)	Select host key type
strong-crypto (yes | no; Default: no)	Use stronger encryption, HMAC algorithms, use bigger DH primes and disallow weaker ones:

    use 256 and 192 bit encryption instead of 128 bits;
    disable null encryption;
    use sha256 for hashing instead of sha1;
    disable md5;
    use 2048bit prime for Diffie-Hellman exchange instead of 1024bit.

Commands
export-host-key (key-file-prefix)	

Export public and private RSA/Ed25519 to files. Command takes two parameters:

    key-file-prefix - used prefix for generated files, for example, prefix 'my' will generate files 'my_rsa', 'my_rsa.pub' etc.
    passphrase - private key passphrase

Host keys are exported in PKCS#8 format.
import-host-key (private-key-file)	
Import and replace private RSA/Ed25519 key from specified file. Command takes two parameters:

    private-key-file - name of the private RSA/Ed25519 key file
    passphrase - private key passphrase

Private key is supported in PEM or PKCS#8 format.
regenerate-host-key ()	Generated new and replace current set of private keys (RSA/Ed25519) on the router. Be aware that previously imported keys might stop working.

Exporting the SSH host key requires "sensitive" user policy.
Enabling PKI authentication

Example of importing public key for user admin

Generate SSH keys on the client device (the device you will connect from). Upload the public SSH key to the router and import it.
/user ssh-keys import public-key-file=id_rsa.pub user=admin
SSH Client

Sub-menu: /system ssh
Simple log-in to remote host

It is able to connect to remote host and initiate ssh session. IP address supports both IPv4 and IPv6.
/system ssh 192.168.88.1
/system ssh 2001:db8:add:1337::beef

In this case user name provided to remote host is one that has logged into the router. If other value is required, then user=<username> has to be used.
/system ssh 192.168.88.1 user=lala
/system ssh 2001:db8:add:1337::beef user=lala
Log-in from certain IP address of the router

For testing or security reasons it may be required to log in to other host using certain source address of the connection. In this case src-address=<ip address> argument has to be used. Note that IP address in this case supports both, IPv4 and IPv6.
/system ssh 192.168.88.1 src-address=192.168.89.2
/system ssh 2001:db8:add:1337::beef src-address=2001:db8:bad:1000::2

in this case, ssh client will try to bind to address specified and then initiate ssh connection to remote host.
Log-in using RSA public/private key

Example of importing private key for user admin

First, export currently generated SSH keys to a file:
/ip ssh export-host-key key-file-prefix=admin

Two files admin_rsa and admin_rsa.pub will be generated. The pub file needs to be trusted on the SSH server side (how to enable SSH PKI on RouterOS) The private key has to be added for the particular user.
/user ssh-keys private import user=admin private-key-file=admin_rsa

Only user with full rights on the router can change 'user' attribute value under /user ssh-keys private

After the public key is installed and trusted on the SSH server, a PKI SSH session can be created.
/system ssh 192.168.1.1

Watch how to:

Log in wih an RSA key.

Log in with ed25519.
Executing remote commands

To execute remote command it has to be supplied at the end of log-in line
/system ssh 192.168.88.1 "/ip address print"
/system ssh 192.168.88.1 command="/ip address print"
/system ssh 2001:db8:add:1337::beef "/ip address print"
/system ssh 2001:db8:add:1337::beef command="/ip address print"

If the server does not support pseudo-tty (ssh -T or ssh host command), like MikroTik ssh server, then it is not possible to send multiline commands via SSH

For example, sending command "/ip address \n add address=1.1.1.1/24" to MikroTik router will fail.

If you wish to execute remote commands via scripts or scheduler, use command ssh-exec.
SSH exec

Sub-menu: /system ssh-exec

Command ssh-exec is a non-interactive ssh command, thus allowing to execute commands remotely on a device via scripts and scheduler.
Retrieve information

The command will return two values:

    exit-code: returns 0 if the command execution succeeded
    output: returns the output of remotely executed command


Example: Code below will retrieve interface status of ether1 from device 10.10.10.1 and output the result to "Log"
:local Status ([/system ssh-exec address=10.10.10.1 user=remote command=":put ([/interface ethernet monitor [find where name=ether1] once as-value]->\"status\")" as-value]->"output")
:log info $Status

For security reasons you should not use plain text password with parameter "password" specified in the command line. To ensure safe execution of the command remotely, it is strongly recommended to use SSH PKI authentication for users on both sides.


The user group and script policy executing the command requires test permission



    Creado por Normunds R., actualizado por última vez por Matīss O. el ago 14, 2024 5 min de lectura

    Configuration Settings
        Writable Settings
        Read-only Settings
        Commands
    CWMP Session
    Parameters and Data Models
    Download RPC
        RouterOS Update (1 Firmware Upgrade Image)
        Configuration Change (3 Vendor Configuration File)
        Alter configuration
        Overwrite all configurations
        RouterOS default configuration change (X MIKROTIK Factory Configuration File)
    FactoryReset RPC
    Upload RPC
        Upload current configuration (1 Vendor Configuration File)
        Upload log file (2 Vendor Log File)
        Upload default configuration (X MIKROTIK Factory Configuration File)
    Security
    Tested ACSs
        Commercial
        Open Source

TR069-client implements CPE WAN Management Protocol (CWMP) for remote device management, which is standardized by the Broadband Forum (BBF). CWMP works over IP network using HTTP(S) to communicate with an Auto Configuration Server (ACS), which can monitor, configure attributes and update the firmware of a remote device. Typically used by ISPs to manage CPEs, but also can be used for Network Infrastructure Device management.

Requires tr069-client package.
Configuration Settings

Sub-menu: /tr069-client

TR069-client menu parameters:
Writable Settings

Client configuration settings.
enabled	enable/disable CWMP protocol
acs-url	

URL of ACS. Examples: "https://example.com:8080/path/", "https://192.168.1.100/"

If ACS is accessed using HTTPS, in a client must be imported Root CA to verify ACS server certificate.
username	HTTP authentication username (used by CPE to "login" into ACS)
password	HTTP authentication password (used by CPE to "login" into ACS)
periodic-inform-enabled	enable/disable CPE periodical session initiation. Timer is started after every successful session. When session is started by periodic interval then Inform RPC contains "2 PERIODIC" event. Maps to "Device.ManagementServer.PeriodicInformEnable" Parameter
periodic-inform-interval	timer interval of periodic inform. Maps to "Device.ManagementServer.PeriodicInformInterval"
client-certificate	certificate of client/CPE, which can be used by ACS for extra authentication
Read-only Settings

Read only parameters to monitor state of the client.
status	informative status of CWMP.

    disabled - protocol disabled,
    waiting-URL - protocol enabled, but ACS URL not configured,
    running - CWMP is configured correctly and will communicate with ACS on events

last-session-error	user-friendly error description indicating why the previous session didn't finish successfully
retry-count	consecutive unsuccessful session count. If > 0, then last-session-error should indicate error. Resets to 0 on a successful session, disabled protocol or reboot
Commands
reset-tr069-config	completely resets and forgets tr069-client configuration and state (without affecting other ROS configurations). Use when CWMP goes into unresponsive/hanged state and should be restored without re-installation of the RouterOS.
CWMP Session

CWMP client usually starts communication(Session) with ACS on different events - first boot, reboot, periodic interval, remote request, value change etc. In each session, CPE and ACS can call RPCs to be "executed" on the other side. CPE always starts with Inform RPC, which contains connection reason, device info and some Parameter values depending on configuration. When CPE has nothing more to say, then ACS executes its RPCs (which most of the time are Parameter management RPCs).
Parameters and Data Models

Parameters are simple name+value pairs and each vendor can decide which Parameters to support in its devices. A combination of all supported Parameters is called Data Model (DM). BBF defines three root Data Models(TR-098, TR-181:1, TR-181:2) on which vendors should base their supported Parameters. RouterOS Data Model is based on "TR-181 Issue 2 Amendment 11", which is the newest DM and recommended by BBF.

RouterOS TR069 client supported parameter reference document:

  	Fichero 	Modificado
	Archivo HTML current.html v7.13 - RouterOS TR069 client supported parameter reference document 	feb 28, 2024 by Confluence Helper

Download RPC
RouterOS Update (1 Firmware Upgrade Image)

CWMP standard defines that CPE's firmware can be updated using Download RPC with FileType="1 Firmware Upgrade Image" and single URL of a downloadable file (HTTP and HTTPS are supported). Standard also states that downloaded file can be any type and vendor specific process can be applied to finish firmware update. Because MikroTik's update is package based (and also for extra flexibility), an XML file is used to describe firmware upgrade/downgrade. For now, XML configuration supports providing multiple URLs of files, which will be downloaded and applied similarly as regular RouterOS update through firmware/package file upload.

An example of RouterOS bundle package and tr069-client package update (don't forget to also update tr069-client package). An XML file should be put on some HTTP server, which is accessible from CPE for download. Also, downloadable RouterOS package files should be accessible the same way (can be on any HTTP server). Using ACS execute Download RPC with URL pointing to XML file (e.g. "https://example.com/path/upgrade.xml") with contents:

<upgrade version="1" type="links">
   <config/>
   <links>
       <link>
          <url>https://example.com/routeros-mipsbe-X.Y.Z.npk</url>
       </link>
       <link>
          <url>https://example.com/tr069-client-X.Y.Z-mipsbe.npk</url>
       </link>
   </links>
</upgrade>

CPE will download XML, parse/validate its contents, download files from provided URLs and try to upgrade. The result will be reported with TransferComplete RPC.

Note

Always make firmware updates incremental - first, update locally tested device and make sure that CWMP communication is resumed with a new version and required ROS functionality works. Secondly, repeat steps by updating groups of CPEs incrementally. We do not recommend updating all remote devices at once.

Warning: Use HTTPS in production for firmware management
Configuration Change (3 Vendor Configuration File)

The same Download RPC can be used to perform complete configuration overwrite (as intended by standard) OR configuration alteration (when URL's filename extension is ".alter").
Alter configuration

RouterOS has a lot of configuration attributes and not everything can be ported to CWMP Parameters, that's why RouterOS provides a possibility to execute its powerful scripting language to configure any attribute. A configuration alteration (which is really a regular script execution) can be performed using Download RPC FileType="3 Vendor Configuration File" with downloadable file extension ".alter". This powerful feature can be used to configure any ROS attributes which are not available through CWMP Parameters.
Overwrite all configurations

Full ROS configuration overwrite can be performed using Download RPC FileType="3 Vendor Configuration File" with any URL file name (except with ".alter" extension).

Warning: Provided configuration file(script) must be "smart" enough to apply configuration correctly right after reboot. This is especially important when using uploaded configuration file with Upload RPC, because it only contains values export. Some things that should be added manually:

    delay at beginning, for interfaces to show up;
    hidden passwords for users;
    certificates.

RouterOS default configuration change (X MIKROTIK Factory Configuration File)

This vendor specific FileType allows the change of the RouterOS default configuration script that is executed when /system reset-configuration command is executed (or the other means when router configuration is being reset).

Note

If the default configuration script is changed it will not be displayed by /system default-configuration print as it is the case if that script is altered via Netinstall tool. That command will always show the default script set up by MikroTik

Warning: Use this with caution as the failure of uploaded script may render device inoperable and/or inaccessible by the ACS
FactoryReset RPC

This is CWMP standard RPC, which performs RouterOS configuration factory-reset. The reset process is performed in the same way as executing the command:

/system reset-configuration skip-backup=yes

Note that the default factory configuration can be different for each device (see [1]) and execution of this command removes all configurations and executes internally stored default-configuration script.

Best Practices Guide for preparing CPE with custom factory settings for TR069 https://wiki.mikrotik.com/wiki/Tr069-best-practices
Upload RPC
Upload current configuration (1 Vendor Configuration File)

The result of this is file uploaded to the ACS same as the output of /export command in the RouterOS
Upload log file (2 Vendor Log File)

The result of this is file uploaded to the ACS is similar to the output of /log print command in the RouterOS
Upload default configuration (X MIKROTIK Factory Configuration File)

The result of this is file uploaded to the ACS that has contents of the current set default configuration script that will be executed if /system reset-configuration command is executed. It may differ from one returned using /system default-configuration print.
Security

    HTTP should only be used when testing initial setup in the secured/private network because Man-in-the-middle attacker could read/change configuration parameters. In the production environment, HTTPS is a MUST.
    CWMP's incoming connection validation by design is safe because CPE will not communicate with any other device except previously configured ACS. Connection Request only signals CPE to start a new connection + new session with previously configured ACS.

Tested ACSs

Ordering is alphabetical. MikroTik does not imply any one vendor superiority of another. 
Commercial

We have tested and verified to be working the following commercial ACS solutions:

    AVSystem
    Axiros
    Friendly Tech

Open Source

    GenieACS

Note: these ACS systems below seem to be not maintained and thus is not suggested as useful options

    FreeACS
    LibreACS






    Creado por Normunds R., actualizado por última vez por Serhii T. el feb 07, 2025 6 min de lectura

    Introduction
    Connecting to a Router
    Enable HTTPS
    The "Terminal"
    Skins
        Designing skins
        Skin design examples
        Customizing skins
        Using skins

Introduction

WebFig is a web-based RouterOS utility that allows you to monitor, configure and troubleshoot the router. It is designed as an alternative of WinBox, both have similar layouts and both have access to almost any feature of RouterOS.

As Webfig is platform-independent, it can be used to configure a router directly from various devices without the need for software developed for specific platforms. In other words, there is no need to install additional software.

WebFig allows performing three basic actions:

    Configuration - view and edit current configuration;
    Monitoring - display the current status of the router, routing information, interface stats, logs, etc.;
    Troubleshooting - RouterOS has built-in many troubleshooting tools (like ping, traceroute, packet sniffers, traffic generators, etc.) and all of them can be used with WebFig

Connecting to a Router

As we already know from the First Time Configuration section, the device by default has username admin and no password configured. Simply open a Web browser and in the search bar type device IP address which by default is 192.168.88.1. Be sure your device has IP address from the same network, for example, 192.168.88.2 otherwise Layer3 communication will not work.


Enable HTTPS

For HTTPS to work properly, you need to specify a valid certificate that WebFig can use. You can use a certificate that is issued by a trusted Certificate Authority (CA) or you can create your own root CA and generate self-signed certificates. 

WebFig supports wildcard certificates. You can generate such a certificate by specifying a wildcard in the common-name property, for example, common-name=*.mikrotik.com.

To generate your own certificates and enable HTTPS access, you must configure the following:

Create your own root CA on your router and sign it
[admin@MikroTik] > certificate add name=local-cert common-name=local-cert key-usage=key-cert-sign,crl-sign 
[admin@MikroTik] > certificate sign local-cert 
  progress: done

In case you already have set up your own CA or you are using a service that signs certificates for you, then you need to create and sign the certificate remotely and import the certificate on the router later. In case you are importing a certificate, then make sure you mark the certificate as trusted.

Create a new certificate for WebFig (non-root certificate)
[admin@MikroTik] > certificate add name=webfig common-name=192.168.88.1
[admin@MikroTik] > certificate sign webfig 
  progress: done
[admin@MikroTik] > certificate print
Flags: K - private-key; A - authority; T - trusted
Columns:NAME        COMMON-NAME     FINGERPRINT                                                     
0  KAT  local-cert  local-cert      9b6363d033c4b2e6893c340675cfb8d1e330977526dba347a440fabffd983c5d
1  KAT  webfig      192.168.88.1    9f84ac2979bea65dccd02652056e5559bcdf866f8da5f924139d99453402bd02

Enable www-ssl and specify to use the newly created certificate for WebFig
[admin@MikroTik] > ip service
set www-ssl certificate=webfig disabled=no

You can now visit https://192.168.88.1 and securely configure your router.

By default, browsers will not trust self-signed certificates, you will need to add the certificate as trusted on the first time you visit the page in your browser. Another approach is to export the root CA certificate and import it as a trusted root certificate on your computer, this way all certificates signed by this router will be considered as valid and will make it easier to manage certificates in your network.

Most Internet browsers have their own certificate trust chain and work independently of the operating system's certificate trust chain, this means that you may have to add your own root CA's certificate as a trusted certificate in your browser settings since trusting the certificate in your operating system's settings might not have any effect when using your Internet browser.
The "Terminal"

The "Terminal" or Command Line Interface (CLI) in WebFig is located in the top right corner. It offers the same functionality as the "New Terminal" in the WinBox GUI.

Skins

WebFig Design Skin is a handy tool to make the interface more user-friendly. It is not a security tool. If the user has sufficient rights it is possible to access hidden features by other means.
Designing skins

If the user has sufficient permissions (the group has the policy "policy" and "sensitive" to edit permissions) Design Skin button becomes available. Pressing that toggle button will open interface editing options. 

To prevent the user from accessing the Design Skin menu, disable policy "policy" and "sensitive" under the user group configuration.

Possible operations are:

    Hide menu - this will hide all items from the menu and its submenus;
    Hide submenu - only certain submenu will be hidden;
    Hide tabs - if submenu details have several tabs, it is possible to hide them this way;
    Rename menus and items - make certain features more obvious or translate them into your language;
    Add a note to the item (in detail view) - to add comments on the field;
    Make item read-only (in detail view) - for user safety very sensitive fields can be made read only;
    Hide flags (in detail view) - while it is only possible to hide a flag in detail view, this flag will not be visible in list view and in detailed view;
    Add limits for the field - (in detail view) where it is the list of times that are comma or newline separated list of allowed values:
        number interval '..' example: 1..10 will allow values from 1 to 10 for fields with numbers, for example, MTU size.
        field prefix (Text fields, MAC address, set fields, combo-boxes). If it is required to limit prefix length $ should be added to the end. For example, limiting the wireless interface to "station" only, "Add limit" will contain "station$"

    Add Tab - will add a gray ribbon with an editable label that will separate the fields. Ribbon will be added before the field it is added to;
    Add Separator - will add a low height horizontal separator before the field it is added to.

Note: Number interval cannot be set to extend limitations set by RouterOS for that field

Note: Set fields are arguments that consist of a set of check-boxes, for example, setting up policies for user groups, RADIUS "Service"

Note: Limitations set for combo-boxes will also limit the values selectable from the dropdown
Skin design examples

If you need to limit the user for some services 

Add a limit to the RADIUS Service.

The result will be only those services, that are pointed in the "Limit" field.

Customizing skins

Here is an example of the "Status" page that can be used within the skin *.json file: status.json

The status content is structured as follows:
{"Status": {"Status": {}}}

Status records are displayed in numbered order, example:
"7": {
  "alias": (path to the record),
  "note": (optional; free form text that appears under the record),
  "name": (optional; alternative name for the record),
  "tab": (optional; name of the tab that this and following records belong to),
  "separator": 1 (optional; should a separating line be placed above his record)
},

Path (alias) Structure:

The path (e.g. alias: "IP:Firewall:Filter Rules:*17:Statistics:Packet Rate Graph" and corresponding URL: "router_IP/webfig/#IP:Firewall.Filter_Rules.17") consists of the following colon separated sections:

    Group (if any) → IP:
    Service or Name → Firewall:
    Container or Tab Name → Filter Rules:
    Asterisk (*) and Object ID → Found in the URL of the opened object (17)
    Tab Name in the form (if any) → Statistics
    Input Field Name → Packet Rate Graph

Using skins

To use skins you have to assign the skin to the group. When that is done, users of that group will automatically use the selected skin as their default when logging into WebFig or WinBox.
/user/group/set your_group_name skin=your_skin

If it is required to use created skin on another router you can copy files to the skins folder on the other router. On the new router, it is required to add copied skin to the user group to use it.





    Creado por Normunds R., actualizado por última vez por Mārtiņš S. el jun 17, 2025 12 min de lectura

    1Summary
    2Starting WinBox
        2.1Simple mode
            2.1.1Buttons/check-boxes and Other Fields
            2.1.2Menu Items
        2.2Advanced mode
            2.2.1Buttons/check-boxes and Other Fields
        2.3Command Line
        2.4IPv6 connectivity
        2.5Run WinBox on macOS
        2.6Run WinBox on Linux
    3Interface Overview
    4Work Area and Child Windows
        4.1Child window menu bar
        4.2Sorting out displayed items
        4.3Customizing list of displayed columns
            4.3.1Detail mode
            4.3.2Category view
        4.4Drag & Drop
        4.5Traffic monitoring
        4.6Item copy
    5Transferring Settings
    6WinBox Keyboard Shortcuts
    7Troubleshooting
        7.1WinBox cannot connect to the router's IP address, devices do not show up in the Neighbors list
        7.2I get an error '(port 20561) timed out' when connecting to routers mac address
        7.3I can't find my device in WinBox IPv4 Neighbors list or MAC connection fails with "ERROR could not connect to XX-XX-XX-XX-XX-XX"

Summary

A native WinBox beta version for Linux and macOS is now available on the MikroTik downloads page!


WinBox is a small utility that allows the administration of MikroTik RouterOS using a fast and simple GUI. It is a native Win32/Win64 binary but can be run on Linux and macOS (OSX) using Wine. All WinBox interface functions are as close as possible mirroring the console functions, that is why there are no WinBox sections in the manual. Some advanced and system critical configurations are not possible from the WinBox, like MAC address change on an interface.

From WinBox v3.14, the following security features are used:

    WinBox.exe is signed with an Extended Validation certificate, issued by SIA Mikrotīkls (MikroTik).
    WinBox uses ECSRP for key exchange and authentication (requires a new WinBox version).
    Both sides verify that the other side knows the password (no man in the middle attack is possible).
    WinBox in RoMON mode requires that the agent is the latest version to be able to connect to the latest version routers.
    WinBox uses AES128-CBC-SHA as an encryption algorithm (requires WinBox version 3.14 or above).

Starting WinBox

WinBox loader can be downloaded from the MikroTik download page. When WinBox.exe is downloaded, double click on it, and the WinBox loader window will pop up. There are two WinBox loader modes: simple which is enabled by default and advanced.
Simple mode

When you open WinBox loader for the first time simple mode layout will be used:

To connect to the router enter the IP or MAC address of the router, specify username and password (if any) and click on the Connect button. You can also enter the port number after the IP address, separating them with a colon, like this 192.168.88.1:9999. The port can be changed in the RouterOS services menu.

 It is recommended to use an IP address whenever possible. MAC session uses network broadcasts and is not 100% reliable.

You can also use neighbor discovery, to list available routers use the Neighbors tab:

From the list of discovered routers, you can click on the IP or MAC address column to connect to that router. If you click on IP address then IP will be used to connect, but if you click on MAC Address then the MAC address will be used to connect to the router.
Neighbor discovery will show also devices that are not compatible with WinBox, like Cisco routers or any other device that uses CDP (Cisco Discovery Protocol). If you will try to connect to a SwOS device, then the connection will be established through a web browser
Buttons/check-boxes and Other Fields

    Connect - Connect to the router
    Connect To RoMON - Connect to RoMON Agent
    Add/set - Save/Edit any of the saved router entries in the Managed tab.
    Open In New Window - Leaves loader open in the background and opens new windows for each device to which connection is made.
    Connect To: - destination IP or MAC address of the router
    Login - username used for authentication
    Password - password used for authentication
    Keep Password - if unchecked, the password is not saved to the list

Menu Items

    File
        New - Create a new managed router list in a specified location
        Open - Open managed router list file
        Save As - Save current managed router list to file
        Exit - Exit WinBox loader

    Tools
        Advanced Mode - Enables/Disables advanced mode view
        Import - Imports saved session file
        Export - Exports saved session file
        Move Session Folder - Change path where session files are stored
        Clear cache - Clear WinBox cache
        Check For Updates - Check for updates for WinBox loader

Advanced mode

Additional WinBox loader parameters are revealed when an advanced mode is enabled with Tools → Advanced Mode:

Buttons/check-boxes and Other Fields

Buttons/check-boxes

    Browse - Browse file directory for some specific session
    Keep Password - if unchecked, the password is not saved to the list
    Secure mode - if checked, WinBox will use DH-1984 for key exchange and modified and hardened RC4-drop3072 encryption to secure the session.
    Autosave session - Saves sessions automatically for devices to which connections are made.

Fields:

    Session - Saved router session.
    Note - Note that is assigned to save router entry.
    Group - Group to which saved router entry is assigned.
    RoMON Agent - Select RoMON Agent from the available device list


Managed routers list is encrypted, but it can still be loaded with another WinBox, IF the master password is not set for it!
Command Line

It is possible to use the command line to pass connect to, user, password and session ("workspace" for WInBox 4) parameters automatically:

winbox.exe [<connect-to> [<login> [<password>]] <session|workspace>]

For example (with no password):

winbox.exe 10.5.101.1 admin "" "<own>"

Will connect to router 10.5.101.1 with user "admin" without a password and use session|workspace "<own>".

It is possible to use the command line to pass connect to, user, and password parameters automatically to connect to the router through RoMON. In this case, RoMON Agent must be saved on the Managed routers list so WinBox would know the user and password for this device:

winbox.exe --romon [<romon-agent> [<connect-to> [<login> [<password>]]] <session|workspace>]

For example (with no password):

winbox.exe --romon 10.5.101.1 D4:CA:6D:E1:B5:7D admin "" "<own>"

Will connect to router D4:CA:6D:E1:B5:7D, through 10.5.101.1 via RoMON Agent with user "admin" without a password and apply session|workspace called "<own>".
IPv6 connectivity

WinBox supports IPv6 connectivity. To connect to the router's IPv6 address, it must be placed in square braces the same as in web browsers when connecting to the IPv6 server. Example: 

[db8::1]

when connecting to the link-local address interface index must be entered after the %:

[0:a00:27ff:fe70::e88c%2]

Port number is set after the square brace when it is necessary to connect WinBox to other port than the default:

[0:a00:27ff:fe70::e88c]:8299

WinBox neighbor discovery is capable of discovering IPv6 enabled routers. There are two entries for each IPv6 enabled router, one entry is with IPv4 address and another one with IPv6 link-local address. You can easily choose which one you want to connect to.
Run WinBox on macOS

Starting with macOS 10.15 Catalina, Apple has removed support for 32bit applications, meaning it is no longer possible to use regular Wine and regular WinBox in this OS. Wine has made available a 64bit version for macOS, and MikroTik has released a special WinBox64.exe version as well.

To run WinBox64 the following steps are required.

    Install latest Wine from the Wine macOS builds page ( wine-devel-7.X-osx64.tar.xz) and make sure you have downloaded the WinBox64.exe executable from the MikroTik download page.
    Launch WinBox64.exe with "open file with" > Wine64.app

Run WinBox on Linux

It is possible to run WinBox on Linux by using Wine emulation software. Make sure that the Microsoft font pack is installed, otherwise, you may see distortions.
Interface Overview

WinBox interface has been designed to be intuitive for most of the users. The interface consists of:

    The main toolbar at the top where users can add various info fields, like CPU and memory usage.
    The menu bar on the left - list of all available menus and sub-menus. This list changes depending on what packages are installed. For example, if the IPv6 package is disabled, then the IPv6 menu and all its sub-menus will not be displayed.
    Work area - an area where all menu windows are opened.

The title bar shows information to identify with which router WinBox session is opened. Information is displayed in the following format:

[username]@[Router's IP or MAC] ( [RouterID] ) - WinBox [ROS version] on [RB model] ([platform])

From screenshot above we can see that user krisjanis is logged into router with IPv4/IPv6 address [fe80::4e5e:cff:fef6:c0ab%3]. Router's ID is 3C18-Krisjanis_GW, currently installed RouterOS version is v6.36rc6, RouterBoard is CCR1036-12G-4S and platform is tile.

On the Main toolbar's left side is located:

    undo
    redo
    Safe Mode 
     Currently loaded session

More about Safe mode and undoing performed actions read in this article.

On the right side is located:

    an indicator that shows whether the WinBox session uses encryption
    WinBox traffic indicator displayed as a green bar,
    Custom info fields that can be added by the user by right-clicking on the toolbar and picking available info fields from the list


Work Area and Child Windows

WinBox has an MDI interface meaning that all menu configuration (child) widows are attached to the main (parent) WinBox window and is showed in the work area.

Child windows can not be dragged out of the working area. Notice in the screenshot above that the Interface window is dragged out of the visible working area and a horizontal scroll bar appeared at the bottom. If any window is outside visible work area boundaries the vertical or/and horizontal scrollbars will appear.
Child window menu bar

Each child window has its own toolbar. Most of the windows have the same set of toolbar buttons:

     Add - add a new item to the list
     Remove - remove the selected item from the list
     Enable - enable selected item (the same as enable command from console)
     Disable - disable selected item (the same as disable command from console)
     Comment - add or edit a comment
     Sort - allows to sort out items depending on various parameters. Read more >> 

Almost all windows have a quick search input field on the right side of the toolbar. Any text entered in this field is searched through all the items and highlighted as illustrated in the screenshot below

Notice that on the right side next to the quick find input filed there is a drop-down box. For the currently opened (IP Route) window, this drop-down box allows to quickly sort out items by routing tables. For example, if the main is selected, then only routes from the main routing table will be listed.
A similar drop-down box is also in all firewall windows to quickly sort out rules by chains.
Sorting out displayed items

Almost every window has a Sort button. When clicking on this button several options appear as illustrated in the screenshot below

The example shows how to quickly filter out routes that are in the 10.0.0.0/8 range

    Press Sort button
    Choose Dst.Address from the first drop-down box.
    Choose in form the second drop-down box. "in" means that filter will check if DST address value is in range of the specified network.
    Enter the network against which values will be compared (in our example enter "10.0.0.0/8")
    These buttons are to add or remove another filter to the stack.
    Press the Filter button to apply our filter.

As you can see from the screenshot WinBox sorted out only routes that are within the 10.0.0.0/8 range.

Comparison operators (Number 3 in the screenshot) may be different for each window. For example "IP Route" window has only two is and in. Other windows may have operators such as "is not", "contains", "contains not".

WinBox allows building a stack of filters. For example, if there is a need to filter by destination address and gateway, then

    set the first filter as described in the example above,
    press [+] button to add another filter bar in the stack.
    set up a second filter to filter by the gateway
    press the Filter button to apply filters.

You can also remove unnecessary filters from the stack by pressing the [-] button.
Customizing list of displayed columns

By default, WinBox shows the most commonly used parameters. However sometimes it is needed to see other parameters, for example, "BGP AS Path" or other BGP attributes to monitor if routes are selected properly.

WinBox allows to customize displayed columns for each individual window. For example to add BGP AS path column:

    Click on the little arrow button (1) on the right side of the column titles or right mouse click on the route list.
    From popped up menu move to Show Columns (2) and from the sub-menu pick the desired column, in our case click on BGP AS Path (3)

Changes made to window layout are saved and next time when WinBox is opened the same column order and size are applied.
Detail mode

It is also possible to enable Detail mode. In this mode all parameters are displayed in columns, the first column is the parameter name, the second column is the parameter's value.

To enable detail mode right mouse click on the item list and from the popup menu pick Detail mode

Category view

It is possible to list items by categories. In this mode, all items will be grouped alphabetically or by another category. For example, items may be categorized alphabetically if sorted by name, items can also be categorized by type like in the screenshot below.

To enable Category view, right mouse click on the item list and from the popup menu pick Show Categories

Drag & Drop

It is possible to upload and download files to/from the router using WinBox drag & drop functionality. You can also download the file by pressing the right mouse button on it and selecting "Download".


Drag & Drop works if WinBox is running on Linux using wine4. Drag and drop between two WinBox windows may fail.
Traffic monitoring

WinBox can be used as a tool to monitor the traffic of every interface, queue, or firewall rule in real-time. The screenshot below shows Ethernet traffic monitoring graphs.

Item copy

This shows how easy it is to copy an item in WinBox. In this example, we will use the COPY button to make a Dynamic PPPoE server interface into a Static interface.

This image shows us the initial state, as you see DR indicates "D" which means Dynamic:

Double-Click on the interface and click on COPY:

A new interface window will appear, a new name will be created automatically (in this case pppoe-in1)

After this Down/Up event this interface will be Static:

Transferring Settings

    Managed router transfer - In the File menu, use Save As and Open functions to save the managed router list to file and open it up again on a new workstation.

    Router sessions transfer - In the Tools menu, use Export and Import functions to save existing sessions to file and import them again on a new workstation.

WinBox Keyboard Shortcuts
Ctrl + F	Find
Ctrl + G	Find Next
F3
	Find / Find next
Ctrl + M	Add or edit a comment
Ctrl + E  or Num+	Enables a selected setting
Ctrl + D or Num-	Disables a selected setting
Ctrl + +	Zoom in WinBox
Ctrl + -	Zoom out WinBox 
Tab	Choose next control
Tab + Shift	Choose previous control
Space	Select focused control
F4 or Esc	Close window
F6
	Focus previous window
F6 + Shift	Focus next window
Insert
	Add new entry into list
Delete
	Delete entry from list
Troubleshooting
WinBox cannot connect to the router's IP address, devices do not show up in the Neighbors list

Make sure that the Windows firewall is set to allow WinBox connections through Private and/or Public network interfaces in the Windows firewall, it can be changed in Control Panel\System and Security\Windows Defender Firewall\Allowed applications or disable the Windows firewall.
I get an error '(port 20561) timed out' when connecting to routers mac address

Windows (7/8) does not allow mac connection if file and print sharing is disabled.
I can't find my device in WinBox IPv4 Neighbors list or MAC connection fails with "ERROR could not connect to XX-XX-XX-XX-XX-XX"

Most of the network drivers will not enable IP stack unless your host device has an IP configuration. Set IPv4 configuration on your host device.

Sometimes the device will be discovered due to caching, but MAC connection will still fail with "ERROR: could not connect to XX:XX:XX:XX:XX:XX

WinBox MAC-ADDRESS connection requires MTU value set to 1500, unfragmented. Other values can perform poorly - loss of connectivity can occur.






    Creado por Oskars K., actualizado por última vez por Mārtiņš S. el may 08, 2024 5 min de lectura

    Description
    FlashFig Example
        Requirements
        Pre-Configuration
            Windows Computer
            RouterBOARD
        Connect
        Run FlashFig
    Troubleshoot
        FlashFig can not find a router
        FlashFig finds a router, flashing is not done (no TFTP request)
        FlashFig is done, but a configuration is not applied
        Not enough flash space, ignoring

Description

FlashFig is an application for mass router configuration. It can be used by MikroTik distributors, ISPs, or any other companies who need to apply RouterOS configuration to many routers in the shortest possible time.

FlashFig applies MikroTik RouterOS configuration to any RouterBOARD within 3 seconds. You can perform FlashFig on a batch of routers, the only thing you need is to connect RouterBOARD to a Layer 2 network running FlashFig and to power a FlashFig-enabled RouterBOARD up.

FlashFig only runs on a Windows computer and is available from the downloads page.

All RouterBOARDs support FlashFig mode. It works between a Windows computer running FlashFig and a RouterBOARD in the same broadcast domain (direct Layer 2 Ethernet network connection is required).

FlashFig support is enabled on every new RouterBOARD manufactured since March 2010 by default from the factory. For older models, FlashFig can be enabled via RouterBOOT or from MikroTik RouterOS console - /system routerboard settings set boot-device=flash-boot-once-then-nand or /system routerboard settings set boot-device=flash-boot.

Starting from RouterOS/RouterBOOT v7.16, flash boot mode will be enabled in the same way as from the factory, after every system reset initiated from the software. The same mode will be initiated when you reset router with the reset button, (bootloader version  v7.16 or higher is required). 
Please note that if you press and hold reset button before powering on the router, then the backup booter is used. The backup booter firmware (installed in the factory) must also then be v7.16 or higher. 

FlashFig mode on a brand new RouterBOARD is disabled on further boots only after the first successful user login or successful FlashFig attempt to avoid unwanted reconfiguration at a later time. To use FlashFig a second time on the same router, you need to enable flash-boot in Bootloader settings (this setting will revert to NAND after a successful configuration change OR once any user logs into the board).

If RouterOS reset-configuration command is used later (or configuration reset using the Reset button), FlashFig configuration is loaded. To permanently overwrite, use the Netinstall process and check Apply default configuration or use -r flag in Linux-based command line.

You view FlashFig video tutorial on MikroTik YouTube channel.
FlashFig Example

This is a step-by-step example of how to use the FlashFig process to apply a chosen MikroTik RouterOS configuration to a 'factory fresh' RouterBOARD.
Requirements

The Windows computer must be equipped with the following ports and contain the following files:

    A working Ethernet port;
    Valid .rsc file(s) with MikroTik RouterOS configuration similar to an export/import file. In addition to regular configuration commands, it is also possible to re-apply the factory passwords by using the read-only variables $defconfPassword and $defconfWifiPassword (starting from RouterOS 7.10beta8);
    Always use the latest FlashFig program available from the downloads page;
    The RouterBOARD has to be in flash-boot mode, if this is the very first boot, nothing needs to be done

Be aware of the text editor's treatment of CR/LF characters and test that the config has no errors when normally applied onto an identical version of RouterOS before applying via FlashFig as run-time errors will not be visible!
Pre-Configuration
Windows Computer

    Run FlashFig;
    Prepare .rsc file, .rsc file is regular/import file, it accepts valid MikroTik RouterOS CLI commands. You can create .rsc file with any text editor program (Notepad, Notepad++, Texteditor, TextEdit, Microsoft Word, OpenOffice Writer)

    Assign Boot Client Address, which should be an address within the same subnet as that configured on the computer's Ethernet interface,

    Browse for .rsc MikroTik RouterOS configuration file to apply to the RouterBOARD, highlight the file and Select to approve it,

    Activate FlashFig server, now it is ready to FlashFig. Note, any RouterBOARD will be FlashFig'ed within the network when they are powered on with boot-device configured to flash-boot or flash-boot-once-then-nand,

RouterBOARD

    FlashFig mode is enabled on every RouterBOARD from the factory by default, which means no configuration is required on RouterBOARD.

    If FlashFig is not enabled on your router, access the RouterBOARD with WinBox/Console and change the boot-device to flash-boot or flash-boot-once-then-nand:

system/routerboard/settings/set boot-device=flash-boot

Or use a more preferable option, for a single boot flash-boot:
system/routerboard/settings/set boot-device=flash-boot-once-then-nand

Your router is now ready for FlashFig.
Connect

Connect the Boot port of RouterBOARD and FlashFig computer to the same Local Area Network.
Run FlashFig

    Plug-in power for RouterBOARD
    Check the status on FlashFig program,

Messages log shows "FlashFigged" and RouterBOARD should repeatedly make the morse code sound for the character "/" ("_.._." and flash the LED - it is now safe to unplug / power down the router.

    FlashFig configuration was applied to the RouterBOARD and it is ready to be used in production with this new config.

Troubleshoot
FlashFig can not find a router

If between a PC and a router there is another device (a router/switch), ensure that for this device:

    DHCP server is disabled;
    if used ports are in a bridge, set bridge protocol-mode to none;
    HW-offload for used ports is disabled.

FlashFig finds a router, flashing is not done (no TFTP request)

Ensure that the computer on which FlashFig is running has only one network interface active.
FlashFig is done, but a configuration is not applied

If all procedures went successfully, but RouterOS configuration from .rsc file is not applied, add startup delay to *.rsc configuration file. The reason might be, that the configuration script is executed before all interfaces boots up.
Not enough flash space, ignoring
FlashFig configuration maximum file size is up to 4000 bytes, otherwise program will return an error as above.



Authentication, Authorization, Accounting

    Creado por Usuario desconocido (emils), actualizado por última vez el may 31, 2022 1 min de lectura

In This Section:

        Certificates
        Dot1X
        HotSpot - Captive portal
        PPP AAA
        RADIUS
        User
        User Manager






    Creado por Artūrs C., actualizado por última vez por Matīss O. el jun 17, 2025 6 min de lectura

Overview

    Overview
        Certificate Template
            Certificate properties
            Certificate read-only properties
        Sign Certificate
        Export Certificate
        Import Certificate
        Settings
    Let's Encrypt certificates
        Server properties
            Example:
    SCEP
    Built-in root certificate authorities

/certificate

The general menu is used to manage certificates, add templates, issue certificates, and manage CRL and SCEP Clients.
Certificate Template

Certificate templates are used to prepare a desired certificate for signing.

Certificate template is deleted right after a certificate is signed or a certificate request command is executed
/certificate
add name=CA-Template common-name=CAtemp key-usage=key-cert-sign,crl-sign
add name=Server common-name=server
add name=Client common-name=client

To print out certificates:
[admin@4k11] /certificate> print detail 
Flags: K - private-key; L - crl; C - smart-card-key; A - authority; I - issued, R - revoked; E - expired; T - trusted 
 0         name="CA-Template" key-type=rsa common-name="CAtemp" key-size=2048 subject-alt-name="" days-valid=365 key-usage=key-cert-sign,crl-sign 

 1         name="Server" key-type=rsa common-name="server" key-size=2048 subject-alt-name="" days-valid=365 
           key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client 

 2         name="Client" key-type=rsa common-name="client" key-size=2048 subject-alt-name="" days-valid=365 
           key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client 
Certificate properties
common-name (string)	Certificate common name
copy-from (name)	Certificate name from which to copy general settings
country (string)	Certificate issuer country
days-valid (days Default: 365)	Days certificate will be valid after signing
digest-algorithm (md5 | sha1 | sha256 | sha384 | sha512 Default: sha256 )	Certificate public key algorithm
key-size (1024 | 1536 | 2048 | 4096 | 8192 | prime256v1 | secp384r1 | secp521r1 Default: 2048)	Certificate public key size

key-usage (code-sign | crl-sign | decipher-only | dvcs | encipher-only     key-cert-sign | ocsp-sign | tls-client | content-commitment | data-encipherment | digital-signature | email-protect | key-agreement | key-encipherment | timestamp | tls-server Default: digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client)
	Certificate usage

locality (string)
	Certificate issuer locality

name (string)
	Certificate name

organization (string)
	Certificate issuer organization

state (string)
	Certificate issuer state

subject-alt-name (DNS: | IP: | email:)
	Certificate subject alternative name

trusted (no| yes Default: )
	

unit (string)
	Certificate issuer organizational unit
Certificate read-only properties

After a certificate is signed, most of a certificate template properties are converted to read-only (except name and trusted)
serial-number	Certificate serial number
fingerprint	
akid	Certificate authority ID
skid	Certificate subject ID
invalid-before	Date and time before which a certificate expired
invalid-after	Date and time after which a certificate expired

expires-after 
	
key-type	
ca	Certificate authority common name

If the CA certificate is removed, all issued certificates in the chain are also removed.
Sign Certificate

Certificates should be signed. In the following example, we will sign certificates and add CRL URL for the server certificate:
/certificate 
sign CA-Template 
sign Client      
sign Server ca-crl-host=192.168.88.1 name=ServerCA

Let`s check is the certificates are signed:
[admin@MikroTik] /certificate> print
Flags: K - private-key; L - crl; A - authority; T - trusted
Columns: NAME, COMMON-name, FINGERPRINT
#        NAME         COMMON  FINGERPRINT                                                     
0  K AT  CA-Template  CAtemp  0c7aaa7607a4dde1bbf33deaae6be7bac9fe4064ba47d64e8a73dcefad6cfc38
1  K AT  Client       client  b3ff25ecb166ea41e15733a7493003f3ea66310c10390c33e98fe32364c3659f
2  KLAT  ServerCA     server  152b88c9d81f4b765a59e2302e01efd1fbf11ceeed6e59f4974e87787a5bb980

For a video example click here.

The time of the key signing process depends on the key size of a specific certificate. With values of 4k and higher, it might take a substantial time to sign this specific certificate on less powerful CPU-based devices.


Export Certificate

It is possible to export client certificates with keys and CA certificates in two formats - PEM or PCKS12.
export-passphrase (string Default: none)	Passphrase that will be used for exported certificate private key encryption.
file-name (string Default: cert_export_[Certificate name].crt/key/pkcs12)	Exported certificate file name.
type (pem | pkcs12 Default: pem)	

Exported certificate type.

In case of PEM, certificate will be exported with CRT extension, if export-passphrase is specified, also encrypted private KEY file will be exported.

In case of PKCS12, certificate will be exported with P12 extension, if export-passphrase is specified, exported certificate will contain encryted private key.
/certificate 
export-certificate CA-Template 
export-certificate ServerCA export-passphrase=yourpassphrase
export-certificate Client export-passphrase=yourpassphrase

Exported certificates are available under the /file section:
[admin@MikroTik] > file print
Columns: NAME, TYPE, SIZE, CREATION-TIME
#  NAME                         TYPE        SIZE  CREATION-TIME       
0  skins                        directory         jan/19/2019 00:00:04
1  flash                        directory         jan/19/2019 01:00:00
2  pub                          directory         jan/19/2019 02:42:16
3  cert_export_CA-Template.crt  .crt file   1119  jan/19/2019 04:15:21
4  cert_export_ServerCA.crt     .crt file   1229  jan/19/2019 04:15:42
5  cert_export_ServerCA.key     .key file   1858  jan/19/2019 04:15:42
6  cert_export_Client.crt       .crt file   1164  jan/19/2019 04:15:55
7  cert_export_Client.key       .key file   1858  jan/19/2019 04:15:55

Exporting certificates requires "sensitive" user policy.
Import Certificate

To import certificates, certificates must be uploaded to a device using one of the file upload methods.

Certificates must be imported as a file.

Supported are PEM, DER, CRT, PKCS12 formats.
name (string Default: file-name_number)	A certificate name that will be shown in the certificate manager
file-name (string)	A file name that will be imported
passphrase (string Default: none)	File passphrase if there is such
trusted (yes | no Default: yes)	Adds trusted flag for imported certificate


[admin@MikroTik] > /certificate/import file-name=certificate_file_name name=name_example passphrase=file_passphrase
     certificates-imported: 2
     private-keys-imported: 1
            files-imported: 1
       decryption-failures: 0
  keys-with-no-certificate: 0

[admin@MikroTik] > /certificate/print 
Flags: K - PRIVATE-KEY; T - TRUSTED
Columns: NAME, COMMON-NAME
#    NAME            COMMON-NAME                                                  
0 KT name_example    cert    
1  T name_example_1  ca   
Settings

/certificate settings allows configuring Certificate Revocation List (CRL) settings.

By default, CRL is not utilized, and certificates are not verified for revocation status.
builtin-trust-anchors (trusted | not-trusted Default: see description)	

Allows to trust built-in root certificate authorities

Default builtin-trust-anchors after upgrade from older RouterOS version: not-trusted

Default builtin-trust-anchors after configuration reset: trusted
crl-download (yes | no Default: no)	Whether to automatically download/update CRL
crl-store (ram | sytem Default: ram)	

Where to store downloaded CRL information

CRL will be automatically renewed every hour for certificates which have "trusted=yes" using http protocol (ldap and ftp is currently unsupported)
crl-use (yes | no Default: no)	Whether to use CRL

If /certificate/settings/set crl-use is set to yes, RouterOS will check CRL for each certificate in a certificate chain, therefore, an entire certificate chain should be installed into a device - starting from Root CA, intermediate CA (if there are such), and certificate that is used for specific service.

An example on importing a root certificate.
Let's Encrypt certificates

RouterOS v7 has Let's Encrypt (letsencrypt) certificate support for the 'www-ssl' service. To enable the Let's Encrypt certificate service with automatic certificate renewal, use the 'enable-ssl-certificate' command:
/certificate enable-ssl-certificate dns-name=my.domain.com

Note that the DNS name must point to the router. If the dns-name is not specified, it will default to the automatically generated /ip cloud name (ie. http://example.sn.mynetname.net)

If the used DNS name is not the default http://example.sn.mynetname.net, port TCP/80 must be available from the WAN.

The certificate is automatically renewed when 80% of its validity period had passed.

Different acme servers

It is possible to use not only Let's Encrypt certificate service, but any other you like.

The DNS name must point to the router and port TCP/80 must be available from the WAN.

The certificate is automatically renewed when 80% of its validity period had passed.
Server properties
directory-url (string)	ACME directory url.
eab-hmac-key (string)	HMAC key for ACME External Account Binding (optional).
eab-kid (string)	

Key identifier (optional).
Example:
/certificate/enable-ssl-certificate directory-url=https://acme.zerossl.com/v2/DV90 dns-name=mydomain.abc eab-hmac-key=4ac7xuxAdV4mIncwIIEhLjExsFZ4v1rWgDkX4SKXD25pMVtF85GZJYSF8UKXUOjzSr2g3-v4lhL57NHFaQ42Ff eab-kid=GHWaP2_Ghx73vcU8ricAKU 
SCEP

SCEP is using HTTP protocol and base64 encoded GET requests. Most of the requests are without authentication and cipher, however, important ones can be protected if necessary (ciphered or signed using a received public key).

SCEP client in RouterOS will:

    get CA certificate from CA server or RA (if used);
    user should compare the fingerprint of the CA certificate or if it comes from the right server;
    generate a self-signed certificate with a temporary key;
    send a certificate request to the server;
    if the server responds with status x, then the client keeps requesting until the server sends an error or approval.

The SCEP server supports the issuance of one certificate only. RouterOS supports also renew and next-ca options:

    renew - the possibility to renew the old certificate automatically with the same CA.
    next-ca - possibility to change the current CA certificate to the new one.

The client polls the server for any changes, if the server advertises that the next-ca is available, then the client may request the next CA or wait until CA almost expires and then request the next-ca.

The RouterOS client by default will try to use POST, AES, and SHA256 if the server advertises that. If the above algorithms are not supported, then the client will try to use 3DES, DES and SHA1, MD5.

SCEP certificates are renewed when 3/4 of their validity time has passed.


Built-in root certificate authorities

Starting from RouterOS 7.19, RouterOS contains list of built-in root certificate authorities that can be used for host certificate verification. 

Now it is possible to use DoH, download Adlist from URL or use fetch tool with certificate validation without the need to manually import the relevant root certificate.

The list of built-in root certificate authorities is accessible in System → Certificates → Built In CA


When upgrading from older RouterOS version, by default built-in root certificates are not trusted.

Execute /certificate/settings/set builtin-trust-anchors=trusted to change trust settings for these certificates







    Creado por Normunds R., actualizado por última vez por GG el mar 06, 2024 9 min de lectura

    Summary
    Client
    Server
    Examples
        RouterOS Authenticator configuration
            Port based VLAN ID assignment
            Dynamic switch rule configuration
        RouterOS Supplicant configuration


Summary

Dot1X is implementation of IEEE 802.1X standard in RouterOS. Main purpose is to provide port-based network access control using EAP over LAN also known as EAPOL. 802.1X consists of a supplicant (client), an authenticator (server) and an authentication server (RADIUS server). Both authenticator and supplicant sides are supported in RouterOS, as well as authentication server when User Manager package is installed. Supported EAP methods for supplicant are EAP-TLS, EAP-TTLS, EAP-MSCHAPv2 and PEAPv0/EAP-MSCHAPv2.

Feature is not supported on SMIPS devices (hAP lite, hAP lite TC and hAP mini).
Client

Supplicant configuration settings.

Sub-menu: /interface dot1x client
anon-identity (string; Default: )	Identity for outer layer EAP authentication. Used only with eap-ttls and eap-peap methods. If not set, value from identity parameter will be used for outer layer EAP authentication.
client-certificate (string; Default: )	Name of a certificate listed in System/Certificates. Necessary when eap-tls method is used.
comment (string; Default: )	Short description of the entry.
disabled (yes | no; Default: no)	Whether client is enabled or not.
eap-methods (eap-tls | eap-ttls | eap-peap | eap-mschapv2; Default: )	Ordered list of EAP methods used for authentication.
identity (string; Default: )	Supplicant identity used for EAP authentication.
interface (string; Default: )	Name of the interface the client will run on.
password (string; Default: )	Cleartext password for supplicant.


Read only properties
status (authenticated | authenticating | disabled)	Possible statuses:

    authenticated - the client has successfully authenticated;
    authenticated without server - access to the port is granted without communication with server;
    authenticating - the server is reached and authentication process is ongoing;
    connecting - initial stage of the authentication process;
    disabled - the client is disabled;
    error - an internal error has occurred;
    interface is down - the parent interface is not running;
    rejected - the server denied the authentication.

Server

A RouterOS dot1x server acts as an authenticator. An interface where dot1x server is enabled will block all traffic except for EAPOL packets which is used for the authentication. After client is successfully authenticated, the interface will accept all received traffic on the port. If the interface is connected to a shared medium with multiple hosts, the traffic will be accepted from all hosts when at least one client is successfully authenticated. However, it is possible to configure dynamic switch rules to accept only the authenticated user source MAC address and drop all other source MAC addresses. In case of failed authentication, it is possible to accept the traffic with a dedicated port VLAN ID. 

When a dot1x server is created on a bridge port, the bridge should be running (R/M)STP, otherwise EAP packets from the client will not be correctly accepted. Bridge interface is created with protocol-mode=rstp by default. If the bridge port should not send any BPDUs or any received BPDUs should be ignored, use edge=yes configuration on bridge ports. 

Sub-menu: /interface dot1x server
accounting (yes | no; Default: yes)	Whether to send RADIUS accounting requests to authentication server.
auth-timeout (time; Default: 1m)	Total time available for EAP authentication.
auth-types (dot1x | mac-auth; Default: dot1x)	Used authentication type on a server interface. When both options are selected at the same time, the server will prefer dot1x authentication type and only after 3 retrans-timeout periods, the authentication type will fall back to mac-auth. In order for mac-auth authentication type to work, the server interface should receive at least one frame containing a client's device source MAC address.
comment (string; Default: )	Short description of the entry.
disabled (yes | no; Default: no)	Whether server config is enabled or not.
guest-vlan-id (integer: 1..4094; Default: !guest-vlan-id)	Assigned VLAN when end devices does not support dot1x authentication and no mac-auth fall back is configured. The setting will apply after 3 retrans-timeout periods. Once dot1x enabled client is created and successful re-authentication happened, the port is removed from the guest VLAN. This setting is available since RouterOS 7.2 version and has an effect when bridge vlan-filtering is enabled. By default, guest VLAN is disabled.
interface (string; Default: )	Name of the interface or interface list the server will run on.
interim-update (time; Default: 0s)	Interval between scheduled RADIUS Interim-Update messages.
mac-auth-mode (mac-as-username | mac-as-username-and-password; Default: mac-as-username)	Allows to control User-Name and User-Password RADIUS attributes when using MAC authentication.
radius-mac-format (XX-XX-XX-XX-XX-XX | XX:XX:XX:XX:XX:XX | XXXXXXXXXXXX | xx-xx-xx-xx-xx-xx | xx:xx:xx:xx:xx:xx | xxxxxxxxxxxx; Default: XX:XX:XX:XX:XX:XX)	Controls how the MAC address of the client is encoded in the User-Name and User-Password attributes when using MAC authentication.
reauth-timeout (time; Default: !reauth-timeout)	Enables server port re-authentication. When enabled with dot1x authentication type, server will try to re-authenticate a client by sending EAP-Request Identity to the client. When enabled with mac-auth authentication type, server will try to re-authenticate client with RADIUS server by using the last seen MAC address. This setting is available since RouterOS 7.2 version. By default, re-authentication is disabled.  
reject-vlan-id (integer: 1..4094; Default: !reject-vlan-id)	Assigned VLAN when authentication failed and a RADIUS server responded with an Access-Reject message. This property will not apply if the RADIUS server is not responding at all, the client authentication will simply timeout and the service will be unavailable. This property only has an effect when bridge vlan-filtering is enabled. By default, reject VLAN is disabled.
retrans-timeout (time; Default: 30s)	Time interval between message re-transmissions if no response is received from supplicant.
server-fail-vlan-id (integer: 1..4094; Default: !server-fail-vlan-id)	Assigned VLAN when RADIUS server is not responding and request timeout has elapsed. This setting is available since RouterOS 7.2 version and has an effect when bridge vlan-filtering is enabled. By default, server-fail VLAN is disabled.


Currently authenticated clients are listed in the active menu (read only properties).

Sub-menu: /interface dot1x server active
auth-info (string)	

Authentication information:

    dot1x
    dot1x (guest vlan)
    dot1x (reject vlan)
    dot1x (server fail vlan)
    mac-auth
    mac-auth (reject vlan)
    mac-auth (server fail vlan)

client-mac (mac-address)	MAC Address of the supplicant.
interface (string)	Name of the interface.
session-id (string)	Unique session identifier.
username (string)	Identity of the supplicant.
vlan-id (string)	Untagged VLAN ID that is assigned to the interface. VLAN ID filtering must be enabled on bridge.


Statuses of all active dot1x server interfaces are listed in the state menu (read only properties).

Sub-menu: /interface dot1x server state
interface (string)	Name of the interface.
status (string)	Possible interface statuses:

    authorized - access to interface is granted;
    iface-down - interface is not running;
    rejected-holding - access was rejected by the RADIUS server;
    un-authorized - access to interface is not granted.

Examples

Below are described the most common configuration examples for dot1x server and client.
RouterOS Authenticator configuration

Start off by adding a new RADIUS client. The authentication server (RADIUS) does not necessary have to be in the same LAN as authenticator, but it must be reachable from the authenticator, so any firewall limitations must be considered.
/radius 
add address=10.1.2.3 secret=radiussecret service=dot1x

 If RADIUS communication is done over public network, it is advised to use RadSec for RADIUS communication. More information: RADIUS

Add new dot1x server instances.
/interface dot1x server
add interface=ether2 interim-update=30s comment=accounted
add interface=ether12 accounting=no comment=notaccounted
Port based VLAN ID assignment

It is possible to assign an authenticated interface to a specific VLAN ID using bridge VLAN filtering. This can be done using RADIUS Tunnel-Type, Tunnel-Medium-Type and Tunnel-Private-Group-ID attributes. Note that only devices with hardware offloaded VLAN filtering will be able to do this in switch chip. 

First of all, make sure the interface is added to a bridge which has VLAN filtering enabled.
/interface bridge
add name=bridge1 vlan-filtering=yes
/interface bridge port
add bridge=bridge1 interface=ether1
add bridge=bridge1 interface=ether2
add bridge=bridge1 interface=ether12

It is necessary to add static VLAN configuration for tagged VLAN traffic to be sent over ether1 interface.
/interface bridge vlan
add bridge=bridge1 tagged=ether1 vlan-ids=2
add bridge=bridge1 tagged=ether1 vlan-ids=12

With enabled RADIUS debug logs it is possible to see complete RADIUS message packets with all attributes. In our example, Tunnel attributes are received in Access-Accept message from RADIUS server:
09:51:45 radius,debug,packet received Access-Accept with id 64 from 10.1.2.3:1812
09:51:45 radius,debug,packet     Tunnel-Type = 13 
09:51:45 radius,debug,packet     Tunnel-Medium-Type = 6 
09:51:45 radius,debug,packet     Tunnel-Private-Group-ID = "12" 
(..)
09:51:45 radius,debug,packet     User-Name = "dot1x-user" 

The VLAN ID is now present in active session list and untagged ports are added to previously created static VLAN configuration.
/interface dot1x server active print 
 0 interface=ether12 username="dot1x-user" user-mac=00:0C:42:EB:71:F6 session-id="86b00006" vlan=12 

/interface bridge vlan print detail 
Flags: X - disabled, D - dynamic 
 0 D bridge=bridge1 vlan-ids=1 tagged="" untagged="" current-tagged="" current-untagged=bridge1,ether3 

 1   bridge=bridge1 vlan-ids=2 tagged=ether1 untagged="" current-tagged=ether1 current-untagged=ether2 

 2   bridge=bridge1 vlan-ids=12 tagged=ether1 untagged="" current-tagged=ether1 current-untagged=ether12 
Dynamic switch rule configuration

In some network configurations, additional access rules are needed for a particular supplicant to restrict or allow certain network services. This can be done using a Mikrotik-Switching-Filter attribute, please see the RADIUS vendor dictionary. When a client is successfully authenticated by an authentication server, the server can pass back the Mikrotik-Switching-Filter attribute. Based on the received information, the authenticator will create dynamic access rules on a switch port where the client resides. These rules will be active as long as the client session is active and the interface is running. There are certain order and restrictions regarding correct switch rule implementation:

    The mac-protocol, src-mac-address (available only since RouterOS 7.2 version), src-address (IPv4/mask, available only since RouterOS 7.2 version), dst-address (IPv4/mask), protocol (IPv4) src-port (L4, available only since RouterOS 7.2 version), dst-port (L4) conditional parameters are supported
    Hexadecimal or decimal representation can be used for mac-protocol and protocol parameters (e.g. protocol 17 or protocol 0x11)
    The src-port and dst-port support single or range values (e.g. src-port 10 or src-port 10-20)
    The src-mac-address support "xx:xx:xx:xx:xx:xx" or "xxxxxxxxxxxx" formats, and switch rule without any source MAC address can be set with "none" keyword (e.g. src-mac-address none)
    The src-mac-address (if not already set by the attribute), switch and ports conditional parametrs are automatically set for each rule
    Each rule should end with an action property, supported values are either drop or allow. If no action property is set, the default allow value will be used.
    Multiple rules are supported for a single supplicant and they must be separated by a comma ","

Below are some examples of Mikrotik-Switching-Filter attributes and dynamic switch rules they create:
# Drop ARP frames (EtherType: 0x0806 or 2054)
Mikrotik-Switching-Filter = "mac-protocol 2054 action drop"

/interface ethernet switch rule print
Flags: X - disabled, I - invalid, D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF mac-protocol=arp copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports=""

# Allow UDP (IP protocol: 0x11 or 17) destination port 100 and drop all other packets
Mikrotik-Switching-Filter = "protocol 17 dst-port 100 action allow, action drop"

/interface ethernet switch rule print
Flags: X - disabled, I - invalid, D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF protocol=udp dst-port=100 copy-to-cpu=no redirect-to-cpu=no mirror=no 

 1  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports=""

# Allow only authenticated source MAC address, drop all other packets
Mikrotik-Switching-Filter = "action allow, src-mac-address none action drop"

/interface ethernet switch rule print 
Flags: X - disabled, I - invalid; D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:01:6D:EB/FF:FF:FF:FF:FF:FF copy-to-cpu=no redirect-to-cpu=no mirror=no 

 1  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports="" 


In our example, Supplicant2 on ether2 is only allowed to access the 192.168.50.0/24 network with UDP destination port 50, all other traffic should be dropped. First, make sure that hardware offloading is working on bridge ports, otherwise switch rules might not work properly.
/interface bridge port print
Flags: X - disabled, I - inactive, D - dynamic, H - hw-offload 
 #     INTERFACE                   BRIDGE                   HW  PVID PRIORITY  PATH-COST INTERNAL-PATH-COST    HORIZON
 0   H ether1                      bridge1                  yes    1     0x80         10                 10       none
 1   H ether2                      bridge1                  yes    1     0x80         10                 10       none
 2   H ether12                     bridge1                  yes    1     0x80         10                 10       none


With enabled RADIUS debug logs it is possible to see complete RADIUS message packets with all attributes. In our example, Mikrotik-Switching-Filter attribute is received in Access-Accept message from Radius server:
02:35:38 radius,debug,packet received Access-Accept with id 121 from 10.1.2.3:1812 
(..)
02:35:38 radius,debug,packet     MT-Switching-Filter = "mac-protocol 2048 dst-address 192.168.50.0/24 dst-port 50 protocol 17 action allow,action drop"


The dynamic switch rules are now present under the switch menu:
/interface ethernet switch rule print
Flags: X - disabled, I - invalid, D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether2 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF mac-protocol=ip dst-address=192.168.50.0/24 protocol=udp dst-port=50 copy-to-cpu=no redirect-to-cpu=no mirror=no 

 1  D ;;; dot1x dynamic
      switch=switch1 ports=ether2 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports="" 

Dynamic switch rules will only apply to RouterBoards with switch rule support - CRS3xx, CRS5xx series switches, CCR2116, CCR2216, and devices with QCA8337, Atheros8327 and Atheros8316 switch chips. CRS1xx/2xx series switches do no support this functionality. Take into consideration the maximum number of rules for each device, see CRS3xx, CRS5xx, CCR2116, CCR2216 table and basic switch chip table
RouterOS Supplicant configuration

CA certificates are required for eap-tls, eap-ttls and eap-peap authentication methods. Additionally a client certificate is required for eap-tls method. For this example we have already imported a P12 certificate bundle with self signed client and CA certificates. For more information how to import certificates in RouterOS, please visit System/Certificates.
/certificate print 
Flags: K - private-key, L - crl, C - smart-card-key, A - authority, I - issued, R - revoked, E - expired, T - trusted 
 #         NAME                                            COMMON-NAME                                         SUBJECT-ALT-NAME                             FINGERPRINT                                        
 0 K  A  T dot1x-client                                    ez_dot1x-client                                     IP:10.1.2.34
 1  L A  T dot1x CA                                        ca            

Simply add a new dot1x client instance that will initiate authentication process.
/interface dot1x client
add anon-identity=anonymous client-certificate=dot1x-client eap-methods=eap-tls identity=dot1x-user interface=ether1 password=dot1xtest

If authentication was successful, the interface should have status authenticated.
/interface dot1x client print 
Flags: I - inactive, X - disabled 
 0   interface=ether1 eap-methods=eap-peap identity="dot1x-user" password="dot1xtest" anon-identity="anonymous" client-certificate=dot1x-client status="authenticated" 
 
 

    Creado por Artūrs C., actualizado por última vez por Normunds R. el oct 03, 2024 8 min de lectura

    Introduction
        HotSpot Gateway features:
    Example
        Parameters asked during the setup process
    IP HotSpot
    IP HotSpot Active
    IP HotSpot Host
    IP Binding
    Cookies
    Using DHCP option to advertise HotSpot URL

Introduction

The MikroTik HotSpot Gateway provides authentication for clients before access to public networks.

Hotspot (captive portal) - uses web-proxy and it is capable of using only the default routing table, at the moment. Making the PCC(per connection-classifier) not a valid method, due to the, multiple routing tables used.
HotSpot Gateway features:

    different authentication methods of clients, using a local client database on the router, or remote RADIUS server;
    users accounting in a local database on the router, or on remote RADIUS server;
    a walled-garden system, access to some web pages without authorization;
    login page modification, where you can put information about the company;
    automatic and transparent change any IP address of a client to a valid address;
    HotSpot can inform DHCP clients that they are behind a captive portal (RFC7710);

A hotspot can work reliably only when IPv4 is used. Hotspot relies on Firewall NAT rules which currently are not supported for IPv6.
Example
[admin@MikroTik] /ip hotspot> setup 
Select interface to run HotSpot on 

hotspot interface: ether3
Set HotSpot address for interface 

local address of network: 10.5.50.1/24
masquerade network: yes
Set pool for HotSpot addresses 

address pool of network: 10.5.50.2-10.5.50.254
Select hotspot SSL certificate 

select certificate: none
Select SMTP server 

ip address of smtp server: 0.0.0.0
Setup DNS configuration 

dns servers: 10.1.101.1
DNS name of local hotspot server 

dns name: myhotspot
Create local hotspot user 

name of local hotspot user: admin
password for the user: 
[admin@MikroTik] /ip hotspot>

Verify HotSpot configuration:
[admin@MikroTik] /ip hotspot> print 
Flags: X - disabled, I - invalid, S - HTTPS 
# NAME INTERFACE ADDRESS-POOL PROFILE IDLE-TIMEOUT
0 hotspot1 ether3 hs-pool-3 hsprof1 5m 
[admin@MikroTik] /ip hotspot> 
[admin@MikroTik] /ip pool> print 
# NAME RANGES 
0 hs-pool-3 10.5.50.2-10.5.50.254 
[admin@MikroTik] /ip pool> /ip dhcp-server 
[admin@MikroTik] /ip dhcp-server> print 
Flags: X - disabled, I - invalid 
# NAME INTERFACE RELAY ADDRESS-POOL LEASE-TIME ADD-ARP
0 dhcp1 ether3 hs-pool-3 1h 
[admin@MikroTik] /ip dhcp-server> /ip firewall nat 
[admin@MikroTik] /ip firewall nat> print 
Flags: X - disabled, I - invalid, D - dynamic 
0 X ;;; place hotspot rules here
chain=unused-hs-chain action=passthrough 

1 ;;; masquerade hotspot network
chain=srcnat action=masquerade src-address=10.5.50.0/24 
[admin@MikroTik] /ip firewall nat> 
Parameters asked during the setup process
hotspot interface (string; Default: allow)	Interface name on which to run HotSpot. To run HotSpot on a bridge interface, make sure public interfaces are not included in the bridge ports.
local address of network (IP; Default: 10.5.50.1/24)	HotSpot gateway address
masquerade network (yes | no; Default: yes)	Whether to masquerade HotSpot network, when yes rule is added to /ip firewall nat with action=masquerade
address pool of network (string; Default: yes)	Address pool for HotSpot network, which is used to change user IP address to a valid address. Useful if providing network access to mobile clients that are not willing to change their networking settings.
select certificate (none | import-other-certificate; Default: )	Choose SSL certificate, when HTTPS authorization method is required.
ip address of smtp server (IP; Default: 0.0.0.0)	The IP address of the SMTP server, where to redirect HotSpot's network SMTP requests (25 TCP port)
dns servers (IP; Default: 0.0.0.0)	DNS server addresses used for HotSpot clients, configuration taken from /ip dns menu of the HotSpot gateway
dns name (string; Default: "")	the domain name of the HotSpot server, a full qualified domain name is required, for example, www.example.com
name of local hotspot user (string; Default: "admin")	username of one automatically created HotSpot user, added to /ip hotspot user
password for the user' (string; Default: )	Password for automatically created HotSpot user
IP HotSpot
/ip/hotspot

The menu is designed to manage the HotSpot servers of the router. It is possible to run HotSpot on Ethernet, wireless, VLAN, and bridge interfaces. One HotSpot server is allowed per interface. When HotSpot is configured on the bridge interface, set HotSpot interface as bridge interface, not as bridge port, do not add public interfaces to bridge ports. You can add HotSpot servers manually to the /ip/hotspot menu, but it is advised to run /ip/hotspot/setup, which adds all necessary settings.
name (text)	HotSpot server's name or identifier
address-pool (name/none; default: none)	address space used to change HotSpot client any IP address to a valid address. Useful for providing public network access to mobile clients that are not willing to change their networking settings
idle-timeout (time/none; default: 5m) 	period of inactivity for unauthorized clients. When there is no traffic from this client (literally client computer should be switched off), once the timeout is reached, a user is dropped from the HotSpot host list, its used address becomes available
keepalive-timeout (time/none; default: none)	Value of how long host can stay out of reach to be removed from the HotSpot
login-timeout (time/none; default: none)	Period of time after which if a host hasn't been authorized itself with a system the host entry gets deleted from host table. Loop repeats until the host logs in the system. Enable if there are situations where a host cannot log in after being too long in the host table unauthorized.
interface (name of an interface)	Interface to run HotSpot on
addresses-per-mac (integer/unlimited; default: 2)	Number of IP addresses allowed to be bind with the MAC address, when multiple HotSpot clients connected with one MAC-address
profile (name; default: default)	HotSpot server default HotSpot profile, which is located in /ip/hotspot/profile

Read-only
keepalive-timeout (read-only; time)	The exact value of the keepalive-timeout, that is applied to the user. Value shows how long the host can stay out of reach to be removed from the HotSpot
IP HotSpot Active
/ip/hotspot/active

HotSpot active menu shows all clients authenticated in HotSpot, the menu is informational (read-only) it is not possible to change anything here.
server (read-only; name)	HotSpot server name client is logged in
user (read-only; name)	name of the HotSpot user
domain (read-only; text)	the domain of the user (if split from the username), a parameter is used only with RADIUS authentication
address (read-only; IP address)	The IP address of the HotSpot user
mac-address (read-only; MAC-address)	MAC-address of the HotSpot user
login-by (read-only; multiple-choice: cookie / http-chap / http-pap / https / mac / mac-cookie / trial)	the authentication method used by the HotSpot client
uptime (read-only; time)	current session time of the user, it is showing how long the user has been logged in
idle-time (read-only; time)	the amount of time the user has been idle
session-time-left (read-only; time)	the exact value of session-time, that is applied for the user. Value shows how long user is allowed to be online to be logged off automatically by uptime reached
idle-timeout (read-only; time)	the exact value of the user's idle-timeout
keepalive-timeout (read-only; time)	the exact value of the keepalive-timeout, that is applied for the user. Value shows how long the host can stay out of reach to be removed from the HotSpot
limit-bytes-in (read-only; integer)	value shows how many bytes received from the client, an option is active when the appropriate parameter is configured for HotSpot user
limit-bytes-out (read-only; integer) 	value shows how many bytes send to the client, an option is active when the appropriate parameter is configured for HotSpot user
limit-bytes-total (read-only; integer)	value shows how many bytes total were send/received from the client, an option is active when the appropriate parameter is configured for HotSpot user
IP HotSpot Host
/ip/hotspot/host

The host table lists all computers connected to the HotSpot server. The host table is informational and it is not possible to change any value there:
mac-address (read-only; MAC-address)	HotSpot user MAC-address
address (read-only; IP address)	HotSpot client original IP address
to-address (read-only; IP address)	The new client address assigned by HotSpot might be the same as the original address
server (read-only; name)	HotSpot server name client is connected to
bridge-port (read-only; name)	"/interface bridge port" the client is connected to, value is unknown when HotSpot is not configured on the bridge
uptime (read-only; time)	value shows how long the user is online (connected to the HotSpot)
idle-time (read-only; time)	time user has been idle

idle-timeout (read-only; time) 
	value of the client idle-timeout (unauthorized client)
keepalive-timeout (read-only; time)	keepalive-timeout value of the unauthorized client
bytes-in (read-only; integer)	amount of bytes received from an unauthorized client
packet-in (read-only; integer)	amount of packets received from an unauthorized client
bytes-out (read-only; integer)	amount of bytes sent to an unauthorized client
packet-out (read-only; integer) 	amount of packets sent to an unauthorized client
IP Binding
/ip/hotspot/ip-binding

IP-Binding HotSpot menu allows to the setup of static One-to-One NAT translations, allows to bypass specific HotSpot clients without any authentication, and also allows to block specific hosts and subnets from the HotSpot network
address (IP Range; Default: "")	The original IP address of the client
mac-address (MAC; Default: "")	MAC address of the client
server (string | all; Default: "all")	Name of the HotSpot server.

    all - will be applied to all hotspot servers

to-address (IP; Default: "")	New IP address of the client, translation occurs on the router (client does not know anything about the translation)
type (blocked | bypassed | regular; Default: "")	Type of the IP-binding action

    regular - performs One-to-One NAT according to the rule, translates the address to to-address
    bypassed - performs the translation, but excludes client from login to the HotSpot
    blocked - translation is not performed and packets from a host are dropped

Cookies

The menu contains all cookies sent to the HotSpot clients, which are authorized by cookie method, all the entries are read-only.
/ip/hotspot/cookie


domain (string)	The domain name (if split from the username)
expires-in (time)	How long the cookie is valid
mac-address (MAC)	Client's MAC-address
user (string)	HotSpot username
Using DHCP option to advertise HotSpot URL

Most devices, such as modern smartphones, do some kind of background checking to see if they are behind a captive portal. They do this by requesting a known webpage and comparing the contents of that page, to what they should be. If contents are different, the device assumes there is a login page and creates a popup with this login page.

This does not always happen, as this "known webpage" could be blocked, whitelisted, or not accessible in internal networks. To improve on this mechanism, RFC 7710 was created, allowing the HotSpot to inform all DHCP clients that they are behind a captive-portal device and that they will need to authenticate to get Internet access, regardless of what webpages they do or do not request.

This DHCP option field is enabled automatically, but only if the router has a DNS name configured and has a valid SSL certificate (so that the login page can be accessed over HTTPS). When these requirements are met, a special DHCP option will be sent, containing a link to https://<dns-name-of-hotspot>/api. This link contains information in JSON format, instructing the client device of the captive portal status, and the location of the login page.

Contents of https://<dns-name-of-hotspot>/api are as follows:
{
"captive": $(if logged-in == 'yes')false$(else)true$(endif),
"user-portal-url": "$(link-login-only)",
$(if session-timeout-secs != 0)
"seconds-remaining": $(session-timeout-secs),
$(endif)
$(if remain-bytes-total)
"bytes-remaining": $(remain-bytes-total),
$(endif)
"can-extend-session": true
}

Some devices require venue-info URL as well, so you are free to modify the api.json file to your liking, just like any other hotspot files. It is located in the router files menu. 

Important

If you have set up Hotspot before RouterOS v7.3 when RFC 7710 was implemented, you will have to use "Reset HTML" function, or manually add/edit the api.json file to have the above contents, for Hotspot detection to work. 



    Creado por Normunds R., actualizado por última vez por GG el mar 08, 2024 19 min de lectura

Requirements

    HotSpot captive portal

Introduction

You can create a completely different set of servlet pages for each HotSpot server you have, specifying the directory in the "html-override-directory" property of a HotSpot server profile /ip hotspot profile. The default servlet pages are copied in the directory "hotspot" directory right after you create the server profile. This directory can be accessed by connecting to the router with an FTP client. You can copy this directory and modify the pages as you like using the information from this section of the manual. Note that it is suggested to edit the files manually, as automated HTML editing tools may corrupt the pages by removing variables or other vital parts. After you are finished with content modification you need to upload this modified content to some custom directory on the hotspot router and point previously mentioned property "html-override-directory" value as path to this new custom HTML directory.

Note: If "html-override-directory" value path is missing or empty then the hotspot server will revert to default HTML files.
Available Pages

Main HTML servlet pages, which are shown to the user:

    redirect.html - redirects the user to another URL (for example, to the login page)
    login.html - login page shown to a user to ask for a username and password. This page may take the following parameters:
        username - username
        password - either plain-text password (in case of PAP authentication) or MD5 hash of chap-id variable, password, and CHAP challenge (in case of CHAP authentication). This value is used as e-mail address for trial users
        dst - original URL requested before the redirect. This will be opened on successful login
        popup - whether to pop-up a status window on successful login
        radius<id> - send the attribute identified with <id> in text string form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
        radius<id>u - send the attribute identified with <id> in unsigned integer form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
        radius<id>-<vnd-id> - send the attribute identified with <id> and vendor ID <vnd-id> in text string form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
        radius<id>-<vnd-id>u - send the attribute identified with <id> and vendor ID <vnd-id> in unsigned integer form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
    md5.js - JavaScript for MD5 password hashing. Used together with http-chap login method
    alogin.html - page shown after a client has logged in. It pops-up status page and redirects the browser to the originally requested page (before he/she was redirected to the HotSpot login page)
    status.html - status page, shows statistics for the client. It is also able to display advertisements automatically
    logout.html - logout page, shown after a user is logged out. Shows final statistics about the finished session. This page may take the following additional parameters:
        erase-cookie - whether to erase cookies from the HotSpot server on logout (makes it impossible to log in with cookie next time from the same browser, might be useful in multiuser environments)
    error.html - error page, shown on fatal errors only

Some other pages are available as well, if more control is needed:

    rlogin.html - page, which redirects the client from some other URL to the login page, if authorization of the client is required to access that URL
    rstatus.html - similar to rlogin.html, only in case if the client is already logged in and the original URL is not known
    radvert.html - redirects the client to the scheduled advertisement link
    flogin.html - shown instead of login.html, if some error has happened (invalid username or password, for example)
    fstatus.html - shown instead of redirect, if a status page is requested, but the client is not logged in
    flogout.html - shown instead of redirect, if logout page is requested, but the client is not logged in

Serving Servlet Pages

The HotSpot servlet recognizes 5 different request types:

    request for a remote host
        if user is logged in and advertisement is due to be displayed, radvert.html is displayed. This page redirects to the scheduled advertisement page
        if user is logged in and advertisement is not scheduled for this user, the requested page is served
        if user is not logged in, but the destination host is allowed by the walled garden, then the request is also served
        if user is not logged in, and the destination host is disallowed by the walled garden, rlogin.html is displayed; if rlogin.html is not found, redirect.html is used to redirect to the login page


    request for "/" on the HotSpot host
        if user is logged in, rstatus.html is displayed; if rstatus.html is not found, redirect.html is used to redirect to the status page
        if user is not logged in, rlogin.html is displayed; if rlogin.html is not found, redirect.html is used to redirect to the login page


    request for "/login" page
        if user has successfully logged in (or is already logged in), alogin.html is displayed; if alogin.html is not found, redirect.html is used to redirect to the originally requested page or the status page (in case, the original destination page was not given)
        if user is not logged in (username was not supplied, no error message appeared), login.html is showed
        if login procedure has failed (an error message is supplied), flogin.html is displayed; if flogin.html is not found, login.html is used
        in case of fatal errors, error.html is showed


    request for "/status" page
        if user is logged in, status.html is displayed
        if user is not logged in, fstatus.html is displayed; if fstatus.html is not found, redirect.html is used to redirect to the login page


    request for '/logout' page
        if user is logged in, logout.html is displayed
        if user is not logged in, flogout.html is displayed; if flogout.html is not found, redirect.html is used to redirect to the login page

Note: If it is not possible to meet a request using the pages stored on the router's FTP server, Error 404 is displayed

There are many ways to customize what the HotSpot authentication pages look like:

    The pages are easily modifiable. They are stored on the router's FTP server in the directory you choose for the respective HotSpot server profile.
    By changing the variables, which client sends to the HotSpot servlet, it is possible to reduce the keyword count to one (username or password; for example, the client's MAC address may be used as the other value) or even to zero (License Agreement; some predefined values general for all users or client's MAC address may be used as username and password)
    Registration may occur on a different server (for example, on a server that is able to charge Credit Cards). Client's MAC address may be passed to it, so that this information doesn't have to be entered manually. After the registration, the server should change RADIUS database enabling client to log in for some amount of time.

To insert a variable in some place in the HTML file, the $(var_name) syntax is used, where the "var_name" is the name of the variable (without quotes). This construction may be used in any HotSpot HTML file accessed as '/', '/login', '/status' or '/logout', as well as any text or HTML (.txt, .htm or .html) file stored on the HotSpot server (with the exception of traffic counters, which are available in status page only, and error, error-orig, chap-id, chap-challenge and popup variables, which are available in login page only). For example, to show a link to the login page, following construction can be used:

<a href="$(link-login)">login</a>

Variables

All of the Servlet HTML pages use variables to show user specific values. Variable names appear only in the HTML source of the servlet pages - they are automatically replaced with the respective values by the HotSpot Servlet. For most variables, there is an example of their possible value included in brackets. All the described variables are valid in all servlet pages, but some of them just might be empty at the time they are accessed (for example, there is no uptime before a user has logged in).
List of available variables

Note: Some of the variables use hard-coded http URL, if you are using https, you can construct the link in some other way, for example for $link-status, you can use https://$(hostname)/$(target-dir)status

Common server variables:

    hostname - DNS name or IP address (if DNS name is not given) of the HotSpot Servlet ("hotspot.example.net")
    identity - RouterOS identity name ("MikroTik")
    login-by - authentication method used by user
    plain-passwd - a "yes/no" representation of whether HTTP-PAP login method is allowed ("no")
    server-address - HotSpot server address ("10.5.50.1:80")
    ssl-login - a "yes/no" representation of whether HTTPS method was used to access that servlet page ("no")
    server-name - HotSpot server name (set in the /ip hotspot menu, as the name property)

Links:

    link-login - link to login page including original URL requested ("http://10.5.50.1/login?dst=http://www.example.com/")
    link-login-only - link to login page, not including original URL requested ("http://10.5.50.1/login")
    link-logout - link to logout page ("http://10.5.50.1/logout")
    link-status - link to status page ("http://10.5.50.1/status")
    link-orig - original URL requested ("http://www.example.com/")

General client information:

    domain - domain name of the user ("example.com")
    interface-name - physical HotSpot interface name (in case of bridged interfaces, this will return the actual bridge port name)
    ip - IP address of the client ("10.5.50.2")
    logged-in - "yes" if the user is logged in, otherwise - "no" ("yes")
    mac - MAC address of the user ("01:23:45:67:89:AB")
    trial - a "yes/no" representation of whether the user has access to trial time. If user's trial time has expired, the value is "no"
    username - the name of the user ("John")
    host-ip - client IP address from /ip hotspot host table
    vlan-id - Represents ID of a VLAN interface from which the client is connected

User status information:

    idle-timeout - idle timeout ("20m" or "" if none)
    idle-timeout-secs - idle timeout in seconds ("88" or "0" if there is such timeout)
    limit-bytes-in - byte limit for send ("1000000" or "---" if there is no limit)
    limit-bytes-out - byte limit for receive ("1000000" or "---" if there is no limit)
    refresh-timeout - status page refresh timeout ("1m30s" or "" if none)
    refresh-timeout-secs - status page refresh timeout in seconds ("90s" or "0" if none)
    session-timeout - session time left for the user ("5h" or "" if none)
    session-timeout-secs - session time left for the user, in seconds ("3475" or "0" if there is such timeout)
    session-time-left - session time left for the user ("5h" or "" if none)
    session-time-left-secs - session time left for the user, in seconds ("3475" or "0" if there is such timeout)
    uptime - current session uptime ("10h2m33s")
    uptime-secs - current session uptime in seconds ("125")

Traffic counters, which are available only on the status page:

    bytes-in - number of bytes received from the user ("15423")
    bytes-in-nice - user-friendly form of number of bytes received from the user ("15423")
    bytes-out - number of bytes sent to the user ("11352")
    bytes-out-nice - user-friendly form of number of bytes sent to the user ("11352")
    packets-in - number of packets received from the user ("251")
    packets-out - number of packets sent to the user ("211")
    remain-bytes-in - remaining bytes until limit-bytes-in will be reached ("337465" or "---" if there is no limit)
    remain-bytes-out - remaining bytes until limit-bytes-out will be reached ("124455" or "---" if there is no limit)

Miscellaneous variables:

    session-id - value of 'session-id' parameter in the last request
    var - value of 'var' parameter in the last request
    error - error message, if something failed ("invalid username or password")
    error-orig - original error message (without translations retrieved from errors.txt), if something failed ("invalid username or password")
    chap-id - value of chap ID ("\371")
    chap-challenge - value of chap challenge ("\357\015\330\013\021\234\145\245\303\253\142\246\133\175\375\316")
    popup - whether to pop-up checkbox ("true" or "false")
    advert-pending - whether an advertisement is pending to be displayed ("yes" or "no")
    http-status - allows the setting of the http status code and message
    http-header - allows the setting of the http header

RADIUS-related variables:

    radius<id> - show the attribute identified with <id> in text string form (in case RADIUS authentication was used; "" otherwise)
    radius<id>u - show the attribute identified with <id> in unsigned integer form (in case RADIUS authentication was used; "0" otherwise)
    radius<id>-<vnd-id> - show the attribute identified with <id> and vendor ID <vnd-id> in text string form (in case RADIUS authentication was used; "" otherwise)
    radius<id>-<vnd-id>u - show the attribute identified with <id> and vendor ID <vnd-id> in unsigned integer form (in case RADIUS authentication was used; "0" otherwise)

Working with variables

$(if <var_name>) statements can be used in these pages. The following content will be included, if value of <var_name> will not be an empty string. It is an equivalent to $(if <var_name> != "") It is possible to compare on equivalence as well: $(if <var_name> == <value>) These statements have effect until $(elif <var_name>), $(else) or $(endif). In general case it looks like this:

some content, which will always be displayed
$(if username == john)
Hey, your username is john
$(elif username == dizzy)
Hello, Dizzy! How are you? Your administrator.
$(elif ip == 10.1.2.3)
You are sitting at that old computer, which is so slow...
$(elif mac == 00:01:02:03:04:05)
This is an ethernet card, which was stolen few months ago...
$(else)
I don't know who you are, so lets live in peace.
$(endif)
other content, which will always be displayed

Only one of those expressions will be shown. Which one - depends on the values of those variables for each client.
Redirects and custom Headers

	$(if http-status == 302)Hotspot login required$(endif)
	$(if http-header == "Location")$(link-redirect)$(endif)

Note: Although the above appears to use the conditional expression 'if' it is in fact setting the 'http-status' to '302' not testing for it. Also the same for the variable 'http-header'. Once again, even though it uses an 'if' it is in fact setting the variable to 'Location' followed by the URL set from the variable 'link-redirect'.

For example, in the case where $(link-redirect) evaluates to "http://192.168.88.1/login", then the HTTP response returned to the client will be changed to:

HTTP/1.0 302 Hotspot login required
<regular HTTP headers>
Location: http://192.168.88.1/login


http-status syntax:

	$(if http-status == XYZ)HTTP_STATUS_MESSAGE$(endif)

    XYZ - The status code you wish to return. Should be 3 decimal digits, the first one must not be 0
    HTTP_STATUS_MESSAGE - any text you wish to return to the client that will follow the above status code in the HTTP reply

In any HTTP response it will be on the first line and will be as follows:

HTTP/1.0 XYZ HTTP_STATUS_MESSAGE


http-header syntax:

$(if http-header == HTTP_HEADER_NAME)HTTP_HEADER_VALUE$(endif)

    HTTP_HEADER_NAME - name of the HTTP header to be sent in the response
    HTTP_HEADER_VALUE - the value of the HTTP header with the name HTTP_HEADER_NAME to be sent in the response

The HTTP response will appear as:

HTTP_HEADER_NAME: HTTP_HEADER_VALUE


All variables and conditional expressions within HTTP_HEADER_VALUE and HTTP_STATUS_MESSAGE are processed as usual.

In case multiple headers with the same name are added, then only the last one will be used (previous ones will be discarded). It allows the system to override regular HTTP headers (for example, Content-Type and Cache-Control).
Customizing Error Messages

All error messages are stored in the errors.txt file within the respective HotSpot servlet directory. You can change and translate all these messages to your native language. To do so, edit the errors.txt file. You can also use variables in the messages. All instructions are given in that file.
Multiple Versions of HotSpot Pages

Multiple HotSpot page sets for the same HotSpot server are supported. They can be chosen by the user (to select language) or automatically by JavaScript (to select PDA/regular version of HTML pages).

To utilize this feature, create subdirectories in the HotSpot HTML directory, and place those HTML files, which are different, in that subdirectory. For example, to translate everything in Latvian, the subdirectory "lv" can be created with login.html, logout.html, status.html, alogin.html, radvert.html and errors.txt files, which are translated into Latvian. If the requested HTML page can not be found in the requested subdirectory, the corresponding HTML file from the main directory will be used. Then main login.html file would contain a link to "/lv/login?dst=$(link-orig-esc)", which then displays Latvian version of login page: <a href="/lv/login?dst=$(link-orig-esc)">Latviski</a> . And Latvian version would contain a link to English version: <a href="/login?dst=$(link-orig-esc)">English</a>

Another way of referencing directories is to specify 'target' variable:

        <a href="$(link-login-only)?dst=$(link-orig-esc)&target=lv">Latviski</a>
        <a href="$(link-login-only)?dst=$(link-orig-esc)&target=%2F">English</a>

After the preferred directory has been selected (for example, "lv"), all links to local HotSpot pages will contain that path (for example, $(link-status) = "http://hotspot.mt.lv/lv/status"). So, if all HotSpot pages reference links using "$(link-xxx)" variables, then no more changes are to be made - each client will stay within the selected directory all the time.
Misc

If you want to use the HTTP-CHAP authentication method, you need to include the doLogin() function (which references to the md5.js which must be already loaded) before the Submit action of the login form. Otherwise, CHAP login will fail.

The resulting password to be sent to the HotSpot gateway in case of HTTP-CHAP method, it is formed by MD5-hashing the concatenation of the following: chap-id, the password of the user, and chap-challenge (in the given order)

In case variables are to be used in the link directly, then they must be escaped accordingly. For example, in login page, <a href="https://login.example.com/login?mac=$(mac)&user=$(username)">link</a> will not work as intended, if username will be "123&456=1 2". In this case instead of $(user), its escaped version must be used: $(user-esc): <a href="https://login.server.serv/login?mac=$(mac-esc)&user=$(user-esc)">link</a>. Now the same username will be converted to "123%26456%3D1+2", which is the valid representation of "123&456=1 2" in URL. This trick may be used with any variables, not only with $(username).

There is a boolean parameter "erase-cookie" to the logout page, which may be either "on" or "true" to delete user cookie on logout (so that the user would not be automatically logged on when he/she opens a browser next time.
Examples

With basic HTML language knowledge and the examples below it should be easy to implement the ideas described above.

    To provide predefined value as username, in login.html change:

<type="text" value="$(username)>

to this line:

<input type="hidden" name="username" value="hsuser">

(where hsuser is the username you are providing)

    To provide a predefined value as a password, in login.html change:

<input type="password">

to this line:

<input type="hidden" name="password" value="hspass">

(where hspass is the password you are providing)

    To send the client's MAC address to a registration server in the form of:

https://www.example.com/register.html?mac=XX:XX:XX:XX:XX:XX

change the Login button link in login.html to:

https://www.example.com/register.html?mac=$(mac)

(you should correct the link to point to your server)

    To show a banner after user login, in alogin.html after

$(if popup == 'true') add the following line:

open('http://www.example.com/your-banner-page.html', 'my-banner-name','');

(you should correct the link to point to the page you want to show)

    To choose a different page shown after login, in login.html change:

<input type="hidden" name="dst" value="$(link-orig)">

to this line:

<input type="hidden" name="dst" value="http://www.example.com">

(you should correct the link to point to your server)

    To erase the cookie on logoff, in the page containing a link to the logout (for example, in status.html) change:

open('$(link-logout)', 'hotspot_logout', ...

to this:

open('$(link-logout)?erase-cookie=on', 'hotspot_logout', ...

or alternatively add this line:

<input type="hidden" name="erase-cookie" value="on">

before this one:

<input type="submit" value="log off">

External authentication

Another example is making HotSpot to authenticate on a remote server (which may, for example, perform credit card charging):

    Allow direct access to the external server in walled-garden (either HTTP-based or IP-based)
    Modify the login page of the HotSpot servlet to redirect to the external authentication server. The external server should modify the RADIUS database as needed

Here is an example of such a login page to put on the HotSpot router (it is redirecting to https://auth.example.com/login.php, replace with the actual address of an external authentication server):

<html>
<title>...</title>
<body>
<form name="redirect" action="https://auth.example.com/login.php" method="post">
<input type="hidden" name="mac" value="$(mac)">
<input type="hidden" name="ip" value="$(ip)">
<input type="hidden" name="username" value="$(username)">
<input type="hidden" name="link-login" value="$(link-login)">
<input type="hidden" name="link-orig" value="$(link-orig)">
<input type="hidden" name="error" value="$(error)">
</form>
<script language="JavaScript">
<!--
	document.redirect.submit();
//-->
</script>
</body>
</html>
          

    The external server can log in a HotSpot client by redirecting it back to the original HotSpot servlet login page, specifying the correct username and password

Here is an example of such a page (it is redirecting to https://hotspot.example.com/login, replace with the actual address of a HotSpot router; also, it is displaying www.mikrotik.com after successful login, replace with what is needed):

<html>
<title>Hotspot login page</title>
<body>
<form name="login" action="https://hotspot.example.com/login" method="post">
<input type="text" name="username" value="demo">
<input type="password" name="password" value="none">
<input type="hidden" name="domain" value="">
<input type="hidden" name="dst" value="http://www.mikrotik.com/">
<input type="submit" name="login" value="log in">
</form>
</body>
</html>
          

    Hotspot will ask the RADIUS server whether to allow the login or not. If allowed, alogin.html page will be displayed (it can be modified to do anything). If not allowed, the flogin.html (or login.html) page will be displayed, which will redirect the client back to the external authentication server.

Note: as shown in these examples, HTTPS protocol and POST method can be used to secure communications.
HTTP header detection

The Hotspot login pages have access to HTTP headers by using $(http-header-name);

For example, there exists an ability to check the user agent (or browser), and will return any other content instead of the regular login page, if so desired. This can be used to disable automatic popups in phones, for example.

For example, to output "SUCCESS" for users of a specific Firefox mobile version, instead of the login page, you can these lines on the top of the rlogin.html page in your hotspot directory:

$(if user-agent == "Mozilla/5.0 (Android; Mobile; rv:40.0) Gecko/40.0 Firefox/40.0" ) 
<HTML><HEAD><TITLE>Success</TITLE></HEAD><BODY>Success</BODY></HTML> 
$(else)
---- regular content of rlogin.html page  ----
$(endif)

This will DISABLE the login popup for Android Firefox 40 users.
One-click login

It is possible to create a modified captive portal for quick one-click login for scenarios where no user or password is required.

What you need to do is:

    Create a user for this purpose. In example, it is "notsosecretuser" with password "notsosecretpass"
    Assign this user to a user profile that allows a specific/unlimited amount of simultaneous active users.
    Copy original hotspot directory that is already generated in routers file menu on root level.
    Modify the contents of this copy directory contents.
        Only one file requires modifications for this to work, the "login.html".

Original:

<table width="100" style="background-color: #ffffff">
  <tr><td align="right">login</td>
      <td><input style="width: 80px" name="username" type="text" value="$(username)"/></td>
  </tr>
  <tr><td align="right">password</td>
      <td><input style="width: 80px" name="password" type="password"/></td>
  </tr>
  <tr><td> </td>
      <td><input type="submit" value="OK" /></td>
  </tr>
</table>

Modified:

<table width="100" style="background-color: #ffffff">
  <tr style="display:none;"><td align="right">login</td>
    <td><input style="width: 80px" name="username" type="text" value="notsosecretuser"/></td>
  </tr>
  <tr style="display:none;"><td align="right">password</td>
    <td><input style="width: 80px" name="password" type="password" value="notsosecretpass"/></td>
  </tr>
  <tr><td> </td>
    <td><input type="submit" value="Proceed to Internet!" /></td>
  </tr>
</table>

What changed:

            User and Password "" fields are hidden.
            Both User and Password field values contain predefined values.
            Changed the "OK" button value(name) to something more fitting.

    Now upload this new hotspot folder back to the router, preferably with a different name.
    Change settings in the hotspot server profile to use this new html directory.

/ip hotspot profile set (profile number or name) html-directory-override=(dir path/name)

Firewall customizations
Summary

Apart from the obvious dynamic entries in the /ip hotspot submenu itself (like hosts and active users), some additional rules are added in the firewall tables when activating a HotSpot service. 
NAT

From /ip firewall nat print dynamic command, you can get something like this (comments follow after each of the rules):

 0 D chain=dstnat action=jump jump-target=hotspot hotspot=from-client

Putting all HotSpot-related tasks for packets from all HotSpot clients into a separate chain.

 1 I chain=hotspot action=jump jump-target=pre-hotspot

Any actions that should be done before HotSpot rules apply, should be put in the pre-hotspot chain. This chain is under full administrator control and does not contain any rules set by the system, hence the invalid jump rule (as the chain does not have any rules by default).

 2 D chain=hotspot action=redirect to-ports=64872 dst-port=53 protocol=udp 
 3 D chain=hotspot action=redirect to-ports=64872 dst-port=53 protocol=tcp 

Redirect all DNS requests to the HotSpot service. The 64872 port provides DNS service for all HotSpot users. If you want the HotSpot server to listen to another port, add rules here the same way, changing dst-port property.

 4 D chain=hotspot action=redirect to-ports=64873 hotspot=local-dst dst-port=80
     protocol=tcp

Redirect all HTTP login requests to the HTTP login servlet. The 64873 is HotSpot HTTP servlet port.

 5 D chain=hotspot action=redirect to-ports=64875 hotspot=local-dst dst-port=443
     protocol=tcp

Redirect all HTTPS login requests to the HTTPS login servlet. The 64875 is HotSpot HTTPS servlet port.

 6 D chain=hotspot action=jump jump-target=hs-unauth hotspot=!auth protocol=tcp

All other packets except DNS and login requests from unauthorized clients should pass through the hs-unauth chain.

 7 D chain=hotspot action=jump jump-target=hs-auth hotspot=auth protocol=tcp

And packets from the authorized clients - through the hs-auth chain.

 8 D ;;; www.mikrotik.com
     chain=hs-unauth action=return dst-address=66.228.113.26 dst-port=80 protocol=tcp

First in the hs-unauth chain is put everything that affects TCP protocol in the /ip hotspot walled-garden ip submenu (i.e., everything where either protocol is not set, or set to TCP). Here we are excluding www.mikrotik.com from being redirected to the login page.

 9 D chain=hs-unauth action=redirect to-ports=64874 dst-port=80 protocol=tcp

All other HTTP requests are redirected to the Walled Garden proxy server which listens to the 64874 port. If there is an "allow" entry in the /ip hotspot walled-garden menu for an HTTP request, it is being forwarded to the destination. Otherwise, the request will be automatically redirected to the HotSpot login servlet (port 64873).

10 D chain=hs-unauth action=redirect to-ports=64874 dst-port=3128 protocol=tcp 
11 D chain=hs-unauth action=redirect to-ports=64874 dst-port=8080 protocol=tcp 

HotSpot by default assumes that only these ports may be used for HTTP proxy requests. These two entries are used to "catch" client requests to unknown proxies (you can add more rules here for other ports). I.e., to make it possible for the clients with unknown proxy settings to work with the HotSpot system. This feature is called "Universal Proxy". If it is detected that a client is using some proxy server, the system will automatically mark those packets with the HTTP hotspot mark to work around the unknown proxy problem, as we will see later on. Note that the port used (64874) is the same as for HTTP requests in rule #9 (so both HTTP and HTTP proxy requests are processed by the same code).

12 D chain=hs-unauth action=redirect to-ports=64875 dst-port=443 protocol=tcp

HTTPS proxy is listening on the 64875 port.

13 I chain=hs-unauth action=jump jump-target=hs-smtp dst-port=25 protocol=tcp

Redirect for SMTP protocol may also be defined in the HotSpot configuration. In case it is, a redirect rule will be put in the hs-smtp chain. This is done so that users with unknown SMTP configuration would be able to send their mail through the service provider's (your) SMTP server instead of going to the [possibly unavailable outside their network of origin] SMTP server users have configured on their computers. The chain is empty by default, hence the invalid jump rule.

14 D chain=hs-auth action=redirect to-ports=64874 hotspot=http protocol=tcp

Providing HTTP proxy service for authorized users. Authenticated user requests may need to be subject to transparent proxying (the "Universal Proxy" technique and advertisement feature). This HTTP mark is put automatically on the HTTP proxy requests to the servers detected by the HotSpot HTTP proxy (the one that is listening on the 64874 port) as HTTP proxy requests for unknown proxy servers. This is done so that users that have some proxy settings would use the HotSpot gateway instead of the [possibly unavailable outside their network of origin] proxy server users have configured in their computers. This mark is also applied when an advertisement is due to be shown to the user, as well as on any HTTP requests from the users whose profile is configured to transparently proxy their requests.

15 I chain=hs-auth action=jump jump-target=hs-smtp dst-port=25 protocol=tcp

Providing SMTP proxy for authorized users (the same as in rule #13).
Packet Filtering

From /ip firewall filter print dynamic command, you can get something like this (comments follow after each of the rules):

 0 D chain=forward action=jump jump-target=hs-unauth hotspot=from-client,!auth

Any packet that traverse the router from an unauthorized client will be sent to the hs-unauth chain. The hs-unauth implements the IP-based Walled Garden filter.

 1 D chain=forward action=jump jump-target=hs-unauth-to hotspot=to-client,!auth

Everything that comes to clients through the router, gets redirected to another chain, called hs-unauth-to. This chain should reject unauthorized requests to the clients.

 2 D chain=input action=jump jump-target=hs-input hotspot=from-client

Everything that comes from clients to the router itself, gets to yet another chain, called hs-input.

 3 I chain=hs-input action=jump jump-target=pre-hs-input

Before proceeding with [predefined] dynamic rules, the packet gets to the administratively controlled pre-hs-input chain, which is empty by default, hence the invalid state of the jump rule.

 4 D chain=hs-input action=accept dst-port=64872 protocol=udp 
 5 D chain=hs-input action=accept dst-port=64872-64875 protocol=tcp 

Allow client access to the local authentication and proxy services (as described earlier).

 6 D chain=hs-input action=jump jump-target=hs-unauth hotspot=!auth

All other traffic from unauthorized clients to the router itself will be treated the same way as the traffic traversing the routers.

 7 D chain=hs-unauth action=return protocol=icmp
 8 D ;;; www.mikrotik.com
     chain=hs-unauth action=return dst-address=66.228.113.26 dst-port=80 protocol=tcp

Unlike the NAT table where only TCP-protocol related Walled Garden entries were added, in the packet filter hs-unauth chain is added to everything you have set in the /ip hotspot walled-garden ip menu. That is why although you have seen only one entry in the NAT table, there are two rules here.

 9 D chain=hs-unauth action=reject reject-with=tcp-reset protocol=tcp
10 D chain=hs-unauth action=reject reject-with=icmp-net-prohibited

Everything else that has not been white-listed by the Walled Garden will be rejected. Note the usage of TCP Reset for rejecting TCP connections.

11 D chain=hs-unauth-to action=return protocol=icmp
12 D ;;; www.mikrotik.com
     chain=hs-unauth-to action=return src-address=66.228.113.26 src-port=80 protocol=tcp

The same action as in rules #7 and #8 is performed for the packets destined to the clients (chain hs-unauth-to) as well.

13 D chain=hs-unauth-to action=reject reject-with=icmp-host-prohibited

Reject all packets to the clients with an ICMP reject message.



    Creado por Usuario desconocido (emils), actualizado por última vez por Mārtiņš S. hace 6 horas 10 min de lectura

    Summary
    User Profiles
    User Database
    Active Users
    Remote AAA
    Examples
        Add new profile
        Add new user

Summary

Sub-menu: /ppp

The MikroTik RouterOS provides scalable Authentication, Authorization, and Accounting (AAA) functionality.

Local authentication is performed using the User Database and the Profile Database. The actual configuration for the given user is composed using the respective user record from the User Database, the associated item from the Profile Database, and the item in the Profile database which is set as default for a given service the user is authenticating to. Default profile settings from the Profile database have the lowest priority while the user access record settings from the User Database have the highest priority with the only exception being particular IP addresses take precedence over IP pools in the local-address and remote-address settings, which are described later on.

Support for RADIUS authentication gives the ISP or network administrator the ability to manage PPP user access and accounting from one server throughout a large network. The MikroTik RouterOS has a RADIUS client that can authenticate for PPP, PPPoE, PPTP, L2TP, OPVN, and ISDN connections. The attributes received from the RADIUS server override the ones set in the default profile, but if some parameters are not received they are taken from the respective default profile.
User Profiles

Sub-menu: /ppp profile

PPP profiles are used to define default values for user access records stored under /ppp secret submenu. Settings in /ppp secret User Database overrides corresponding /ppp profile settings except that single IP addresses always take precedence over IP pools when specified as local-address or remote-address parameters.

Properties
address-list (string; Default: )	Address list name to which ppp assigned (on server) or received (on client) address will be added.
remote-ipv6-prefix-reuse ( no | yes; Default: no)	If "remote-ipv6-prefix-pool" is specified and includes single "/64" prefix, then prefix can be used only for a single PPP client for RADVD configuration. When this option is set to value "yes", the same prefix can be reused between all the clients using this PPP profile.
bridge (string; Default: )	Name of the bridge  interface to which ppp interface will be added as a slave port. Both tunnel endpoints (server and client) must be in the bridge to make this work, see more details in the BCP bridging manual.
bridge-horizon (integer 0..429496729; Default: )	Used split-horizon value for the dynamically created bridge port. Can be used to prevent bridging loops and isolate traffic. Set the same value for a group of ports, to prevent them from sending data to ports with the same horizon value.
bridge-learning (default | no | yes; Default: default)	Changes MAC learning behavior on the dynamically created bridge port:

    yes - enables MAC learning
    no - disables MAC learning
    default - derive this value from the interface default profile; same as yes if this is the interface default profile

bridge-path-cost (integer 1..200000000; Default: )	Used path cost for the dynamically created bridge port, used by STP/RSTP to determine the best path, used by MSTP to determine the best path between regions. This property has no effect when a bridge protocol-mode is set to none.
bridge-port-priority (integer 0..240; Default: )	Used priority for the dynamically created bridge port, used by STP/RSTP to determine the root port, used by MSTP to determine the root port between regions. This property has no effect when a bridge protocol-mode is set to none.
bridge-port-vid (integer 1..4094; Default: 1)	Used to assign PVID parameter for dynamically created interface. This property only has an effect when bridge vlan-filtering is set to yes.
bridge-port-trusted ( no | yes; Default: no)	Used to set dynamically created interface as DHCP trusted.
change-tcp-mss (yes | no | default; Default: no)	Modifies connection MSS settings (applies only for IPv4):

    yes - adjust connection MSS value
    no - do not adjust connection MSS value
    default - derive this value from the interface default profile; same as no if this is the interface default profile

comment (string; Default: )	Profile comment
dhcpv6-lease-time (string; Default: )	Lease time can be set starting from 7.20ab202, by default time is set to 1d.
dhcpv6-pd-pool (string; Default: )	Name of the IPv6 pool which will be used by dynamically created DHCPv6 server when client connects. Read more >>
dhcpv6-use-radius ( no | yes; Default: no)	Specifies value for "use-radius" option selected for dynamically generated DHCPv6 PD servers.
dns-server (IP; Default: )	IP address of the DNS server that is supplied to PPP clients
idle-timeout (time; Default: )	Specifies the amount of time after which the link will be terminated if there is no activity present. Timeout is not set by default
incoming-filter (string; Default: )	Firewall chain name for incoming packets. The specified chain gets control of each packet coming from the client. The ppp chain should be manually added and rules with action=jump jump-target=ppp should be added to other relevant chains for this feature to work. For more information look at the examples section
insert-queue-before (bottom | first | queue name ; Default: )	Inserts new queue as the last, first, or before a specified queue
interface-list (interface list name; Default: )	Specifies interface list to which profile interfaces will be added
local-address (IP address | pool; Default: )	Tunnel address or name of the pool from which the address is assigned to ppp interface locally
name (string; Default: )	PPP profile name
on-up (script; Default: )	Execute script on user login-event. These are available variables that are accessible for the event script:

    user
    local-address
    remote-address
    caller-id
    called-id
    interface

The interface variable will return interface id value, not interface name.
on-down (script; Default: )	Execute script on the user logging off. See on-up for more details
only-one (yes | no | default; Default: default)	Defines whether a user is allowed to have more than one ppp session at a time

    yes - a user is not allowed to have more than one ppp session at a time
    no - the user is allowed to have more than one ppp session at a time
    default - derive this value from the interface default profile; same as no if this is the interface default profile

outgoing-filter (string; Default: )	Firewall chain name for outgoing packets. The specified chain gets control for each packet going to the client. The PPP chain should be manually added and rules with action=jump jump-target=ppp should be added to other relevant chains for this feature to work. For more information look at the Examples section.
parent-queue (none | queue name; Default: )	Specifies parent queue 

queue-type (default | ethernet-default | wireless-default | synchronous-default |  hotspot-default | pcq-upload-default | pcq-download-default | only-hardware-queue | multi-queue-ethernet-default | default-small | custom queue type name ; Default: )
	Specifies queue type. Starting from 7.19 it is possible to specify queue type for rx/tx separately, clients "upload" and "download". Use / to configure separate queue type, first is rx queue type, and then tx queue type.
rate-limit (string; Default: )	Rate limitation in form of rx-rate[/tx-rate] [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold] [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so "rx" is client upload, and "tx" is client download). All rates are measured in bits per second, unless followed by an optional 'k' suffix (kilobits per second) or 'M' suffix (megabits per second). If tx-rate is not specified, rx-rate serves as tx-rate too. The same applies to tx-burst-rate, tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and tx-burst-threshold are not specified (but burst-rate is specified), rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time and tx-burst-time are not specified, 1s is used as default. Priority takes values 1..8, where 1 implies the highest priority, but 8 - the lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and tx-rate values are used. The rx-rate-min and tx-rate-min values can not exceed rx-rate and tx-rate values.
remote-address (IP; Default: )	Tunnel address or name of the pool from which address is assigned to remote ppp interface.
remote-ipv6-prefix-pool (string | none; Default: none)	Assign a prefix from the IPv6 pool to the client and install the corresponding IPv6 route.
session-timeout (time; Default: )	Maximum time the connection can stay up. By default, no time limit is set.
use-compression (yes | no | default; Default: default)	Specifies whether to use data compression or not.

    yes - enable data compression
    no - disable data compression
    default - derive this value from the interface default profile; same as no if this is the interface default profile

This setting does not affect OVPN tunnels.
use-encryption (yes | no | default | require; Default: default)	Specifies whether to use data encryption or not.

    yes - enable data encryption
    no - disable data encryption
    default - derive this value from the interface default profile; same as no if this is the interface default profile
    require - explicitly requires encryption

This setting does not work on OVPN and SSTP tunnels.
use-ipv6 (yes | no | default | require; Default: default)	Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed.

    yes - enable IPv6 support
    no - disable IPv6 support
    default - derive this value from the interface default profile; same as no if this is the interface default profile
    require - explicitly requires IPv6 support

use-mpls (yes | no | default | require; Default: default)	Specifies whether to allow MPLS over PPP.

    yes - enable MPLS support
    no - disable MPLS support
    default - derive this value from the interface default profile; same as no if this is the interface default profile
    require - explicitly requires MPLS support

use-upnp (yes | no | default ; Default: default)	

Specifies whether to allow UPnP 

    yes - enable UPnP 
    no - disable UPnP 
    default - derive this value from the interface default profile; same as no if this is the interface default profile

wins-server (IP address; Default: )	IP address of the WINS server to supply to Windows clients

Notes

The two default profiles cannot be removed:
[admin@rb13] ppp profile> print
Flags: * - default
 0 * name="default" use-compression=no use-encryption=no only-one=no
     change-tcp-mss=yes
 1 * name="default-encryption" use-compression=default use-encryption=yes
     only-one=default change-tcp-mss=default
[admin@rb13] ppp profile>

incoming-filter and outgoing-filter arguments add dynamic jump rules to chain ppp, where the jump-target argument will be equal to incoming-filter or outgoing-filter argument in the profile. Therefore, chain ppp should be manually added before changing these arguments.

only-one parameter is ignored if RADIUS authentication is used.
PPP tunnels uses LCP protocol for MTU negotiation, it happens right when connection is established. Framed MTU attribute is not supported, as it is sent only after authentication with Radius.
User Database

Sub-menu: /ppp secret

PPP User Database stores PPP user access records with PPP user profile assigned to each user.

Properties
caller-id (string; Default: )	For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must connect from. For ISDN it is the caller's number (that may or may not be provided by the operator) the client may dial-in from
comment (string; Default: )	Short description of the user.
disabled (yes | no; Default: no)	Whether secret will be used.
limit-bytes-in (integer; Default: 0)	The maximum amount of bytes for a session that the client can upload.
limit-bytes-out (integer; Default: 0)	The maximum amount of bytes for a session that the client can download.
local-address (IP address; Default: )	IP address that will be set locally on ppp interface.
name (string; Default: )	Name used for authentication
password (string; Default: )	Password used for authentication
profile (string; Default: default)	Which user profile to use
remote-address (IP; Default: )	IP address that will be assigned to the remote ppp interface.
remote-ipv6-prefix (IPv6 prefix; Default: )	IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.
routes (string; Default: )	Routes that appear on the server when the client is connected. The route format is: dst-address gateway metric (for example, 10.1.0.0/ 24 10.0.0.1 1). Other syntax is not acceptable since it can be represented incorrectly. Several routes may be specified and separated with commas. This parameter will be ignored for OpenVPN.
service (any | async | isdn | l2tp | pppoe | pptp | ovpn | sstp; Default: any)	Specifies the services that a particular user will be able to use.
Active Users

Sub-menu: /ppp active

This submenu allows monitoring active (connected) users.

/ppp active print command will show all currently connected users.

/ppp active print stats command will show received/sent bytes and packets

Properties
address (IP address)	The IP address the client got from the server
bytes (integer)	Amount of bytes transferred through this connection. The first figure represents the amount of transmitted traffic from the router's point of view, while the second one shows the amount of received traffic.
caller-id (string)	For PPTP and L2TP it is the IP address the client connected from. For PPPoE, it is the MAC address the client connected from.
encoding (string)	Shows encryption and encoding (separated with '/' if asymmetric) being used in this connection
limit-bytes-in (integer)	The maximum amount of bytes the user is allowed to send to the router.
limit-bytes-out (integer)	The maximum amount of bytes the user is allowed to send to the client.
name (string)	User name supplied at authentication stage
packets (integer/integer)	Amount of packets transferred through this connection. The first figure represents the amount of transmitted traffic from the router's point of view, while the second one shows the amount of received traffic
service (async | isdn | l2tp | pppoe | pptp | ovpn | sstp)	Type of service the user is using.
session-id (string)	Shows unique client identifier.
uptime (time)	User's uptime
Remote AAA

Sub-menu: /ppp aaa

Settings in this submenu allows to set RADIUS accounting and authentication. Note that the RADIUS user database is consulted only if the required username is not found in the local user database.

Properties
accounting (yes | no; Default: yes)	Enable RADIUS accounting
interim-update (time; Default: 0s)	Interim-Update time interval
use-radius (yes | no; Default: no)	Enable user authentication via RADIUS. If an entry in the local secret database is not found, then the client will be authenticated via RADIUS.
enable-ipv6-accounting (yes | no; Default: no)	Enable IPv6 separate accounting. PPP service counts Layer2, IPv4 and IPv6 data all together when reporting network usage statistics to the RADIUS server by default. If it is required to differ IPv4 and IPv6 traffic, then this option can be enabled. Prerequisites for it to work are that the prefix must be assigned to the client through PPP service and also rate-limit must be provided. Dynamically created queue statistics will be used as counters for IPv6 data, which then will be included in accounting packets as separate IPv6 statistics attributes. This will not work for prefixes assigned by dynamically created DHCPv6 server due to provided prefix pool or PPP/Profile configuration. Then prefix assignment is handled by DHCP service, not PPP, thus accounting can not be managed by PPP service.
Examples
Add new profile

To add the profile ex that assigns the router itself the 10.0.0.1 address, and the addresses from the ex pool to the clients, filtering traffic coming from clients through mypppclients chain:
[admin@rb13] ppp profile> add name=ex local-address=10.0.0.1 remote-address=ex incoming-filter=mypppclients
[admin@rb13] ppp profile> print
Flags: * - default
 0 * name="default" use-compression=no use-vj-compression=no use-encryption=no only-one=no
     change-tcp-mss=yes
 1   name="ex" local-address=10.0.0.1 remote-address=ex use-compression=default
     use-vj-compression=default use-encryption=default only-one=default change-tcp-mss=default
     incoming-filter=mypppclients
 2 * name="default-encryption" use-compression=default use-vj-compression=default use-encryption=yes
     only-one=default change-tcp-mss=default
[admin@rb13] ppp profile>
Add new user

To add the user ex with password lkjrht and profile ex available for PPTP service only, enter the following command:
[admin@rb13] ppp secret> add name=ex password=lkjrht service=pptp profile=ex
[admin@rb13] ppp secret> print
Flags: X - disabled
 #   NAME                SERVICE CALLER-ID         PASSWORD          PROFILE            REMOTE-ADDRESS
 0   ex                  pptp                      lkjrht            ex                 0.0.0.0
[admin@rb13] ppp secret>






    Creado por Normunds R., actualizado por última vez por Sergejs B. el jun 04, 2025 13 min de lectura

Summary

RADIUS, short for Remote Authentication Dial-In User Service, is a remote server that provides authentication and accounting facilities to various network appliances. RADIUS authentication and accounting allows the ISP or network administrator to manage PPP user access and accounting from one server throughout a large network. The MikroTik RouterOS has a RADIUS client that can authenticate router's local users, HotSpot, PPP, PPPoE, PPTP, L2TP, OVPN, SSTP, IPsec and ISDN connections. The attributes received from the RADIUS server override the ones set in the default profile, but if some parameters are not received they are taken from the respective default profile.

The RADIUS server database is consulted only if no matching user access record is found in the router's local database.

If RADIUS accounting is enabled, accounting information is also sent to the RADIUS server default for that service.
RADIUS Client
Sub-menu: /radius

This sub-menu allows adding and removing RADIUS clients. 

 The order of added items in this list is significant.
Properties
accounting-backup (yes | no; Default: no)	Whether the configuration is for the backup RADIUS server
accounting-port (integer [1..65535]; Default: 1813)	RADIUS server port used for accounting
address (IPv4/IPv6 address; Default: 0.0.0.0)	

IPv4 or IPv6 address of RADIUS server.

The following formats are accepted:

- ipv4
- ipv4@vrf
- ipv6
- ipv6@vrf
authentication-port (integer [1..65535]; Default: 1812)	RADIUS server port used for authentication.
called-id (string; Default: )	Value depends on Point-to-Point protocol: PPPoE - service name, PPTP - server's IP address, L2TP - server's IP address.
certificate (string; Default: )	Certificate file to use for communicating with RADIUS Server with RadSec enabled.
comment (string; Default: )	
disabled (yes | no; Default: no)	
domain (string; Default: )	Microsoft Windows domain of client passed to RADIUS servers that require domain validation.
protocol (radsec | udp; Default: udp)	Specifies the protocol to use when communicating with the RADIUS Server.
require-message-auth (no | yes-for-request-resp Default: yes-for-request-resp)	Specifies if Message-Authenticator attributes are required.
realm (string; Default: )	Explicitly stated realm (user domain), so the users do not have to provide proper ISP domain name in the user name.
secret (string; Default: )	The shared secret used to access the RADIUS server.
service (ppp|login|hotspot|wireless|dhcp|ipsec|dot1x; Default: )	Router services that will use this RADIUS server:

    hotspot - HotSpot authentication service
    login - router's local user authentication
    ppp - Point-to-Point clients authentication
    wireless - wireless client authentication
    dhcp - DHCP protocol client authentication (client's MAC address is sent as User-Name)
    ipsec - ipsec client authentification
    dot1x - dot1x authentification

src-address (ipv4/ipv6 address; Default: 0.0.0.0)	Source IP/IPv6 address of the packets sent to the RADIUS server
timeout (time; Default: 100ms)	Timeout after which the request should be resent, for example, "/radius set timeout=300ms numbers=0"

When the RADIUS server is authenticating the user with CHAP, MS-CHAPv1, MS-CHAPv2, it is not using a shared secret, the secret is used only in the authentication reply, and the router (RADIUS client) verifies it. So if you have the wrong shared secret, the RADIUS server will accept a request, but the router won't accept the reply. You can see that with "/radius monitor" command, the "bad-replies" number should increase whenever somebody tries to connect.

If RadSec is enabled, make sure your RADIUS Server is using "radsec" as the shared secret, otherwise, the RADIUS Server will not be able to decrypt data correctly (unprintable characters). With RadSec RouterOS forces the shared secret to "radsec" regardless of what has been set manually. For more details see - RFC6614.
Example

To set up a RADIUS Client for HotSpot and PPP services that will authenticate against a RADIUS Server (10.0.0.3), you need to do the following:
[admin@MikroTik] > /radius add service=hotspot,ppp address=10.0.0.3 secret=ex
[admin@MikroTik] > /radius print
Flags: X - disabled
# SERVICE CALLED-ID DOMAIN ADDRESS SECRET
0 ppp,hotspot 

To set up a RADIUS Client with RadSec, you need to do the following:
[admin@MikroTik] > /radius add service=hotspot,ppp address=10.0.0.3 secret=radsec protocol=radsec certificate=client.crt
[admin@MikroTik] > /radius print
Flags: X - disabled
# SERVICE CALLED-ID DOMAIN ADDRESS SECRET
0 ppp,hotspot 10.0.0.3 radsec

Make sure the specified certificate is trusted. 

To view RADIUS Client statistics, you need to do the following:
[admin@MikroTik] > /radius monitor 0
pending: 0
requests: 10
accepts: 4
rejects: 1
resends: 15
timeouts: 5
bad-replies: 0
last-request-rtt: 0s

Make sure you enable RADIUS authentication for the desired services:
/ppp aaa set use-radius=yes
/ip hotspot profile set default use-radius=yes
Connection Terminating from RADIUS

Sub-menu: /radius incoming

This facility supports unsolicited messages sent from the RADIUS server. Unsolicited messages extend RADIUS protocol commands, that allow terminating a session that has already been connected from the RADIUS server. For this purpose, DM (Disconnect-Messages) is used. Disconnect messages cause a user session to be terminated immediately. 

RouterOS doesn't support POD (Packet of Disconnect) the other RADIUS access request packet that performs a similar function as Disconnect Messages
Properties
accept (yes | no; Default: no)	Whether to accept unsolicited messages
port (integer; Default: 1700)	The port number to listen for the requests on

vrf (VRF name; default value: main)
	Set VRF on which service is listening for incoming connections
Supported RADIUS Attributes

Here you can download the RADIUS reference dictionary, that includes all supported RADIUS attributes by MikroTik device. This file is designed for FreeRADIUS, but may also be used by other RADIUS servers. Note, it may conflict with the default configuration file of your RADIUS server, correct the configuration, not the dictionary, as no other attributes are supported by MikroTik RouterOS. There is also the RADIUS MikroTik specific dictionary that can be included in an existing dictionary to support MikroTik vendor-specific attributes.

Below you will find description about attributes and how they are used on MikroTik devices during communication with RADIUS.
Definitions

    PPPs - PPP,PPTP, PPPoE
    default configuration -settings in default profile (for PPPs) or HotSpot server settings (for HotSpot)

Access-Request packet

    Service-Type - always is "Framed" (only for PPPs)
    Framed-Protocol - always is "PPP" (only for PPPs)
    NAS-Identifier - router's identity name
    NAS-IP-Address - IP address of the router itself
    NAS-Port - this Attribute indicates the physical port number of the NAS which is authenticating the user.
    Acct-Session-Id - unique session ID. The first two symbols of session ID represent service (PPP, Hotspot, etc.). The next symbol is incremented on each reboot. The last group of symbols is incremented on each new session. This means, that you can not get the same ID for 1 million re-connects on the same boot for the same RADIUS type service. If you lose session stop message and RADIUS server does still keep the session open, but then receives another session start message, then it must be aware that stop message was lost, close old session and start a new session.
    NAS-Port-Type - async PPP - "Async"; PPTP and L2TP - "Virtual"; PPPoE - "Ethernet"; ISDN - "ISDN Sync"; HotSpot - "Ethernet | Cable | Wireless-802.11" (according to the value of nas-port-type parameter in /ip hotspot profile)
    Calling-Station-Id - PPPoE and HotSpot- client MAC address in capital letters; PPTP and L2TP - client public IP address
    Called-Station-Id - PPPoE - service name; PPTP and L2TP - server IP address; HotSpot - name of the HotSpot server
    NAS-Port-Id - async PPP - serial port name; PPPoE - ethernet interface name on which server is running; HotSpot - name of the physical HotSpot interface (if bridged, the bridge port name is showed here); not present for ISDN, PPTP and L2TP
    Framed-IP-Address - IP address of HotSpot client after Universal Client translation
    Mikrotik-Host-IP - IP address of HotSpot client before Universal Client translation (the original IP address of the client)
    User-Name - client login name
    MS-CHAP-Domain - User domain, if present
    Mikrotik-Realm - If it is set in /radius menu, it is included in every RADIUS request as Mikrotik-Realm attribute. If it is not set, the same value is sent as in MS-CHAP-Domain attribute (if MS-CHAP-Domain is missing, Realm is not included neither)
    WISPr-Location-ID - text string specified in radius-location-id property of the HotSpot server
    WISPr-Location-Name - text string specified in radius-location-name property of the HotSpot server
    WISPr-Logoff-URL - full link to the login page (for example, http://10.48.0.1/lv/logout)

Depending on authentication methods (NOTE: HotSpot uses CHAP by default and may use also PAP if unencrypted passwords are enabled, it can not use MSCHAP).

    User-Password - encrypted password (used with PAP authentication)
    CHAP-Password, CHAP-Challenge - encrypted password and challenge (used with CHAP authentication)
    MS-CHAP-Response, MS-CHAP-Challenge - encrypted password and challenge (used with MS-CHAPv1 authentication)
    MS-CHAP2-Response, MS-CHAP-Challenge - encrypted password and challenge (used with MS-CHAPv2 authentication)

Access-Accepts packet

    Framed-IP-Address - IP address given to client. If address belongs to 127.0.0.0/8 or 224.0.0.0/3 networks, IP pool is used from the default profile to allocate client IP address. If Framed-IP-Address is specified, Framed-Pool is ignored
    Framed-IP-Netmask - client netmask. PPPs - if specified, a route will be created to the network Framed-IP-Address belongs to via the Framed-IP-Address gateway; HotSpot - ignored by HotSpot
    Framed-Pool - IP pool name (on the router) from which to get IP address for the client. If Framed-IP-Address is specified, this attribute is ignored
    Framed-IPv6-Prefix - IPv6 prefix assigned for the client
    Mikrotik-Delegated-IPv6-Pool - IPv6 pool used for Prefix Delegation
    Delegated-IPv6-Prefix - IPv6 Prefix
    Delegated-IPv6-Prefix-Pool - IPv6 Prefix pool used for Prefix Delegation

NOTE: if Framed-IP-Address or Framed-Pool is specified it overrides remote-address in default configuration.

    Idle-Timeout - overrides idle-timeout in the default configuration
    Session-Timeout - overrides session-timeout in the default configuration
    Port-Limit - maximal mumber of simultaneous connections using the same username (overrides te shared-users property of the HotSpot user profile)
    Class - cookie, will be included in Accounting-Request unchanged
    Framed-Route - routes to add on the server. Format is specified in RFC 2865 (Ch. 5.22), can be specified as many times as needed
    Filter-Id - firewall filter chain name. It is used to make a dynamic firewall rule. Firewall chain name can have suffix .in or .out, that will install rule only for incoming or outgoing traffic. Multiple Filter-id can be provided, but only last ones for incoming and outgoing is used. For PPPs - filter rules in ppp chain that will jump to the specified chain, if a packet has come to/from the client (that means that you should first create a ppp chain and make jump rules that would put actual traffic to this chain). The same applies for HotSpot, but the rules will be created in hotspot chain
    Mikrotik-Mark-Id - firewall mangle chain name (HotSpot only). The MikroTik RADIUS client upon receiving this attribute creates a dynamic firewall mangle rule with action=jump chain=hotspot and jump-target equal to the atribute value. Mangle chain name can have suffixes .in or .out, that will install rule only for incoming or outgoing traffic. Multiple Mark-id attributes can be provided, but only last ones for incoming and outgoing is used.
    Acct-Interim-Interval - interim-update for RADIUS client. PPP - if 0 uses the one specified in RADIUS client; HotSpot - only respected if radius-interim-update=received in HotSpot server profile
    MS-MPPE-Encryption-Policy - require-encryption property (PPPs only)
    MS-MPPE-Encryption-Types - use-encryption property, non-zero value means to use encryption (PPPs only)
    Ascend-Data-Rate - tx/rx data rate limitation if multiple attributes are provided, first limits tx data rate, second - rx data rate. If used together with Ascend-Xmit-Rate, specifies rx rate. 0 if unlimited. Ignored if Rate-Limit attribute is present
    Ascend-Xmit-Rate - tx data rate limitation. It may be used to specify tx limit only instead of sending two sequental Ascend-Data-Rate attributes (in that case Ascend-Data-Rate will specify the receive rate). 0 if unlimited. Ignored if Rate-Limit attribute is present
    MS-CHAP2-Success - auth. response if MS-CHAPv2 was used (for PPPs only)
    MS-MPPE-Send-Key, MS-MPPE-Recv-Key - encryption keys for encrypted PPPs provided by RADIUS server only is MS-CHAPv2 was used as authentication (for PPPs only)
    Ascend-Client-Gateway - client gateway for DHCP-pool HotSpot login method (HotSpot only)
    Mikrotik-Recv-Limit - total receive limit in bytes for the client
    Mikrotik-Recv-Limit-Gigawords - 4G (2^32) bytes of total receive limit (bits 32..63, when bits 0..31 are delivered in Mikrotik-Recv-Limit)
    Mikrotik-Xmit-Limit - total transmit limit in bytes for the client
    Mikrotik-Xmit-Limit-Gigawords - 4G (2^32) bytes of total transmit limit (bits 32..63, when bits 0..31 are delivered in Mikrotik-Recv-Limit)
    Mikrotik-Wireless-Forward - not forward the client's frames back to the wireless infrastructure if this attribute is set to "0" (Wireless only)
    Mikrotik-Wireless-Skip-Dot1x - disable 802.1x authentication for the particulat wireless client if set to non-zero value (Wireless only)
    Mikrotik-Wireless-Enc-Algo - WEP encryption algorithm: 0 - no encryption, 1 - 40-bit WEP, 2 - 104-bit WEP (Wireless only)
    Mikrotik-Wireless-Enc-Key - WEP encruption key for the client (Wireless only)
    Mikrotik-Wireless-VLANID - VLAN ID for the client (Wireless only)
    Mikrotik-Wireless-VLANID-type - VLAN ID type for the client. 0 - 802.1q tag and 1 - 802.1ad tag (Wireless only)
    Mikrotik-Switching-Filter - allows to create dynamic switch rules, when authenticating clients with dot1x server.
    Mikrotik-Rate-Limit - Datarate limitation for clients. Format is: rx-rate[/tx-rate] [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold] [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so "rx" is client upload, and "tx" is client download). All rates should be numbers with optional 'k' (1,000s) or 'M' (1,000,000s). If tx-rate is not specified, rx-rate is as tx-rate too. Same goes for tx-burst-rate and tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and tx-burst-threshold are not specified (but burst-rate is specified), rx-rate and tx-rate is used as burst thresholds. If both rx-burst-time and tx-burst-time are not specified, 1s is used as default. Priority takes values 1..8, where 1 implies the highest priority, but 8 - the lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and tx-rate values are used. The rx-rate-min and tx-rate-min values can not exceed rx-rate and tx-rate values.
    Mikrotik-Group - Router local user group name (defines in /user group) for local users; HotSpot default profile for HotSpot users; PPP default profile name for PPP users.
    Mikrotik-Advertise-URL - URL of the page with advertisements that should be displayed to clients. If this attribute is specified, advertisements are enabled automatically, including transparent proxy, even if they were explicitly disabled in the corresponding user profile. Multiple attribute instances may be send by RADIUS server to specify additional URLs which are choosen in round robin fashion.
    Mikrotik-Advertise-Interval - Time interval between two adjacent advertisements. Multiple attribute instances may be send by RADIUS server to specify additional intervals. All interval values are treated as a list and are taken one-by-one for each successful advertisement. If end of list is reached, the last value is continued to be used.
    WISPr-Redirection-URL - URL, which the clients will be redirected to after successfull login
    WISPr-Bandwidth-Min-Up - minimal datarate (CIR) provided for the client upload
    WISPr-Bandwidth-Min-Down - minimal datarate (CIR) provided for the client download
    WISPr-Bandwidth-Max-Up - maxmal datarate (MIR) provided for the client upload
    WISPr-Bandwidth-Max-Down - maxmal datarate (MIR) provided for the client download
    WISPr-Session-Terminate-Time - time, when the user should be disconnected; in "YYYY-MM-DDThh:mm:ssTZD" form, where Y - year; M - month; D - day; T - separator symbol (must be written between date and time); h - hour (in 24 hour format); m - minute; s - second; TZD - time zone in one of these forms: "+hh:mm", "+hhmm", "-hh:mm", "-hhmm".

The received attributes override the default ones (set in the default profile), but if an attribute is not received from RADIUS server, the default one is to be used.  Rate-Limit takes precedence over all other ways to specify data rate for the client. Ascend data rate attributes are considered second; and WISPr attributes takes the last precedence.

Here are some Rate-Limit examples:

    128k - rx-rate=128000, tx-rate=128000 (no bursts)
    64k/128M - rx-rate=64000, tx-rate=128000000
    64k 256k - rx/tx-rate=64000, rx/tx-burst-rate=256000, rx/tx-burst-threshold=64000, rx/tx-burst-time=1s
    64k/64k 256k/256k 128k/128k 10/10 - rx/tx-rate=64000, rx/tx-burst-rate=256000, rx/tx-burst-threshold=128000, rx/tx-burst-time=10s

Accounting-Request packet

The accounting request carries the same attributes as Access Request, plus these ones:

    Acct-Status-Type - Start, Stop, or Interim-Update
    Acct-Authentic - either authenticated by the RADIUS or Local authority (PPPs only)
    Class - RADIUS server cookie, as received in Access-Accept
    Acct-Delay-Time - how long does the router try to send this Accounting-Request packet

Stop and Interim-Update Accounting-Request packet

Additionally to the accounting start request, the following messages will contain the following attributes:

    Acct-Session-Time - connection uptime in seconds
    Acct-Input-Octets - bytes received from the client
    Acct-Input-Gigawords - 4G (2^32) bytes received from the client (bits 32..63, when bits 0..31 are delivered in Acct-Input-Octets)
    Acct-Input-Packets - nubmer of packets received from the client
    Acct-Output-Octets - bytes sent to the client
    Acct-Output-Gigawords - 4G (2^32) bytes sent to the client (bits 32..63, when bits 0..31 are delivered in Acct-Output-Octets)
    Acct-Output-Packets - number of packets sent to the client

Stop Accounting-Request packet

These packets will, additionally to the Interim Update packets, have:

    Acct-Terminate-Cause - session termination cause (see RFC 2866 ch. 5.10)

Change of Authorization

RADIUS disconnect and Change of Authorization (according to RFC3576) are supported as well. These attributes may be changed by a CoA request from the RADIUS server:

    Mikrotik-Group
    Mikrotik-Recv-Limit
    Mikrotik-Xmit-Limit
    Mikrotik-Rate-Limit
    Ascend-Data-Rate (only if Mikrotik-Rate-Limit is not present)
    Ascend-XMit-Rate (only if Mikrotik-Rate-Limit is not present)
    Mikrotik-Mark-Id
    Filter-Id
    Mikrotik-Advertise-Url
    Mikrotik-Advertise-Interval
    Session-Timeout
    Idle-Timeout
    Port-Limit

Note that it is not possible to change IP address, pool or routes that way - for such changes a user must be disconnected first.
MikroTik Specific RADIUS Attribute Numeric Values
MIKROTIK_RECV_LIMIT	14988	1	
MIKROTIK_XMIT_LIMIT	14988	2	
MIKROTIK_GROUP	14988	3	
MIKROTIK_WIRELESS_FORWARD	14988	4	
MIKROTIK_WIRELESS_SKIPDOT1X	14988	5	
MIKROTIK_WIRELESS_ENCALGO	14988	6	
MIKROTIK_WIRELESS_ENCKEY	14988	7	
MIKROTIK_RATE_LIMIT	14988	8	
MIKROTIK_REALM	14988	9	
MIKROTIK_HOST_IP	14988	10	
MIKROTIK_MARK_ID	14988	11	
MIKROTIK_ADVERTISE_URL	14988	12	
MIKROTIK_ADVERTISE_INTERVAL	14988	13	
MIKROTIK_RECV_LIMIT_GIGAWORDS	14988	14	
MIKROTIK_XMIT_LIMIT_GIGAWORDS	14988	15	
MIKROTIK_WIRELESS_PSK	14988	16	
MIKROTIK_TOTAL_LIMIT	14988	17	
MIKROTIK_TOTAL_LIMIT_GIGAWORDS	14988	18	
MIKROTIK_ADDRESS_LIST	14988	19	
MIKROTIK_WIRELESS_MPKEY	14988	20	
MIKROTIK_WIRELESS_COMMENT	14988	21	
MIKROTIK_DELEGATED_IPV6_POOL	14988	22	
MIKROTIK_DHCP_OPTION_SET	14988	23	
MIKROTIK_DHCP_OPTION_PARAM_STR1	14988	24	
MIKROTIK_DHCP_OPTION_PARAM_STR2	14988	25	
MIKROTIK_WIRELESS_VLANID	14988	26	
MIKROTIK_WIRELESS_VLANIDTYPE	14988	27	
MIKROTIK_WIRELESS_MINSIGNAL	14988	28	
MIKROTIK_WIRELESS_MAXSIGNAL	14988	29	
All Supported Attribute Numeric Values
Acct-Authentic	
	45	RFC 2866
Acct-Delay-Time	
	41	RFC 2866
Acct-Input-Gigawords	
	52	RFC 2869
Acct-Input-Octets	
	42	RFC 2866
Acct-Input-Packets	
	47	RFC 2866
Acct-Interim-Interval	
	85	RFC 2869
Acct-Output-Gigawords	
	53	RFC 2869
Acct-Output-Octets	
	43	RFC 2866
Acct-Output-Packets	
	48	RFC 2866
Acct-Session-Id	
	44	RFC 2866
Acct-Session-Time	
	46	RFC 2866
Acct-Status-Type	
	40	RFC 2866
Acct-Terminate-Cause	
	49	RFC 2866
Ascend-Client-Gateway	529	132	
Ascend-Data-Rate	529	197	
Ascend-Xmit-Rate	529	255	
Called-Station-Id	
	30	RFC 2865
Calling-Station-Id	
	31	RFC 2865
CHAP-Challenge	
	60	RFC 2866
CHAP-Password	
	3	RFC 2865
Class	
	25	RFC 2865
Filter-Id	
	11	RFC 2865
Framed-Compression	
	53	RFC 2865
Framed-IP-Address	
	8	RFC 2865
Framed-IP-Netmask	
	9	RFC 2865
Framed-IPv6-Prefix	
	97	RFC 3162
Framed-Mtu	
	52	RFC 2869
Framed-Pool	
	88	RFC 2869
Framed-Protocol	
	7	RFC 2865
Framed-Route	
	22	RFC 2865
Framed-Routing	
	50	RFC 2865
Idle-Timeout	
	28	RFC 2865
MS-CHAP-Challenge	311	11	RFC 2548
MS-CHAP-Domain	311	10	RFC 2548
MS-CHAP-Response	311	1	RFC 2548
MS-CHAP2-Response	311	25	RFC 2548
MS-CHAP2-Success	311	26	RFC 2548
MS-MPPE-Encryption-Policy	311	7	RFC 2548
MS-MPPE-Encryption-Types	311	8	RFC 2548
MS-MPPE-Recv-Key	311	17	RFC 2548
MS-MPPE-Send-Key	311	16	RFC 2548
NAS-Identifier	
	32	RFC 2865
NAS-Port	
	5	RFC 2865
NAS-IP-Address	
	4	RFC 2865
NAS-Port-Id	
	87	RFC 2869
NAS-Port-Type	
	61	RFC 2865
Port-Limit	
	62	RFC 2865
Redback-Agent-Remote-Id	2352	96	
Redback-Agent-Circuit-Id	2352	97	
Service-Type	
	6	RFC 2865
Session-Timeout	
	27	RFC 2865
User-Name	
	1	RFC 2865
User-Password	
	2	RFC 2865
WISPr-Bandwidth-Max-Down	14122	8	wi-fi.org
WISPr-Bandwidth-Max-Up	14122	7	wi-fi.org
WISPr-Bandwidth-Min-Down	14122	6	wi-fi.org
WISPr-Bandwidth-Min-Up	14122	5	wi-fi.org
WISPr-Location-Id	14122	1	wi-fi.org
WISPr-Location-Name	14122	2	wi-fi.org
WISPr-Logoff-URL	14122	3	wi-fi.org
WISPr-Redirection-URL	14122	4	wi-fi.org
WISPr-Session-Terminate-Time	14122	9	wi-fi.org
WISPr-Session-Terminate-End-Of-Day	14122	10	wi-fi.org
WISPr-Billing-Class-Of-Service	14122	11	wi-fi.org




    Creado por Māris B., actualizado por última vez por Matīss O. el mar 27, 2025 6 min de lectura

    Summary
    User Settings
    User Groups
        Properties
        Default groups
    Router Users
        Properties
        Actions
        Notes
    Monitoring Active Users
        Properties
        Request logout
    Remote AAA
        Properties
    SSH Keys 
        Public keys
            Import public SSH key
            Add public SSH key
        Private keys
            Import private SSH key

Summary

MikroTik RouterOS router user facility manages the users connecting the router from any of the Management tools. The users are authenticated using either a local database or a designated RADIUS server. Each user is assigned to a user group, which denotes the rights of this user. A group policy is a combination of individual policy items.

In case the user authentication is performed using RADIUS, the RADIUS client should be previously configured.
User Settings

The settings submenu allows to control the password complexity requirements of the router users. 
minimum-password-length (integer; 0..4294967295; Default: )	Specifies the minimum character length of the user password
minimum-categories (integer; 0..4; Default: )	

Specifies the complexity requirements of the password, with categories being uppercase, lowercase, digit, symbol. 


User Groups

The router user groups provide a convenient way to assign different permissions and access rights to different user classes. 
Properties
name (string; Default: )	The name of the user group
policy (local | telnet | ssh | ftp | reboot | read | write | policy | test | winbox | password | web | sniff | sensitive | api | rest-api | romon ; Default: none)	List of allowed policies:


Login policies:

    local - policy that grants rights to log in locally via console
    telnet - policy that grants rights to log in remotely via telnet
    ssh - policy that grants rights to log in remotely via secure shell protocol
    web - policy that grants rights to log in remotely via WebFig.
    winbox - policy that grants rights to log in remotely via WinBox and bandwidth test authentication
    password - policy that grants rights to change the password
    api - grants rights to access router via API.
    rest-api - grants rights to access the router via REST API.
    ftp - policy that grants full rights to log in remotely via FTP.  Allows to read/write/erase files and to transfer files from/to the router. Should be used together with read/write policies.
    romon - policy that grants rights to connect to the RoMon server.

Config Policies:

    reboot - policy that allows rebooting the router
    read - policy that grants read access to the router's configuration. All console commands that do not alter the router's configuration are allowed. Doesn't affect FTP
    write - policy that grants write access to the router's configuration, except for user management. This policy does not allow to read the configuration, so make sure to enable read policy as well
    policy - policy that grants user management rights. Should be used together with the write policy. Allows also to see global variables created by other users (requires also 'test' policy). Allows to design skins (requires also "sensitive" policy).
    test - policy that grants rights to run ping, traceroute, bandwidth-test, wireless scan, snooper, fetch, email and other test commands
    sensitive - grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not displayed.
    sniff - policy that grants rights to use packet sniffer tool, torch tool, traffic generator.

skin (name; Default: default)	Used skin for WebFig
Default groups

There are three default system groups which cannot be deleted:
[admin@MikroTik] > /user group print 
0 name="read" policy=local,telnet,ssh,reboot,read,test,winbox,password,web,sniff,sensitive,api,romon,rest-api,!ftp,!write,!policy skin=default 

1 name="write" policy=local,telnet,ssh,reboot,read,write,test,winbox,password,web,sniff,sensitive,api,romon,rest-api,!ftp,!policy skin=default 

2 name="full" policy=local,telnet,ssh,ftp,reboot,read,write,policy,test,winbox,password,web,sniff,sensitive,api,romon,rest-api skin=default 

Please note, that even the "read" group includes sensitive, reboot, and other important policies, meaning that this group should not be given to untrusted users. For truly limited groups, make a custom group, defining specific policies. All groups have access to file operations. Exclamation sign '!' just before the policy item name means NOT.
Router Users

The router user database stores information such as username, password, allowed access addresses, and group about router management personnel. 
Properties
address (IP/mask | IPv6 prefix; Default: )	Host or network address from which the user is allowed to log in
group (string; Default: )	Name of the group the user belongs to
inactivity-policy (lockscreen | logout | none; Default: none)	Specifies inactivity action - logout (user will be logged out) or lockscreen (session will be locked, require password input to continue). Works only for CLI sessions.
inactivity-timeout (time; Default: 10min)	Specifies time after which user will be logged out or session will be locked. Minimal timeout - 1 minute, maximal timeout - 24 hours. Works only for CLI sessions.
name (string; Default: )	User name. Must start and end with an alphanumeric character but can include "_", ".", "#", "-", and "@" symbols. However the "*" symbol is prohibited in the user name.
password (string; Default: )	User password. If not specified, it is left blank (hit [Enter] when logging in). It conforms to standard Unix characteristics of passwords and may contain letters, digits, "*" and "_" symbols.
last-logged-in (time and date; Default: "")	Read-only field. Last time and date when a user logged in.
Actions

Actions for existing router user.
password	Option to change user password.
expire-password	Expires user password, on next login, router will prompt to change password.
Notes

There is one predefined user with full access rights:
[admin@MikroTik] user> print
Flags: X - disabled
# NAME GROUP ADDRESS LAST-LOGGED-IN
0 ;;; system default user
admin full 0.0.0.0/0 dec/08/2010 16:19:24

There always should be at least one user with full access rights. If the user with full access rights is the only one, it cannot be removed.
Monitoring Active Users
/user active print

 The command shows the currently active users along with respective statistics information.
Properties

All properties are read-only.
address (IP/IPv6 address/MAC address)	Host IP/IPv6/MAC address from which the user is accessing the router.
group (string)	A group that the user belongs to.
name (string)	Username.
radius (true | false)	Whether a user is authenticated by the RADIUS server.
via (telnet | ssh | winbox | api | rest-api | web | ftp )	User's access method
by-romon (MAC address)	RoMON agent MAC address
when (time)	Time and date when the user logged in.
Request logout

It is possible to close an active CLI session using the request logout function.


 /user/active/request-logout ACTIVE_USER_SESSION_NUMBER


Remote AAA

Router user remote AAA enables router user authentication and accounting via a RADIUS server. The RADIUS user database is consulted only if the required username is not found in the local user database.
Properties
accounting (yes | no; Default: yes)	If the RADIUS server should be sent accounting of login, logout. Bandwidth usage statistics are not part of /user accounting
exclude-groups (list of group names; Default: )	Exclude-groups consist of the groups that should not be allowed to be used for users authenticated by radius. If the radius server provides a group specified in this list, the default-group will be used instead.


This is to protect against privilege escalation when one user (without policy permission) can change the radius server list, set up its own radius server and
log in as admin.
default-group (string; Default: read)	User group used by default for users authenticated via a RADIUS server.
interim-update (time; Default: 0s)	Interim-Update time interval
use-radius (yes |no; Default: no)	Enable user authentication via RADIUS

If you are using RADIUS, you need to have CHAP support enabled in the RADIUS server for WinBox to work
SSH Keys 

 This menu allows importing of private and public keys used for SSH authentication. 

By default, User is not allowed to log in via SSH by password if an SSH key for the user is added. For more details see the SSH page.
Public keys

This menu is used to import (or add) and list imported public keys. Public keys are used to approve another device's identity when logging into a router using an SSH key.

RSA and Ed25519 keys are supported in PEM, PKCS#8, or OpenSSH format.
user (string; Default: )	system user to which the SSH key has been assigned
key-owner (string)	SSH key owner
key-type (read-only)	key type
bits (read-only)	key length
Import public SSH key

On public SSH key import, must specify key file, system user to which SSH key will been assigned, optional it is possible to specify key owner.
user (string; Default: )	system user to which the SSH key has been assigned
key-owner (string)	SSH key owner
public-key-file (string)	file name in the router's root directory containing public key
Add public SSH key

It is possible to add public SSH key (pasting SSH key string), must provide key string, system user to which the SSH key has been assigned. 

It is possible to add keys only in OpenSSH format


user (string; Default: )	system user to which SSH key has been assigned
key (string)	public key 


Private keys

This menu is used to import and list imported private keys. Private keys are used to approve the router's identity during login into another device using an SSH key.

On private key import, is it possible to specify key-owner.

RSA and Ed25519 keys are supported in PEM or PKCS#8 format.
user (string; Default: )	system user to which the SSH key has been assigned
key-owner (string)	SSH key owner
key-type (read-only)	key type
bits (read-only)	key length
Import private SSH key

On private SSH key import, must specify key file, system user to which SSH key will been assigned, optional it is possible to provide key passhrase and specify key owner.
user (string; Default: )	system user to which the SSH key has been assigned
key-owner (string)	SSH key owner
passphrase (string)	key file passphrase
private-key-file (string)	file name in the router's root directory containing private key






    Creado por Usuario desconocido (emils), actualizado por última vez por Ruslans Sudņiks el ene 27, 2025 19 min de lectura

    Overview
    Attributes
    Database
    Limitations
    Payments
    Profiles
    Profile Limitations
    Routers
    Sessions
    Settings
        Advanced
    Users
    User Groups
    User Profiles
    WEB Interface
    Application Guides
        Batch user creation
        Providing NAS with custom RADIUS attributes
            Static IP address for a user
            Specifying address pool for a group of users
        Using TOTP (time-based one-time password) for user authentication
        Exporting user credentials
            Printable login credentials for a single user
            Multiple user credential export
        Generating usage report
        Purchasing a profile
        Migrating from RouterOS v6
    Application Examples
        Basic L2TP/IPsec server with User Manager authentication
        MFA authentication for RouterOS user login

Overview

User Manager is RADIUS server implementation in RouterOS which provides centralized user authentication and authorization to a certain service. Having a central user database allows better tracking of system users and customers. As a separate package, User Manager is available on all architectures except SMIPS, however, care must be taken due to limited free space available. It supports many different authentication methods including PAP, CHAP, MS-CHAP, MS-CHAPv2, EAP-TLS, EAP-TTLS, and EAP-PEAP. In RouterOS, DHCP, Dot1x, Hotspot, IPsec, PPP, and Wireless are features that benefit from User Manager the most. Each user can see their account statistics and manage available profiles using the WEB interface. Additionally, users can buy their own data plans (profiles) using the most popular payment gateway - PayPal making it a great system for service providers. Customized reports can be generated to ease processing by the billing department. User Manager works according to RADIUS standards defined in RFC2865 and RFC3579.

User Manager is one of the RouterOS features, that is limited by the RouterOS license level. Depending on the License level, number of active sessions will be limited, including multiple connections per user (not unique accounts).

Attributes

Sub-menu: /user-manager attribute

RADIUS attributes are defined authorization, information, and configuration parameters that are passed between the RADIUS server and the client. User Manager allows sending customized attributes defined in the "attributes" menu. RouterOS has a set of predefined attributes already present, but it is also possible to add additional attributes if necessary. Predefined attributes:

Framed-IP-Address
	0 (standard)	8	ip address	Access-Accept	RFC2865 section 5.8

Framed-IP-Netmask
	0 (standard)	9	ip address	Access-Accept	RFC2865 section 5.9

Session-Timeout
	0 (standard)	27	integer (maximum value: 21474720)	Access-Accept, Access-Challenge	RFC2865 section 5.27

Idle-Timeout
	0 (standard)	28	integer	Access-Accept, Access-Challenge	RFC2865 section 5.28

Tunnel-Type
	0 (standard)	64	
1	Point-to-Point Tunneling Protocol (PPTP)
2	Layer Two Forwarding (L2F)
3	Layer Two Tunneling Protocol (L2TP)
4	Ascend Tunnel Management Protocol (ATMP)
5	Virtual Tunneling Protocol (VTP)
6	IP Authentication Header in the Tunnel-mode (AH)
7	IP-in-IP Encapsulation (IP-IP)
8	Minimal IP-in-IP Encapsulation (MIN-IP-IP)
9	IP Encapsulating Security Payload in the Tunnel-mode (ESP)
10	Generic Route Encapsulation (GRE)
11	Bay Dial Virtual Services (DVS)
12	IP-in-IP Tunneling
13	Virtual LAN
	Access-Accept	

RFC2868 section 3.1
RFC3580 section 3.31

Tunnel-Medium-Type
	0 (standard)	65	
1	IPv4 (IP version 4)
2	IPv6 (IP version 6)
3	NSAP
4	HDLC (8-bit multidrop)
5	BBN 1822
6	802 (includes all 802 media plus Ethernet "canonical format")
7	E.163 (POTS)
8	E.164 (SMDS, Frame Relay, ATM)
9	F.69 (Telex)
10	X.121 (X.25, Frame Relay)
11	IPX
12	Appletalk
13	Decnet IV
14	Banyan Vines
15	E.164 with NSAP format subaddress
	Access-Accept	RFC2868 section 3.2

Tunnel-Private-Group-ID
	0 (standard)	81	string	Access-Accept	RFC2868 section 3.6

Framed-Pool
	0 (standard)	88	string	Access-Accept	RFC2869 section 5.18
Framed-IPv6-Prefix	0 (standard)	97	ipv6 prefix	Access-Accept	RFC3162 section 2.3

Framed-IPv6-Pool
	0 (standard)	100	string	Access-Accept	RFC3162 section 2.6

Delegated-IPv6-Prefix
	0 (standard)	123	ipv6 prefix	Access-Accept	RFC4818
Framed-IPv6-Address	0 (standard)	168	ip address	Access-Accept	RFC6911 section 3.1
Mikrotik-Recv-Limit	14988 (Mikrotik)	1	integer	Access-Accept	Total receive limit in bytes for the client.
Mikrotik-Xmit-Limit	14988 (Mikrotik)	2	integer	Access-Accept	Total transmit limit in bytes for the client.
Mikrotik-Group	14988 (Mikrotik)	3	string	Access-Accept	

User's group for local users.

HotSpot profile for HotSpot users.

PPP profile for PPP users.
Mikrotik-Wireless-Forward	14988 (Mikrotik)	4	integer	Access-Accept	Not forward the client's frames back to the wireless infrastructure if this attribute is set to "0" (wireless only).
Mikrotik-Wireless-Skip-Dot1x	14988 (Mikrotik)	5	integer	Access-Accept	Disable 802.1x authentication for the particular wireless client if set to a non-zero value (wireless only).
Mikrotik-Wireless-Enc-Algo	14988 (Mikrotik)	6	
0	No-encryption
1	40-bit-WEP
2	104-bit-WEP
3	AES-CCM
4	TKIP
	Access-Accept	WEP encryption algorithm( wireless only).
Mikrotik-Wireless-Enc-Key	14988 (Mikrotik)	7	string	Access-Accept	WEP encryption key for the client (wireless only).
Mikrotik-Rate-Limit	14988 (Mikrotik)	8	string	Access-Accept	Datarate limitation for clients. The format is: rx-rate[/tx-rate] [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold] [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so "rx" is client upload, and "tx" is client download). All rates should be numbers with optional 'k' (1,000s) or 'M' (1,000,000s). If the tx-rate is not specified, the rx-rate is as tx-rate too. The same goes for tx-burst-rate and tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and tx-burst-threshold are not specified (but burst-rate is specified), rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time and tx-burst-time are not specified, 1s is used as default. Priority takes values 1..8, where 1 implies the highest priority, but 8 - the lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and tx-rate values are used. The rx-rate-min and tx-rate-min values can not exceed rx-rate and tx-rate values. 
Mikrotik-Realm	14988 (Mikrotik)	9	string	Access-Request	If it is set in /radius menu, it is included in every RADIUS request as Mikrotik-Realm attribute. If it is not set, the same value is sent as in the MS-CHAP-Domain attribute (if MS-CHAP-Domain is missing, Realm is not included either).
Mikrotik-Host-IP	14988 (Mikrotik)	10	ip address	Access-Request	The IP address of HotSpot client before Universal Client translation (the original IP address of the client).
Mikrotik-Mark-Id	14988 (Mikrotik)	11	string	Access-Accept	Firewall mangle chain name (HotSpot only). The MikroTik RADIUS client upon receiving this attribute creates a dynamic firewall mangle rule with action=jump chain=hotspot and jump-target equal to the attribute value. Mangle chain name can have suffixes .in or .out, which will install rule only for incoming or outgoing traffic. Multiple Mark-id attributes can be provided, but only the last ones for incoming and outgoing are used. 
Mikrotik-Advertise-URL	14988 (Mikrotik)	12	string	Access-Accept	URL of the page with advertisements that should be displayed to clients. If this attribute is specified, advertisements are enabled automatically, including transparent proxy, even if they were explicitly disabled in the corresponding user profile. Multiple attribute instances may be sent by the RADIUS server to specify additional URLs which are chosen in a round-robin fashion.
Mikrotik-Advertise-Interval	14988 (Mikrotik)	13	integer	Access-Accept	The time interval between two adjacent advertisements. Multiple attribute instances may be sent by the RADIUS server to specify additional intervals. All interval values are treated as a list and are taken one by one for each successful advertisement. If the end of the list is reached, the last value is continued to be used.
Mikrotik-Recv-Limit-Gigawords	14988 (Mikrotik)	14	integer	Access-Accept	4G (2^32) bytes of total receive limit (bits 32..63, when bits 0..31 are delivered in Mikrotik-Recv-Limit).
Mikrotik-Xmit-Limit-Gigawords	14988 (Mikrotik)	15	integer	Access-Accept	4G (2^32) bytes of total transmit limit (bits 32..63, when bits 0..31 are delivered in Mikrotik-Recv-Limit).
Mikrotik-Wireless-PSK	14988 (Mikrotik)	16	string	Access-Accept	
Mikrotik-Total-Limit	14988 (Mikrotik)	17	integer	Access-Accept	
Mikrotik-Total-Limit-Gigawords	14988 (Mikrotik)	18	integer	Access-Accept	
Mikrotik-Address-List	14988 (Mikrotik)	19	string	Access-Accept	
Mikrotik-Wireless-MPKey	14988 (Mikrotik)	20	string	Access-Accept	
Mikrotik-Wireless-Comment	14988 (Mikrotik)	21	string	Access-Accept	
Mikrotik-Delegated-IPv6-Pool	14988 (Mikrotik)	22	string	Access-Accept	IPv6 pool used for Prefix Delegation.
Mikrotik-DHCP-Option-Set	14988 (Mikrotik)	23	string	Access-Accept	
Mikrotik-DHCP-Option-Param-STR1	14988 (Mikrotik)	24	string	Access-Accept	
Mikrotik-DHCP-Option-Param-STR2	14988 (Mikrotik)	25	string	Access-Accept	
Mikrotik-Wireless-VLANID	14988 (Mikrotik)	26	integer	Access-Accept	VLAN ID for the client (Wireless only).
Mikrotik-Wireless-VLANIDtype	14988 (Mikrotik)	27	
0	802.1q
1	802.1ad
	Access-Accept	VLAN ID type for the client (Wireless only). 
Mikrotik-Wireless-Minsignal	14988 (Mikrotik)	28	string	Access-Accept	
Mikrotik-Wireless-Maxsignal	14988 (Mikrotik)	29	string	Access-Accept	
Mikrotik-Switching-Filter	14988 (Mikrotik)	30	string	Access-Accept	Allows to create dynamic switch rules when authenticating clients with dot1x server.

Properties
name (string; Default: )	Name of the attribute.
packet-types (string; Default: access-accept)	

    access-accept - use this attribute in RADIUS Access-Accept messages
    access-challenge - use this attribute in RADIUS Access-Challenge messages

type-id (integer:1..255; Default: )	Attribute identification number from the specific vendor's attribute database.
value-type (string; Default: )	

    hex
    ip-address - IPv4 or IPv6 IP address
    ip6-prefix - IPv6 prefix
    macro
    string
    uint32

vendor-id (integer; Default: 0)	IANA allocated a specific enterprise identification number.
Database

Sub-menu: /user-manager database

All RADIUS-related information is stored in a separate User Manager's database configurable under the "database" sub-menu. "Enabled" and "db-path" are the only parameters that are not stored in the User Manager's database and instead are stored in the main RouterOS configuration table meaning that these parameters will be affected by the RouterOS configuration reset. The rest of the configuration, session, and payment data is stored in a separate SQLite database on the FLASH storage of the device. When performing any actions with databases, it is advised to make a backup before and after any activity.

Properties
db-path (string; Default: )	Path to the location where database files will be stored.

Read-only properties
db-size	The current size of the database.
free-disk-space	Free space left on the disk where the database is stored.

Commands
load (name)	Restore previously created backup file in .umb format.
migrate-legacy-db (database-path; overwrite)	Convert the old User Manager (from RouterOS v6 or before) to the new standard. It is possible to overwrite the current database. 
optimize-db ()	
save (name; overwrite)	Save the current state of the User Manager database.
Limitations

Sub-menu: /user-manager limitation

Limitations are used by Profiles and are linked together by Profile-Limitations. RADIUS accounting and Interim updates must be enabled to seamlessly switch between multiple limitations or disconnect active sessions when download-limit, upload-limit or uptime-limit is reached.

To disconnect already active sessions from User Manager, accept must be set to yes on the RADIUS client side. If simultaneous session limits are not unlimited (shared-users) and it has reached the maximum allowed number, then the router will try to disconnect the older user session first.

User-Manager attempts to disconnect an active session before a new user will be accepted (when the appropriate limit is set), that's why in such setups it is suggested to use 1s for /radius client timeout.







