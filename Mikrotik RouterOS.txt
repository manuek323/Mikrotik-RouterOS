

    Creado por Māris B., actualizado por última vez el feb 24, 2025 2 min de lectura

    Summary
    General
    Interface
    Neighbor
    Keys

Summary

MikroTik RouterOS implements RIP version 2 (RFC 2453). Version 1 (RFC 1058) is not supported.

RIP enables routers in an autonomous system to exchange routing information. It always uses the best path (the path with the fewest number of hops (i.e. routers)) available.


General

Sub-menu: /routing rip instance


name 	name of the instance
vrf ( Default: main)	which VRF to use
afi (ipv4 | ipv6; Default: )	specifies which afi to use.
in-filter-chain (Default: )	input filter chain
out-filter-chain (Default: )	output filter chain
out-filter-select (Default: )	output filter select rule chain
redistribute (bgp, bgp-mpls-vpn, connected, dhcp, fantasy, modem, ospf, rip, static, vpn; Default: )	which routes to redistribute
originate-default ( Default:)	whether to originate default route
routing-table ( Default: main)	in which routing table the routes will be added
route-timeout (Default: )	route timeout
route-gc-timeout  (Default: )	
update-interval (time; Default: )	specifies time interval after which the route is considered invalid


Note: The maximum metric of RIP route is 15. Metric higher than 15 is considered 'infinity' and routes with such metric are considered unreachable. Thus RIP cannot be used on networks with more than 15 hops between any two routers, and using redistribute metrics larger that 1 further reduces this maximum hop count.



Interface

Sub-menu: /routing rip interface-template


name 	name of the instance
instance	which VRF to use
interfaces 	specifies which afi to use.
source-addresses 	input filter chain
cost (Default: )	output filter chain
split-horizon (no| yes )	
poison-reverse (no| yes )	
mode (passive| strict)	
key-chain (name)	Name of key-chain which contains MD5 key. Should be set only when MD5 authentication is needed. 
password 	Password for plain text authentication. Should be set only when plain-text authentication is needed.



Sub-menu: /routing rip interface

Read-only properties:
instance (name)	name of the instance
address (address%interface )	IP address and interface name


Neighbor

Sub-menu: /routing rip neighbor


This submenu is used to define a neighboring routers to exchange routing information with. Normally there is no need to add the neighbors, if multicasting is working properly within the network. If there are problems with exchanging routing information, neighbor routers can be added to the list. It will force the router to exchange the routing information with the neighbor using regular unicast packets.


Read-only properties:
address (IP address)	IP address of neighboring router
routes	amount of routes
packets-total	amount of all packets
packets-bad	amount of bad packets
entries-bad	amount of bad entries
last-update (time)	time from last update


Sub-menu: /routing rip static-neighbor
instance (name)	name of used instance
address (IP address)	IP address of neighboring router
Keys

Sub-menu: /routing rip keys


MD5 authentication key chains.


chain (string; Default: "")	chain name to place this key in. 
key (string; Default: "")	authentication key. Maximal length 16 characters
key-id (integer:0..255; Default: )	key identifier. This number is included in MD5 authenticated RIP messages, and determines witch key to use to check authentication for a specific message.
valid-from (date and time; Default: today's date and time: 00:00:00)	key is valid from this date and time
valid-till (date and time; Default: today's date and time: 00:00:00)	key is valid until this date and time



    Creado por Māris B., actualizado por última vez el jun 17, 2025 22 min de lectura

    Summary
    BGP Terminology
    BGP Basics
        Instance Menu
        Connection Menu
        Session Menu
        Template Menu
    Best-Path Selection
    Routing Filter Notes
    Running More than One Instance
    BGP Based VPLS
    L3VPN (VPNv4, VPNv6)
        Route Distinguisher
        Properties
    EVPN

Summary

The Border Gateway Protocol (BGP) allows setting up an inter-domain dynamic routing system that automatically updates routing tables of devices running BGP in case of network topology changes.

BGP is an inter-autonomous system routing protocol based on the distance-vector algorithm. It is used to exchange routing information across the Internet and is the only protocol that is designed to deal with a network of the Internet's size and the only protocol that can deal well with having multiple connections to unrelated routing domains.

BGP is designed to allow for sophisticated administrative routing policies to be implemented. It does not exchange information about network topology but rather reachability information. As such, BGP is better suited to inter-AS environments and special cases like informational feeds. If you just need to enable dynamic routing in your network, consider OSPF instead.

The feature is not supported on SMIPS devices (hAP lite, hAP lite TC, and hAP mini).


Standards and Technologies:

    RFC 4271 Border Gateway Protocol 4
    RFC 4456 BGP Route Reflection
    RFC 5065 Autonomous System Confederations for BGP
    RFC 1997 BGP Communities Attribute
    RFC 8092 BGP Large Communities
    RFC 4360, 5668 BGP Extended Communities
    RFC 2385 TCP MD5 Authentication for BGPv4
    RFC 5492 Capabilities Advertisement with BGP-4
    RFC 2918 Route Refresh Capability
    RFC 4760 Multiprotocol Extensions for BGP-4
    RFC 2545 Use of BGP-4 Multiprotocol Extensions for IPv6 Inter-Domain Routing
    RFC 4893 BGP Support for Four-octet AS Number Space

    RFC 4364 BGP/MPLS IP Virtual Private Networks (VPNs)
    RFC 4761 Virtual Private LAN Service (VPLS) Using BGP for Auto-Discovery and Signalling
    RFC 6286 - AS-wide Unique BGP Identifier for BGP-4
    RFC 4273 - SNMP peer table monitoring (OID 1.3.6.1.2.1.15.3.1) (IPv4 only)
    RFC 6793 -  4-byte ASN support and Aggregator attribute.


BGP Terminology

    AS - Autonomous System
    ASN - Autonomous System Number
    NLRI - Network Layer Reachability Information is what is being exchanged between BGP peers and represents how to reach the prefixes.
    IGP - Interior Gateway Protocol
    EGP - Exterior Gateway protocol
    RR - Route reflector is the router in the BGP network that reflects advertisements to all the neighbors, avoiding the requirement for full BGP mesh. 
    Route server - is the BGP router that does not participate in traffic forwarding. Routes are typically not even installed in the FIB.
    loopback address - a /32 address configured on a dummy bridge interface, that can act as a loopback.

BGP Basics

BGP routers exchange reachability information by means of a transport protocol, which in the case of BGP is TCP (port 179). Upon forming a TCP connection these routers exchange OPEN messages to negotiate and confirm supported capabilities.

After agreeing on capabilities to use, the session is considered to be established and peers can start to exchange NLRIs via UPDATE messages. This information contains an indication of what sequence of full paths (BGP AS numbers) the route should take in order to reach the destination network (NLRI prefix).

The peers initially exchange their full routing tables and after the initial exchange, incremental updates are sent as the routing tables change. Thus, BGP does not require a periodic refresh of the entire BGP routing table.

BGP maintains the routing table version number which must be the same between any two given peers for the duration of the connection.

KEEPALIVE messages are sent periodically to ensure that the connection is up and running, if KEEPALIVE messages are not received within the Hold Time interval, the connection will be closed.

To respond to errors or special conditions, NOTIFICATION messages can be generated and sent to the remote peer, notification message type also indicates whether the connection should be immediately closed.

There can be two types of BGP connections:

    iBGP - is an "internal" link connecting peers from the same AS
    eBGP - is an "external" link connecting peers belonging to two different AS-es

A particular AS might have multiple BGP speakers and provide transit service to other AS-es. This implies that BGP speakers must maintain a consistent view of routing within the AS.  A consistent view of the routes exterior to the AS is provided by having all BGP routers within the AS establish direct iBGP connections with each other (full mesh) or by utilizing a Router Reflector setup.

Using a set of administrative policies BGP speakers within the AS come to an agreement as to which entry/exit point to use for a particular destination. This information is communicated to the interior routers of the AS using the interior routing protocol (IGP), for example, OSPF, RIP, or static routing. In certain setups, iBGP can take the IGP protocol role as well.

For certain BGP attributes handling behavior may change depending on what type of connection is set up, for example, the LOCAL-PREF attribute is not advertised to eBGP peers.

RouterOS divides configuration and session monitoring into four menus:

    instance menu (/routing/bgp/instance)

    connection menu (/routing/bgp/connection)
    sessions menu(/routing/bgp/session)
    template menu (/routing/bgp/template)

Instance Menu

Starting from ROSv7.20, instead of auto detecting instance based on router-ids, BGP routing instances are now explicitly defined in instance menu.

BGP routing instance is necessary for best path route selection and other instance dependant features like VPN, EVPN and so on.
Property	Description
as (integer [0..4294967295]; Default: )	32-bit BGP autonomous system number. Value can be entered in AS-Plain and AS-Dot formats. The parameter is also used to set up the BGP confederation, in the following format: confederation_as/as. For example, if your AS is 34 and your confederation AS is 43, then as configuration should be as=43/34.
cluster-id (IP address; Default: )	In case this instance is a route reflector: the cluster ID of the router reflector cluster to this instance belongs. This attribute helps to recognize routing updates that come from another route reflector in this cluster and avoid routing information looping. Note that normally there is only one route reflector in a cluster; in this case, 'cluster-id' does not need to be configured and BGP router ID is used instead
ignore-as-path-len (yes | no; Default: no)	Whether to ignore the AS_PATH attribute in the BGP route selection algorithm. Works on input.
router-id (IP | name; Default: main )	

BGP Router ID to be used. Use the ID from the /routing/router-id configuration by specifying the reference name, or set the ID directly by specifying IP.

Equal router-ids are also used to group peers into one instance.
routing-table (string; Default: )	Name of the routing table, to install routes in. 
vrf (name; Default: main )	Name of the VRF BGP connections operates on. By default always use the "main" routing table.
Connection Menu

Let's look at a very basic eBGP configuration example assuming, that Router1 IP is 192.168.1.1, AS 65531 and Router2 IP 192.168.1.2, AS 65532:
#Router1
/routing/bgp/instnace
add name=i1 as=65531

/routing/bgp/connection
add name=toR2 remote.address=192.168.1.2 instance=i1 local.role=ebgp
#Router2
/routing/bgp/instnace
add name=i1 as=65532

/routing/bgp/connection
add name=toR1 remote.address=192.168.1.1 instance=i1 local.role=ebgp

The BGP connection menu defines BGP outgoing connections as well as acts as a template matcher for incoming BGP connections.

 local.role parameter is used to indicate that this connection will be the eBGP. Also, notice that the connection does not require a remote AS number to be specified, RouterOS can determine a remote AS number dynamically from the first received OPEN message.

The parameter equivalent to other vendors and older RouterOS "update-source" is "local.address". In most cases, it can be left unconfigured, and let the router determine the address.

When a local address is not specified, BGP will try to guess the local address depending on the current setup:

    if the peer is iBGP
        if loopback available
            pick the highest loopback address
        if loopback is not available
            pick any highest IP address on the router
    if the peer is eBGP
        if a remote peer's IP is not from a directly connected network:
            and multihop is not set, then throw an error
            and multihop is enabled:
                if loopback available
                    pick the highest loopback address
                if loopback is not available
                    pick any highest IP address on the router
        if a remote peer's IP is from a directly connected network:
            and multihop is not set:
                pick the local routers IP address from that connected network
            and multihop is set:
                if loopback available
                    pick the highest loopback address
                if loopback is not available
                    pick any highest IP address on the router


In addition to connection-specific parameters, template-specific parameters are also directly exposed in this menu, for easier configuration in simple scenarios (when templates are not necessary).

Listening on subnets should not be enabled in unsafe environments, denial of service is possible with such configuration. Firewall must be configured to protect the router.
See "listen" parameter for more details.

A list of all connection-specific parameters can be seen in the table below:
Property	Description
name (string; Default: )	Name of the BGP connection
connect (yes | no; Default: yes)	Whether to allow the router to initiate the connection.
listen (yes | no; Default: yes)	

Whether to listen for incoming connections.

    If remote.address is a host address and listening is enabled, then close the listening socket right after the first successful "accept". 
    If remote.address is a subnet and listening is enabled, then listening socket stays open after first successful "accept" and there is a hard coded limit that allows 256 open connections.

local - a group of parameters associated with the local side of the connection

	.address (IPv4/6; Default: ::)	Local connection address.

	.port(integer [0..65535]; Default:179 )	Local connection port.

	.role(ebgp | ebgp-customer | ebgp-peer | ebgp-provider | ebgp-rs | ebgp-rs-client | ibgp | ibgp-rr; Default: )	BGP role, in most common scenarios it should be set to iBGP or eBGP. More information on BGP roles can be found in the corresponding RFC draft https://datatracker.ietf.org/doc/draft-ietf-idr-bgp-open-policy/?include_text=1)

	.ttl (integer [1..255]; Default:)	Time To Live (hop limit) that will be recorded in sent TCP packets.
remote - a group of parameters associated with the remote side of the connection



	.address (IPv4/6; Default: ::)	Remote address used to connect and/or listen to.
.port(integer [0..65535]; Default:179 )	Local connection port.
.as(integer []; Default: )	Remote AS number. If not specified BGP will determine remote AS automatically from the OPEN message.
.allowed-as()	Name of the num-list containing remote AS numbers that will be allowed to connect. Useful for dynamic peer configuration.
.ttl (integer [1..255]; Default:)	Acceptable minimum Time To Live, the hop limit for this TCP connection. For example, if 'ttl=255' then only single-hop neighbors will be able to establish the connection. This property only affects EBGP peers.
tcp-md5-key (string; Default: )	The key used to authenticate the connection with TCP MD5 signature as described in RFC 2385. If not specified, authentication is not used.
templates (name[,name]; Default: default)	List of the template names, to inherit parameters from. Useful for dynamic BGP peers.
instance (name[,name]; Default: default)	Name of the instance this connection is assigned to.
Session Menu

To see the actual active sessions with selected template parameters and negotiated capabilities refer to the BGP sessions menu:
[admin@MikroTik] /routing/bgp/session> print 
Flags: E - established 
 0 E name="toR2" 
     remote.address=192.168.1.2 .as=65532 .id=192.168.1.1 .refused-cap-opt=no 
     .capabilities=mp,rr,as4 .afi=ip,ipv6 .messages=43346 .bytes=3635916 .eor="" 
     local.address=192.168.1.1 .as=65531 .id=192.168.44.2 .capabilities=mp,rr,gr,as4 .messages=2 
     .bytes=71 .eor="" 
     output.procid=97 .keep-sent-attributes=no 
     .last-notification=ffffffffffffffffffffffffffffffff0015030601 
     input.procid=97 .limit-process-routes=500000 ebgp limit-exceeded 
     hold-time=3m keepalive-time=1m uptime=4s70ms

This menu shows read-only cached BGP session information. It will show the current status of the session, flags, last received notification, and negotiated session parameters.

Even if the BGP session is not active anymore, the cache can still be stored for some time. Routes received from a particular session are removed only if the cache expires, this allows mitigating extensive routing table recalculations if the BGP session is flapping.


Also, in this menu is located a session-specific set of commands.
clear	

Clear the session flags. For example, to be able to re-establish a session after the prefix limit is reached "limit-exceeded" flag must be cleared. It can be done by specifying "flag" parameter, which is able to take the following values:

    input-last-notification  
    limit-exceeded  
    output-last-notification  
    refused-cap-opt  
    stopped

dump-saved-advertisements	Dump saved advertisements from specified BGP session in the *.pcap file. The filename to store data is set by "save-to" parameter.
refresh	Send route refresh to a specified BGP session. Is used to trigger re-sending all the routes from the remote peer. "address-family" parameters allow specifying for which address family to send route refresh.
resend	

Resend prefixes to a specified BGP session. The command takes two parameters:

    "address-family" - parameters allow specifying for which address family to resend prefixes.
    "save-to" - the name of the pcap file where to dump resent messages, can be used for debugging purposes.

reset	Reset specified BGP session.
stop	Stop specified BGP session.


Template Menu


The template contains all BGP protocol-related configuration options. It can be used as a template for dynamic peers and to apply a similar configuration to a group of peers. Note that this is not the same as peer groups on Cisco devices, where the group is more than just a common configuration.


List of available template parameters:
Property	Description
add-path-out (all
|none; Default: )	
afi (ip | ipv6 | l2vpn | l2vpn-cisco | vpnv4; Default: ip)	List of address families about which this peer will exchange routing information. The remote peer must support (they usually do) BGP capabilities optional parameter to negotiate any other families than IP.
as (integer [0..4294967295]; Default: )	32-bit BGP autonomous system number. Value can be entered in AS-Plain and AS-Dot formats. The parameter is also used to set up the BGP confederation, in the following format: confederation_as/as. For example, if your AS is 34 and your confederation AS is 43, then as configuration should be as=43/34. Overrides instance ASN.
cisco-vpls-nlri-len-fmt (auto-bits | auto-bytes | bits | bytes; Default: )	VPLS NLRI length format type. Used for compatibility with Cisco VPLS. [[Read more>>]].
disabled (yes | no; Default: no)	Whether the template is disabled.
hold-time (time[3s..1h] | infinity; Default: 3m)	Specifies the BGP Hold Time value to use when negotiating with peers.

According to the BGP specification, if the router does not receive successive KEEPALIVE and/or UPDATE and/or NOTIFICATION messages within the period specified in the Hold Time field of the OPEN message, then the BGP connection to the peer will be closed.

The minimal hold-time value of both peers will be used (note that the special value 0 or 'infinity' is lower than any other value)

    infinity - never expire the connection and never send keepalive messages.

input - a group of parameters associated with BGP input

	.accept-comunities (string; Default: )	A quick way to filter incoming updates with specific communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.accept-ext-communities(string; Default: )	A quick way to filter incoming updates with specific extended communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.accept-large-comunities (string; Default: )	A quick way to filter incoming updates with specific large communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.accept-nlri(string; Default: )	Name of the ipv4/6 address-list. A quick way to filter incoming updates with specific NLRIs. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session restart.
.filter-unknown(string; Default: )	A quick way to filter incoming updates with specific "unknown" attributes. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.affinity(afi  | alone | instance | main | remote-as | vrf; Default: alone )	

Configure input multi-core processing. Read more in Routing Protocol Multi-core Support article.

    alone - input and output of each session are processed in its own process, most likely the best option when there are a lot of cores and a lot of peers
    afi, instance, vrf, remote-as - try to run input/output of new session in process with similar parameters
    main - run input/output in the main process (could potentially increase performance on single-core even possibly on multi-core devices with a small amount of cores)
    input - run output in the same process as input (can be set only for output affinity)

.allow-as (integer [0..10]; Default: )	Indicates how many times to allow your own AS number in AS-PATH, before discarding a prefix.
.filter (name; Default: )	Name of the routing filter chain to be used on input prefixes. This happens after NLRIs are processed. If the chain is not specified, then BGP by default accepts everything.
.filter-comunities (string; Default: )	A quick way to filter incoming updates with specific communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.filter-ext-communities(string; Default: )	A quick way to filter incoming updates with specific extended communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.filter-large-comunities (string; Default: )	A quick way to filter incoming updates with specific large communities. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.filter-nlri(string; Default: )	Name of the filter chain that will filter incoming IPv4/IPv6 NLRIs directly before they are  stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session restart.
.filter-unknown(string; Default: )	A quick way to filter incoming updates with specific "unknown" attributes. It allows filtering incoming messages directly before they are even parsed and stored in memory, that way significantly reducing memory usage. Regular input filter chain can only reject prefixes which means that it will still eat memory and will be visible in /routing route table as "not active, filtered". Changes to be applied required session refresh.
.limit-nlri-diversity (integer; Default: )	
.limit-process-routes-ipv4 (integer; Default: )	Try to limit the amount of received IPv4 routes to the specified number. This number does not represent the exact number of routes going to be installed in the routing table by the peer. BGP session "clear" command must be used to reset the flag if the limit is reached.
.limit-process-routes-ipv6 (integer; Default: )	Try to limit the amount of received IPv6 routes to the specified number. This number does not represent the exact number of routes going to be installed in the routing table by the peer. BGP session "clear" command must be used to reset the flag if the limit is reached.
keepalive-time (time [1s..30m]; Default: )	The interval between keepalive messages, if not set by default keepalive is 1/3 of the hold-time. 
multihop (yes | no; Default: no)	Specifies whether the remote peer is more than one hop away.

This option affects outgoing next-hop selection as described in RFC 4271 (for EBGP only, excluding EBGP peers local to the confederation).

It also affects:

    whether to accept connections from peers that are not in the same network (the remote address of the connection is used for this check);
    whether to accept incoming routes with NEXT_HOP attribute that is not in the same network as the address used to establish the connection;
    the target-scope of the routes installed from this peer; routes from multi-hop or IBGP peers resolve their next-hops through IGP routes by default.

name (string; Default: )	Name of the BGP template
nexthop-choice (default | force-self | propagate; Default: default)	Affects the outgoing NEXT_HOP attribute selection. Note that next-hops set in filters always take precedence. Also note that the next-hop is not changed on route reflection, except when it's set in the filter.

    default - select the next-hop as described in RFC 4271
    force-self - always use a local address of the interface that is used to connect to the peer as the next-hop;
    propagate - try to propagate further the next-hop received; i.e. if the route has BGP NEXT_HOP attribute, then use it as the next-hop, otherwise, fall back to the default case

output - a group of parameters associated with BGP output

	.as-override (yes | no; Default: no)	

If set, then all instances of the remote peer's AS number in the BGP AS-PATH attribute are replaced with the local AS number before sending a route update to that peer. Happens before routing filters and prepending.
.affinity(afi  | alone | instance | main | remote-as | vrf; Default: )	

Configure output multicore processing. Read more in Routing Protocol Multi-core Support article.

    alone - input and output of each session is processed in its own process, the most likely best option when there are a lot of cores and a lot of peers
    afi, instance, vrf, remote-as - try to run input/output of new session in process with similar parameters
    main - run input/output in the main process (could potentially increase performance on single-core even possibly on multicore devices with small amount of cores)
    input - run output in the same process as input (can be set only for output affinity)

.default-originate (always | if-installed | never; Default: never)   	Specifies default route (0.0.0.0/0) distribution method. 
default-prepend (integer [0..255]; Default: )	
.filter-chain (name; Default: )	Name of the routing filter chain to be used on the output prefixes. If the chain is not specified, then BGP by default accepts everything.
.filter-select (name; Default: )	Name of the routing select chain to be used for prefix selection. If not specified, then default selection is used.
.keep-sent-attributes (yes | no; Default: no)	Store in memory sent prefix attributes, required for "dump-saved-advertisements" command to work. By default, sent-out prefixes are not stored to preserve the router's memory. An option should be enabled only for debugging purposes when necessary to see currently advertised prefixes.
.network(name; Default: )	Name of the address list used to send local networks. The network is sent only if a matching IGP route exists in the routing table.
.no-client-to-client-reflection (yes | no; Default: )	Disable client-to-client route reflection in Route Reflector setups.
.no-early-cut (yes | no; Default: )	The early cut is the mechanism, to guess (based on default RFC behavior) what would happen with the sent NPLRI when received by the remote peer. If the algorithm determines that the NLRI is going to be dropped, a peer will not even try to send it. However such behavior may not be desired in specific scenarios, then then this option should be used to disable the early cut feature.
redistribute (bgp, connected, bgp-mpls-vpn , dhcp, fantasy, modem, ospf, rip, static, vpn; Default:)	Enable redistribution of specified route types.
remove-private-as (yes | no; Default: no	If set, then the BGP AS-PATH attribute is removed before sending out route updates if the attribute contains only private AS numbers.

The removal process happens before routing filters are applied and before the local, AS number is prepended to the AS path.

	


routing-table (string; Default: )	Name of the routing table, to install routes in. Overrides instance parameter.
save-to (string; Default: )	Filename to be used to save BGP protocol-specific packet content (Exported PDU) into pcap file. This method allows much simpler peer-specific packet capturing for debugging purposes. Pcap files in this format can also be loaded to create virtual BGP peers to recreate conditions that happened at the time when packet capture was running.
templates (name[,name]; Default: )	List of template names from which to inherit parameters. Useful feature, to easily configure groups with overlapping configuration options.
use-bfd (yes | no; Default: no)	Whether to use the BFD protocol for faster connection state detection.
vrf (name; Default: main )	Name of the VRF BGP connections operates on. By default always use the "main" routing table. Overrides instance parameter.



Best-Path Selection

BGP routers can receive multiple copies of the global routing table from multiple providers.

There should be some way to compare those multiple BGP routing tables and select the best route to the destination, the solution is the BGP Best Path Selection Algorithm.

The route is evaluated by the algorithm only if it is valid. In general, the route is considered valid if:

    NEXT_HOP of the route is valid and reachable
    AS_PATH received from external peers does not contain the local AS
    the route is not rejected by routing filters

For more information read nexthop selection and validation.

The best path algorithm also compares routes received only by a single BGP instance. Routes installed by different BGP instances are compared by the general algorithm, i.e. route distances are compared and the route with a lower distance is preferred.

If all the criteria are met, then the following actions take place:

    The first path received is automatically considered the 'best path'. Any further received paths are compared to the first received to determine if the new path is better.
    Prefer the path with the highest WEIGHT.
    This parameter is not a part of the BGP standard, it is invented to quickly locally select the best route. A parameter is local to the router (assigned with routing filters in the BGP input) and cannot be advertised. A route without assigned WEIGHT has a default value of 0.
    Prefer the path with the highest LOCAL_PREF.
    This attribute is used only within an AS. A path without the LOCAL_PREF attribute has a value of 100 by default.
    Prefer the path with the shortest AS_PATH. (skipped if input.ignore-as-path-len set to yes).
    Each AS_SET counts as 1, regardless of the set size. The AS_CONFED_SEQUENCE and AS_CONFED_SET are not included in the AS_PATH length.
    Prefer the path that was locally originated via aggregate or BGP network
    Prefer the path with the lowest ORIGIN type.

    Interior Gateway Protocol (IGP) is lower than Exterior Gateway Protocol (EGP), and EGP is lower than INCOMPLETE
    in other words IGP < EGP < INCOMPLETE
    Prefer the path with the lowest multi-exit discriminator (MED).

    The router compares the MED attribute only for paths that have the same neighboring (leftmost) AS unless input.always-compare-med is enabled. 
    Paths without explicit MED value are treated with MED of 0.
    Prefer eBGP over iBGP paths
    Prefer lowest IGP metric.
    Prefer the route that comes from the BGP router with the lowest router ID. If a route carries the ORIGINATOR_ID attribute, then the ORIGINATOR_ID is used instead of the router ID.
    Prefer the route with the shortest route reflection cluster list. Routes without a cluster list are considered to have a cluster list of length 0.
    Prefer the path that comes from the lowest neighbor address


Routing Filter Notes

On BGP output routing filters are executed before BGP itself is modifying attributes, for example, if nexthop-choice is set to force-self, then the gateway set in the routing filters will be overridden.

On BGP input routing filters are applied to the received attributes, which means that, for example, setting the gateway will work no matter what nexhop-choice value is set.
Running More than One Instance

As we already know for best path selection to work properly, BGP routes must be received from the same instance. But in certain scenarios it is necessary to run multiple BGP instances with their own separate tables.
BGP determines whether sessions belongs to the same instance by comparing configured local router IDs.

For example config below will run each peer in its own BGP instance
/routing/bgp/connection
add name=inst1_peer remote.address=192.168.1.1 as=1234 local.role=ebgp router-id=1.1.1.1
add name=inst2_peer remote.address=192.168.1.2 as=5678 local.role=ebgp router-id=2.2.2.2


When router-id is not specified BGP will pick the "default" ID from /routing id.

Starting from v7.20 instance is no longer determined by router-id.


BGP Based VPLS

Sub Menu: /routing/bgp/vpls

This menu lists all the configured BGP-based VPLS instances. These instances allow the router to advertise VPLS BGP NLRI and indicate that the router belongs to a specific customer VPLS network.

MP-BGP-based autodiscovery and signaling (RFC 4761).

Cisco VPLS BGP-based auto-discovery (draft-ietf-l2vpn-signaling-08).

Support for multiple import/export route target extended communities for BGP-based VPLS (both, RFC 4761 and draft-ietf-l2vpn-signaling-08).
bridge (name)	The name of the bridge where dynamically created VPLS interfaces should be added as ports.
bridge-cost (integer [0..4294967295])	
bridge-horizon (none | integer [0..4294967295])	If set to none bridge horizon will not be used.
bridge-pvid (integer 1..4094)	Used to assign port VLAN ID (pvid) for dynamically bridged interface.
cisco-id ()	Unique identifier. A parameter must be set for cisco-style VPLS signaling. In most cases this should not be used, any modern software supports RFC 4761 style signaling (see site-id parameter). Parameter is a merge of l2-router-id and RD, for example: 10.155.155.1&6550:123
comment (string)	Short description of the item.
disabled (yes | no)	Defines whether an item is ignored or used.
export-route-target (list of RTs)	The setting is used to tag BGP NLRI with one or more route targets which on the remote side is used by import-route-targets.
import-route-targets (list of RTs)	The setting is used to determine if BGP NLRI is related to a particular VPLS, by comparing route targets received from BGP NLRI.
local-pref (integer[0..4294967295])	
name (string; Default: )	
pw-control-word (default | disabled | enabled)	Enables/disables Control Word usage. Read more in the VPLS Control Word article.
pw-l2mtu (integer[32..65535])	Advertised pseudowire MTU value.
pw-type (raw-ethernet | tagged-ethernet | vpls)	The parameter is available starting from v5.16. It allows choosing advertised encapsulation in NLRI used only for comparison. It does not affect the functionality of the tunnel. See pw-type usage example >>
rd (string)	Specifies the value that gets attached to VPLS NLRI so that receiving routers can distinguish advertisements that may otherwise look the same. This implies that a unique route-distinguisher for every VPLS must be used. It is not necessary to use the same route distinguisher for some VPLS on all routers forming that VPLS as distinguisher is not used for determining if some BGP NLRI is related to a particular VPLS (Route Target attribute is used for this), but it is mandatory to have different distinguishers for different VPLSes. Accepts 3 types of formats. Read more>>
site-id (integer [0..65535])	Unique site identifier. Each site must have a unique site-id. A parameter must be set for RFC 4761 style VPLS signaling.
vrf (name)	Name of the VRF table.
L3VPN (VPNv4, VPNv6)

Sub Menu: /routing/bgp/vpn
Route Distinguisher

Route Distinguisher is a 64-bit integer, which is divided into three parts:

    type (always 2 bytes),
    administrator subfield,
    value or service provider subfield.

Currently, there are three format types defined.
2bytes	2bytes	2bytes	2bytes
Type1	ASN	4byte value
Type2	4-byte IP	value
Type3	4-byte ASN	value


Properties
disabled (yes | no)	
export - a group of parameters associated with the vpnv4 export



	.filter-chain (name)	The name of the routing filter chain that is used to filter prefixes before exporting.
.filter-select(name)	The name of the select filter chain that is used to select prefixes to be exported exporting.
.redistribute(bgp | connected | dhcp | fantasy | modem | ospf | rip | static | vpn)	Enable redistribution of specified route types from VRF to VPNv4.
.route-targets(rt[,rt])	List of route targets added when exporting VPNv4 routes. The accepted RT format is similar to the one for Route Distinguishers.
import - a group of parameters associated with the vpnv4 import

	.filter-chain (name)	The name of the routing filter chain that is used to filter prefixes during import.
.route-targets(rt[,rt])	List of route targets that will be used to import VPNv4 routes. The accepted RT format is similar to the one for Route Distinguishers.
.router-id(name | ip)	The router ID of the BGP instance that will be used for the BGP best path selection algorithm.
label-allocation-policy (per-prefix | per-vrf)	
name	
route-distinguisher (rd)	Helps to distinguish between overlapping routes from multiple VRFs. Should be unique per VRF. Accepts 3 types of formats. Read more>>
vrf (name)	Name of the VRF table that this VPN instance will use.
instance (name)
	Name of the instance this VPN is assigned to.
EVPN

Sub-menu: /routing bgp evpn

See EVPN documentation.
Property	Description
name (string; Default: )	Name of the entry
instance (name)	BGP instance this EVPN is assigned to.
export - a group of parameters associated with the route export

	.route-targets (Iist of RTs)	List of route targets that will be added to EVPN routes when exporting.
import - a group of parameters associated with the route import

	.route-targets (Iist of RTs)	List of route targets that will be used to import EVPN routes.
rd (string)	Specifies the value that gets attached to route so that receiving routers can distinguish advertisements that may otherwise look the same. Used to distinguish between tenants using overlapping IP ranges. Also can be used to simplify convergence and redundancy within Virtual Network. RDs form MLAG pairs should be unique, too.
vni (range of integers[0..4294967295])	Range of Virtual Network Identifiers. 
vrf (name)	




    Creado por Māris B., actualizado por última vez el may 09, 2024 2 min de lectura

Overview

RouterOS implements the Resource Public Key Infrastructure (RPKI) to Router Protocol defined in RFC8210. RTR is a very lightweight low memory footprint protocol, to reliably get prefix validation data from RPKI validators.
More information on RPKI and how to set up validators can be found in the RIPE blog:
https://blog.apnic.net/2019/10/28/how-to-installing-an-rpki-validator/
Basic Example

Let's consider that we have our own RTR server on our network with IP address 192.168.1.1:
/routing/bgp/rpki
add group=myRpkiGroup address=192.168.1.1 port=8282 refresh-interval=20

If the connection is established and a database from the validator is received, we can check prefix validity:
[admin@rack1_b33_CCR1036] /routing> rpki-check group=myRpkiGroup prfx=70.132.18.0/24 origin-as=16509
    valid

Now the cached database can be used by routing filters to accept/reject prefixes based on RPKI validity. At first, we need to set up a filter rule which defines against which RPKI group performs the verification. After that filters are ready to match the status from the RPKI database. Status can have one of three values:

    valid - database has a record and origin AS is valid.
    invalid - the database has a record and origin AS is invalid.
    unknown - database does not have information of prefix and origin AS.
    unverified - set when none of the RPKI sessions of the RPKI group has synced database. This value can be used to handle the total failure of the RPKI.


/routing/filter/rule
add chain=bgp_in rule="rpki-verify myRpkiGroup"
add chain=bgp_in rule="if (rpki invalid) { reject } else { accept }"
Configuration Options

Sub-Menu: /routing/rpki


address (IPv4/6) mandatory	Address of the RTR server
disabled(yes | no; Default: no)	Whether the item is ignored.
expire-interval (integer [600..172800]; Default: 7200)	Time interval [s] polled data is considered valid in the absence of a valid subsequent update from the validator.
group (string) mandatory	Name of the group a database is assigned to.
port (integer [0..65535]; Default: 323)	Connection port number
preference (integer [0..4294967295]; Default: 0)	

If there are multiple RTR sources, the preference number indicates a more preferred one. A higher number is preferred.

If preference is not configured then lowest remote IP within a group is preferred, if IPs are equal then lowest remote port is preferred.
refresh-interval (integer [1..86400]; Default: 3600)	Time interval [s] to poll the newest data from the validator.
retry-interval (integer [1..7200]; Default: 600)	Time Interval [s] to retry after the failed data poll from the validator.
vrf(name; Default: main)	Name of the VRF table used to bind the connection to.



    Creado por Māris B., actualizado por última vez el jun 19, 2025 13 min de lectura

    Route Filtering
        Filter Syntax
            Only Readable Properties
            Writeable Properties
            Commands
            Operators
                Matcher Operators
                Num Prop Operators
                Prefix Operators
                BGP Community Operators
                String Operators
        Deleting BGP Communities
        AS-PATH Regexp Matching
            Regex Testing Tool
            Supported Operators
        Community and Num Lists
    Route Selection
    Routing Filter Wizard
    Property Reference
        /routing/filter/chain

Route Filtering
Filter Syntax

The routing filter rule implements script-like syntax. The example below is a quick demonstration of a routing filter that matches prefixes with a prefix length greater than 24 from subnet 192.168.1.0/24 and increments the default distance by 1. If there is no match then subtract the default distance by one.
/routing filter rule 
  add chain=myChain \
  rule="if (dst in 192.168.1.0/24 && dst-len>24) {set distance +1; accept} else {set distance -1; accept}"


Filter rule may consist of multiple matchers and actions:
if ( [matchers] ) { [actions] } else { [actions] }


There are two types of properties:

    only readable - ones that value is only readable and cannot be rewritten, these properties can be used only by matchers
    readable/writable - ones that value is readable and writeable, used by filter actions, and also can be used by matchers

Readable properties can be matched by other readable properties (for numeric properties only) or constant values using boolean operators. 
[matchers]:
[prop readable] [bool operator] [prop readable]

[actions]:
[action] [prop writeable] [value]

The boolean operator is not used if there is only one possible operation.

Example without boolean operator:
if ( protocol connected ) { accept }

Example with boolean operator:
if ( bgp-med < 30 ) { accept }

With readable flag properties, matcher is used without specified boolean operator and without value
if ( ospf-dn ) { reject }

Be aware that the default action of the routing filter chain is "reject"
Only Readable Properties


Property	Type	Description
Numeric properties
dst-len	
	Destination prefix length
bgp-path-len	
	The current length of the BGP AS-PATH
bgp-input-local-as	
	AS number of the local peer to which the prefix was sent
bgp-input-remote-as	
	AS number of the remote peer from which the prefix was received
bgp-output-local-as	
	AS number of the peer that will advertise the prefix
bgp-output-remote-as	
	AS number of the peer to which the prefix will be advertised
ospf-metric	
	Current OSPF metric
ospf-tag	
	Current OSPF tag
rip-metric	
	Current RIP metric
rip-tag	
	Current RIP tag
Flag properties
active	
	indicates whether the route is active
bgp-atomic-aggregate	
	
bgp-communities-empty	
	indicates if the BGP Communities attribute is empty
bgp-ext-communities-empty	
	indicates if the BGP Extended Communities attribute is empty
bgp-large-communities-empty	
	indicates if the BGP Large Communities attribute is empty
bgp-network	
	Indicates if the prefix is originated from BGP networks
ospf-dn	
	Indicates if the OSPF route has DN bit set.
Prefix properties
dst	
	Destination
ospf-fwd	
	Current OSPF forwarding address
bgp-input-local-addr	
	The IP address of the local peer to which the prefix was sent
bgp-input-remote-addr	
	The IP address of the remote peer from which the prefix was received
bgp-output-local-addr	
	The IP address of the peer that will advertise the prefix
bgp-output-remote-addr	
	The IP address of the peer to which the prefix will be advertised
Other Properties
afi	ipv4 | ipv6 | l2vpn | l2vpn-cisco | vpnv4 | vpnv6	The address family of the route.
bgp-as-path	numeric_regexp	AS path matching, read more>>
bgp-as-path-slow-legacy	string_regexp	Deprecated. Extremely slow old-style AS path matching. This parameter should be used only as a temporary matcher while migrating from an old ROS v6 config. Read more>>
chain	chain_name	
ospf-type	ext1 | ext2 | inter | intra | nssa1 | nssa2	

Type of the OSPF route:

    ext1 - external (Type 5 LSA) with type1 metric
    ext2 - external (Type 5 LSA) with type2 metric
    inter - inter-area-route (Type 3 LSA)
    intra - intra-area-route (Type 4 LSA)
    nssa1 - Type 7 LSA with type1 metric
    nssa2 - Type 7 LSA with type1 metric

protocol	bgp | connected | dhcp | fantasy | modem | ospf | rip | static | vpn	Protocol type from which the route was imported.
rpki	invalid | unknown | valid | unverified	RPKI validation status of the prefix
rtab	routing_table_name	Name of the routing table the route was imported from
vrf	vrf_name	Name of the VRF the route was imported from
Writeable Properties
Property	Type	Description
Numeric properties
distance	
	route distance
scope	
	
scope-target	
	target scope
bgp-weight	
	BGP WEIGHT attribute
bgp-med	
	BGP MED attribute is local to the router. It is also used in the output of iBGP peers.
bgp-out-med	
	BGP MED attribute to be sent to a remote peer. Should be used in the output chain of eBGP peers.
bgp-local-pref	
	BGP LOCALPREF attribute
bgp-igp-metric	
	BGP IGP METRIC
bgp-path-peer-prepend	
	

Prepend last received remote peers ASN. If the prefix is originated from the router, then this parameter will not do anything on the router's output, because ASN does not exist yet.


If used as a matcher in BGP input, it is possible to filter prefixes exceeding a certain number of prepends. For example, if a remote peer prepends its ASN 5 times, but we want to allow max 4 times prepended ASN, then we can use: "if (bgp-path-peer-prepend > 4) {reject}"


This parameter also overrides any prepends received from the remote peer, for example, if the remote peer prepended it's AS 3 times, we can remove this prepend by setting "bgp-path-peer-prepend 1" in BGP input
bgp-path-prepend	
	Prepend routers ASN, should be used in BGP output.
ospf-ext-metric	
	OSPF External route metric
ospf-ext-tag	
	OSPF external route tag
rip-ext-metric	
	RIP External route metric
rip-ext-tag	
	RIP External route tag
Flag properties
ospf-ext-dn	
	DN bit for external OSPF routes
blackhole	
	
suppress-hw-offload	
	Whether to suppress L3 HW offloading
use-te-nexthop	
	
Other properties
gw	ipv4/6 address	

IPv4/IPv6 address or interface name. In the case of BGP output, a gateway can be adjusted in the following setups:

    is BGP reflector
    nexthop-choice is set to propagate
    is not eBGP and nexthop-choice=force-self is not set.

gw-interface	interface_name	Interface part of the gateway. Should be used if it is required to attach a specific interface for next-hop, like (1.2.3.4%ether1)
gw-check	none|arp|icmp|bfd|bfd-mh	
pref-src	ipv4/6 address	
bgp-origin	igp|egp|incomplete	
ospf-ext-fwd	ipv4/6 address	Forwarding address of External OSPF route
ospf-ext-type	type1|type2	OSPF External route type
comment	string	
bgp-communities	inline_community_set | community_list_name	BGP Communities attribute is defined in RFC 1997. Each community is 32-bit in size.
bgp-ext-communities	inline_ext_community_set | ext_community_list_name	BGP Extended Communities attribute is defined in RFC 4360. RouterOS parses site-of-origin (prefixed with soo:) and route-target (prefixed with rt:) extended communities. For example, "set bgp-ext-communities rt:1111:2.3.4.5;". It is possible to set/match RAW extended communities value in 64-bit hex, for example, "set bgp-ext-community 0x.........;"
bgp-large-communities	inline_large_community_set | large_community_list_name	BGP Large Communities attribute is defined in RFC 8092. Suitable for use with all ASNs including 32-bit ASNs. Each community is 12-bytes in length and consists of 3 parts: "global_admin:locap_part_1:local_part_2".
Commands
accept	
	accept matched prefix
reject	
	reject matched prefix, the prefix will be stored in the memory as "filtered" and will not be the candidate to be selected as the best path.
return	
	return to the parent chain
jump	jump chain_name	jump to a specified chain
unset	unset prop_name	used to unset the value of the following properties:
pref-src|bgp-med|bgp-out-med|bgp-local-pref
append	
	append at the end of the list or string. Following property values can be appended: bgp-communities, bgp-ext-communities, bgp-large-communities, comment
filter	
	Inverse of the delete action (Delete everything except the specified values). Values of the following properties can be filtered: bgp-communities, bgp-ext-communities, bgp-large-communities
delete	
	Delete the value of the specified property. Values of the following properties can be deleted: bgp-communities, bgp-ext-communities, bgp-large-communities
set	set prop_writeable value	The command is used to set a new value to writeable properties. Value can be set from other readable properties of matching types. For numeric properties, it is possible to prefix the value with +/- which will increment or decrement the current property value by a given amount. For example, "set bgp-local-ref +1" will increment current LOCAL_PREF by one, or extract value from other readable num property, "set distance +ospf-ext-metric"
rpki-verify	rpki-verify rpki_group_name	Enable RPKI verification in the current chain from the specified RPKI group.
Operators
Matcher Operators
&&	Logical AND operator	if (dst in 192.168.0.0/16 && dst-len in 16-32) {reject;}
||	Logical OR operator	
not	Logical NOT operator	if ( not bgp-network) {reject; }
Num Prop Operators
in	return true if the value is in provided numeric range. Numeric range can be written in following formats: {int..int}, {int-int}
==	return true if numeric values are equal
!=	return true if numeric values are not equal
>	return true if the left numeric value is greater than the right numeric value
<	return true if the left numeric value is less than the right numeric value
>=	return true if the left numeric value is greater than or equal to the right numeric value
<=	return true if the left numeric value is less than or equal to the right numeric value
Prefix Operators
in	Return true if the prefix is the subnet of the provided network. If an operator is used to match prefixes from the address list (e.g "dst in list_name"), then it will match only the exact prefix.
!=	Return true if the prefix is not equal to the provided value
==	Return true if the prefix is equal to the provided value

Address lists by design are matching host address which menas that it will match also  /32 prefix that belongs to any range from the address list. Workaround to exclude /32  prefixes from being advertised is to use dst-len "if (dst in list_name && dst-len < 32) {}"
BGP Community Operators
equal	return true if provided communities are equal to the routes property value	
equal-list	return true if communities from provided community-list are equal to the route's property value	
any	returns true if the route's property value contains at least one of provided communities	
any-list	returns true if the route's property value contains at least one community from the provided list	
includes	returns true if the route's property value includes specified communities	
includes-list	returns true if the route's property value includes all communities from the specified communities-list	
subset	returns true if route community subset matches communities from the list	

1:1,3:3 will match 1:1,2:2,3:3
subset-list	the same as "subset", but matches communities form the community list.	
any-regexp	the same as "any", but matched by regexp	
subset-regexp	the same as "subset", but matched by regexp	
String Operators
find	Check if provided substring is part of the property value
regexp	Match string regexp of the property value
Deleting BGP Communities

Routing filters allow to clear BGP communities by using "delete" command. Delete command accepts several parameters based on the type of the community type:

    communities: 
        "wk" - will match and remove well known communities
        "other" - will match and remove other communities that are not well known 
        "regexp" - regexp pattern to match communities that should be deleted
        "<community-list name>" - deletes communities from specified community-list
    ext-communities:
        "rt" - will match and remove RouteTarget
        "soo" - will match and remove Site-of-Origin
        "other" - will match and remove other ext communities that are not RT or SSO 
        "regexp" - regexp pattern to match ext communities that should be deleted
        "<community-ext-list name>" - deletes communities from specified community-ext-list
    large-communities:
        "all" - removes everything
        "regexp" - regexp pattern to match large communities that should be deleted
        "<community-large-list name>" - deletes large communities from specified community-large-list


It is possible to specify multiple community types, for example delete all SSOs, other type of ext communities and specific RTs from the community-ext list:
/routing/filter/community-ext-list
add list=myRTList communities="rt:1.1.1.1:222"
/routing/filter/rule
add chain=myChain rule="delete bgp-ext-communities sso,other,myRTList;"


AS-PATH Regexp Matching

AS Path is the sequence of autonomous system numbers (ASNs), for example AS Path 123 456 789 would indicate, that route originated from AS with the number 789, and to reach the destination, the packet would need to travel through two autonomous systems: 456 and 789. To apply specific routing policies administrator might want to match specific AS numbers or set of numbers in the AS Path (for example, reject prefixes that travel through AS 456), which can be achieved using regular expression (regexp).

There are two common ways how to operate with AS Path data:

    convert whole AS path to string and let regexp operate on the string (ROS v6 or Cisco style)
    let regexp operate on each entry in the AS path as a number (ROS v7, Juniper style)

Basically, the first method is performing the match per character, the second method is performing the match per whole AS number. As you would imagine the latter method is much faster and less resource-intensive than the string matching approach.

This change would require administrators to implement new Regex strategies. Old Regex patterns from RouterOS v6 cannot be directly copied/pasted as they will result either in syntax errors or unexpected results.

Let us take a very basic AS Path filter rule.
/routing/filter/rule
add chain=myChain rule="if (bgp-as-path .1234.) {accept}"

In ROS v7 this Regex pattern will match ASN 1234 anywhere in the middle of the AS-path, the same pattern in ROS v6 would match any AS path that contains ASN consisting of at least 6 characters and contains a string of "1234".  Obviously, if we directly copy/paste the Regex pattern from one implementation to another it will lead to unexpected/dangerous results. An equivalent pattern in ROS v6 would look something like this: "._1234_.".

Let's take another example from ROS v6, say we have a pattern "1234[5-9]" what it does is it matches 12345 to 12349 anywhere in the string, which means that valid matches are AS-path "12345 3434", "11 9123467 22" and so on. If you enter the same pattern in ROS v7 it will match AS path containing exact ASN 1234 followed by ASN in a range from 5 to 9 (matching AS-paths would be "1234 7 111", "111 1234 5 222" etc., it will not match "12345 3434").

Do not copy Regex patterns directly from ROS v6 or Cisco configurations, they are not directly compatible. It can lead to unexpected or even dangerous configurations in some scenarios.

AS-Path parameter must exist for regexp matcher to be applied. This means that it is not possible to match non-existent (empty) AS-Path with regular expression, aka "^$". bgp-path-len should be used instead.


Regex Testing Tool

RouterOS now has a built-in regex checking tool to simplify the hard life of the administrators. This tool supports also num-list so now exact regex can be tested against any as-path before applying it to the routing filters.
/routing/filter/num-list add list=test range=100-1500

/routing/filter/test-as-path-regexp regexp="[[:test:]]5678\$" as-path="1234,5678"



Supported Operators
^	Represents the beginning of the path	^1234 	will match AS-path starting with ASN 1234	
$	Represents the end of the path	1234$	will match AS-path of origin ASN 1234	
*	Zero or more occurrences of the  listed ASN	^1234*$	will match Null as-path or as-path where ASN 1234 may or may not appear multiple times	

Match:

1234

1234 1234 1234

Null path

No Match:

1234 5678
+	One or more occurrences of the listed ASN	1234+	will match AS-path where ASN 1234 appears at least once	

Match:

1234

3 1234 6

No match:

12345 678
?	Zero or one occurrence of the listed ASN	^1234? 5678	will match AS-path that may or may not start with ASN 1234 appearing once.	

Match:

5678

1234 5678

No match:

1234 1234 5678

12345 5678
.	One occurrence of any ASN	^.$ 	will match any AS-path with the length of one.	

Match:

12345

45678

No match:

1234 5678
|	Match one of two ASNs on each side	^(1234|5678) 	will match AS-path starting with ASN 1234 or 5678	

Match:

1234

5678

1234 5678

No Match:

91011

[ ]

[^ ]
	

Represents the set of AS numbers where one AS number from the list must match.

Use ^ after opening the bracket to negate the set.

It is also possible to reference the pre-defined num-lists from num-list with [[:numset_name:]] 
	

^[1234 5678 1-100]


	will match the AS-path that starts with 1234 or 5678 or from the range of 1 to 100	

Match:

1234

99

5678

No Match:

101

()
	Group of regexp terms to match	^(1234$|5678)	will match AS-path that starts and ends with 1234 or AS-path that starts with 5678	

Match:

1234

5678 9999

No Match:

1234 5678

Repetition ranges {} are not supported.
Community and Num Lists

A list of commonly used numbers can be configured from the /routing/filter/num-list menu. These lists of numbers can be used in the filter rules to simplify the filter setup process.

In a similar manner, you are allowed to define also community, extended community, and large community lists. Community sets can be used for matching, appending, and setting.

For example match communities from the list and clear the attribute:
/routing/filter/community-list
add communities=111:222 list=myCommunityList

/routing/filter/rule
add chain=myChain rule="if (bgp-communities equal-list myCommunityList) {delete bgp-communities wk,other; accept;}"




/routing/filter/community-list
Property	Description
comment (string; Default: )	
communities (list of communities; Default: )	

List of communities expressed either as well-known name or in the following format: "as:number", where each section can be integer [0..65535].

Accepted well known names:

accept-own     graceful-shutdown  no-advertise         no-llgr         route-filter-6      
accept-own-nh  internet           no-export            no-peer         route-filter-xlate-4
blackhole      llgr-stale         local-as  route-filter-4  route-filter-xlate-6
disabled (yes | no)	
name (integer [string; Default: )	Reference name.
regexp (string)	Regexp matcher to match communities. The community set with only the regexp parameter cannot be used to append/delete communities.

/routing/filter/community-ext-list
Property	Description
comment (string; Default: )	
communities (list of ext communities; Default: )	

List of extended communities expressed as raw integer value or in the typed format: "type:value", where type can be:

    rt - route-target
    soo -  site of origin

Value depends on the type, for more info on RT and SoO values ask google.
disabled (yes | no)	
name (integer [string; Default: )	Reference name.
regexp (string)	Regexp matcher to match communities. The community set with only the regexp parameter cannot be used to append/delete communities.

/routing/filter/community-large-list
Property	Description
comment (string; Default: )	
communities (list of large communities; Default: )	

List of large communities expressed in following format: "admin:value1:value2", where each section can be integer [0..4294967295].
disabled (yes | no)	
name (integer [string; Default: )	Reference name.
regexp (string)	Regexp matcher to match communities. The community set with only the regexp parameter cannot be used to append/delete communities.


Route Selection

Route selection rules allow controlling how output routes are selected from available candidate routes. By default, (if no selection rules are set) output always picks the best route.

For example, if we look at the routing table below, we can see that there are 2 candidate routes and one best route. By default when BGP selects which route to send out, it will pick the active route.
[admin@4] /routing/route> print where dst-address=1.0.0.0/24
Flags: A - ACTIVE; b, y - COPY
Columns: DST-ADDRESS, GATEWAY, AFI, DISTANCE, SCOPE, TARGET-SCOPE, IMMEDIATE-GW
   DST-ADDRESS  GATEWAY         AFI  DISTANCE  SCOPE  TARGET-SCOPE  IMMEDIATE-GW         
 b 1.0.0.0/24   10.155.101.217  ip4        19     40            30  10.155.109.254%ether1
Ab 1.0.0.0/24   10.155.101.232  ip4        20     40            30  10.155.109.254%ether1
 b 1.0.0.0/24   10.155.101.231  ip4        20     40            30  10.155.109.254%ether1

But there might be cases where you would want preference for other routes, not the active ones, and here come in-play selection rules.

Selection rules in RouterOS are configured from /routing/filter/select-rule menu.

Select rules can also call routing filters where routes get selected based on filter rules. For example, to mimic default output selection we can set up the following rule sets:
/routing filter rule 
add chain=get_active rule="if (active) {accept}"

/routing filter select-rule
add chain=my_select_chain do-where=get_active


Routing Filter Wizard

Cmd: /routing/filter/filter-wizard

Due to incresed complexity of writing filters in script like manner, v7.20 introduces new routing filter wizard that allows to generate filter rules with ROSv6-like syntax.
Quick demonstration:
[admin@CCR2004_2XS_111] /routing/filter> filter-wizard <tab>
action        dst                   ospf-type         scope-target      set-gw-check                use-te-nexthop   
afi           dst-len               protocol          set-bgp-...       set-scope                   
bgp-...       gateway               routing-table     set-blackhole     set-scope-target            
blackhole     jump-target-chain     rpki              set-comment       set-suppress-hw-offload     
chain         match-chain           rpki-verify       set-distance      set-use-te-nexthop          
distance      ospf-metric           scope             set-gateway       suppress-hw-offload   

[admin@CCR2004_2XS_111] /routing/filter> filter-wizard action=accept chain=vpn-in afi=vpnv4 set-bgp-ext-communities=rt:2:2
  result: Filter rule 'if (afi vpnv4) { set bgp-ext-communities rt:2:2; accept; }' added

[admin@CCR2004_2XS_111] /routing/filter> /routing/filter/rule/print 
Flags: X - disabled, I - inactive 
 0   ;;; added by filter-wizard
     chain=vpn-in rule="if (afi vpnv4) { set bgp-ext-communities rt:2:2; accept; }" 

Filter wizard adds rules at the end of the list and will have a comment "added by filter-wizard". 

Returned errors when trying to add filter with unacceptable values will be printed in CLI and logged in system log with "route,error" topics. 
[admin@CCR2004_2XS_111] /routing/filter> filter-wizard action=accept chain=vpn-in afi=vpnv4 match-chain=vpn-in 
  result: Error adding 'if (chain vpn-in && afi vpnv4) { accept; }'match with 'vpn-in' creates chain loop (6)

[admin@CCR2004_2XS_111] /routing/filter> /log/print 
 2025-05-19 13:05:15 route,error Error adding 'if (chain vpn-in && afi vpnv4) { accept; }'match with 'vpn-in' creates chain loop (6)



Property Reference
/routing/filter/chain

Dynamic list of filter rule chains that can be referenced in BGP/OSPF configuration.

Read-only properties:
Property	Description
dynamic (yes | no)	
inactive (yes | no)	
name (string)	

/routing/filter/select-chain

Dynamic list of filter select chains that can be referenced in BGP/OSPF configuration.

Read-only properties:
Property	Description
dynamic (yes | no)	
inactive (yes | no)	
name (string)	



Multicast

    Creado por Māris B., actualizado por última vez por Edgars P. el jun 08, 2022 1 min de lectura

In This Section:

        Group Management Protocol
        IGMP Proxy
        PIM-SM


    Sin etiquetas 




    Creado por Edgars P., actualizado por última vez por Usuario desconocido (aleksis) el jun 13, 2022 2 min de lectura

    Introduction
    Configuration options
    Examples

Introduction

The Group Management Protocol allows any of the interfaces to become a receiver for the multicast stream. It allows testing the multicast routing and switching setups without using dedicated IGMP or MLD clients. The option is available since RouterOS v7.4 and it supports IGMP v1, v2, v3 and MLD v1, v2 protocols. 

Interfaces are using IGMP v3 and MLD v2 by default. In case IGMP v1, v2 or MLD v1 queries are received, the interfaces will fall back to the appropriate version. Once Group Management Protocol is created on the interface, it will send an unsolicited membership report (join) packet and respond to query messages. If the configuration is removed or disabled, the interface will send a leave message.
Configuration options

This section describes the Group Management Protocol configuration options.

Sub-menu: /routing gmp
groups (IPv4 | IPv6; Default: )	The multicast group address to be used by the interface, multiple group addresses are supported.
interfaces (name; Default: )	Name of the interface, multiple interfaces and interface lists are supported.
exclude (Default: )	

When exclude is set, the interface expects to reject multicast data from the configured sources. When this option is not used, the interfaces will emit source specific join for the configured sources.
sources (IPv4 | IPv6; Default: )	The source address list used by the interface, multiple source addresses are supported. This setting has an effect when IGMPv3 or MLDv2 protocols are active.
Examples

This example shows how to configure a simple multicast listener on the interface.

First, add an IP address on the interface:
/ip address
add address=192.168.10.10/24 interface=ether1 network=192.168.10.0

Then configure Group Management Protocol on the same interface:
/routing gmp
add groups=229.1.1.1 interfaces=ether1

It is now possible to check your multicast network to see if routers or switches have created the appropriate multicast forwarding entries and whether multicast data is being received on the interface (see the interface stats, or use a Packet Sniffer and Torch). 



    Creado por Edgars P., actualizado por última vez el may 31, 2022 4 min de lectura

    Summary
    Configuration options
    Examples

Summary

Internet Group Management Protocol (IGMP) proxy can implement multicast routing. It is forwarding IGMP frames and is commonly used when there is no need for a more advanced protocol like PIM.

IGMP proxy features:

    The simplest way how to do multicast routing;
    Can be used in topologies where PIM-SM is not suitable for some reason;
    It takes slightly less resources than PIM-SM;
    Ease of configuration.

On the other hand, IGMP proxy is not well suited for complicated multicast routing setups. Compared to PIM-based solutions, IGMP proxy does not support more than one upstream interface and routing loops are not detected or avoided.

By default, IGMP proxy upstream interface will send IGMPv3 membership reports and it will detect what IGMP version the upstream device (e.g. multicast router) is using based on received queries. In case IGMPv1/v2 queries are received, the upstream port will fall back to the lower IGMP version. It will convert back to IGMPv3 when IGMPv1/v2 querier present timer (400s) expires. Downstream interfaces of IGMP proxy will only send IGMPv2 queries.

RouterOS v7 has IGMP proxy configuration available in the main system package. Older RouterOS versions need an additional multicast package installed in order to use IGMP proxy. See more details about Packages.
Configuration options

General IGMP proxy configuration.

Sub-menu: /routing igmp-proxy
query-interval (time: 1s..1h; Default: 2m5s)	How often to send out IGMP Query messages over downstream interfaces.
query-response-interval (time: 1s..1h; Default: 10s)	How long to wait for responses to an IGMP Query message.
quick-leave	Specifies action on IGMP Leave message. If quick-leave is on, then an IGMP Leave message is sent upstream as soon as a leave message is received from the first client on the downstream interface. Use yes only in case there is only one subscriber behind the proxy.

Configure what interfaces will participate as IGMP proxy interfaces on the router. If an interface is not configured as an IGMP proxy interface, then all IGMP traffic received on it will be ignored.

Sub-menu: /routing igmp-proxy interface
alternative-subnets (IP/Mask; Default: )	By default, only packets from directly attached subnets are accepted. This parameter can be used to specify a list of alternative valid packet source subnets, both for data or IGMP packets. Has an effect only on the upstream interface. Should be used when the source of multicast data often is in a different IP network.
interface (name; Default: all)	Name of the interface.
threshold  (integer: 0..4294967295; Default: 1)	Minimal TTL. Packets received with a lower TTL value are ignored
upstream (yes | no; Default: no)	The interface is called "upstream" if it's in the direction of the root of the multicast tree. An IGMP forwarding router must have exactly one upstream interface configured. The upstream interface is used to send out IGMP membership requests.

It is possible to get detailed status information for each interface using the print status command.
[admin@MikroTik] /routing igmp-proxy interface print status 
Flags: X - disabled, I - inactive, D - dynamic; U - upstream 
 0  U interface=ether2 threshold=1 alternative-subnets="" upstream=yes source-ip-address=192.168.10.10 rx-bytes=3018487500 rx-packets=2012325 tx-bytes=0 tx-packets=0 

 1    interface=ether3 threshold=1 alternative-subnets="" upstream=no querier=yes source-ip-address=192.168.20.10 rx-bytes=0 rx-packets=0 tx-bytes=2973486000 tx-packets=1982324 

 2    interface=ether4 threshold=1 alternative-subnets="" upstream=no querier=yes source-ip-address=192.168.30.10 rx-bytes=0 rx-packets=0 tx-bytes=152019000 tx-packets=101346 
querier (read-only; yes|no)	Whether the interface is acting as an IGMP querier.
source-ip-address  (read-only; IP address)	The detected source IP for the interface.
rx-bytes (read-only; integer)	The total amount of received multicast traffic on the interface.
rx-packet (read-only; integer)	The total amount of received multicast packets on the interface.
tx-bytes (read-only; integer)	The total amount of transmitted multicast traffic on the interface.
tx-packet (read-only; integer)	The total amount of transmitted multicast packets on the interface.

Multicast forwarding cache (MFC) status.

Sub-menu: /routing igmp-proxy mfc
active-downstream-interfaces (read-only: name)	The packet stream is going out of the router through this interface.
bytes (read-only: integer)	The total amount of received multicast traffic.
group (read-only: IP address)	IGMP group address.
packets (read-only: integer)	The total amount of received multicast packets.
source (read-only: IP address)	The multicast data originator address.
upstream-interface (read-only: name)	The packet stream is coming into the router through this interface.
wrong-packets (read-only: integer)	

The total amount of received multicast packets that arrived on a wrong interface, for example, a multicast stream that is received on a downstream interface instead of an upstream interface.

RouterOS support static multicast forwarding rules for IGMP proxy. If a static rule is added, all dynamic rules for that group will be ignored. These rules will take effect only if IGMP-proxy interfaces are configured (upstream and downstream interfaces should be set) or these rules won't be active.
downstream-interfaces (name; Default: )	The received stream will be sent out to the listed interfaces only.
group (read-only: IP address)	The multicast group address this rule applies.
source (read-only: IP address)	The multicast data originator address.
upstream-interface (read-only: name)	The interface that is receiving stream data.
Examples

To forward all multicast data coming from the ether2 interface to the downstream bridge interface, where subscribers are connected, use the configuration below. Both interfaces should have an IP address.
/routing igmp-proxy interface
add interface=ether2 upstream=yes
add interface=bridge1

[admin@MikroTik] /routing igmp-proxy interface print
Flags: U - UPSTREAM
Columns: INTERFACE, THRESHOLD
#   INTERFACE  THRESHOLD
0 U ether2             1
1   bridge1            1

You may also need to configure alternative-subnets on the upstream interface in case the multicast sender address is in an IP subnet that is not directly reachable from the local router:
/routing igmp-proxy interface
set [find upstream=yes] alternative-subnets=192.168.50.0/24,192.168.60.0/24

To enable quick-leave, use the setting below:
/routing igmp-proxy
set quick-leave=yes



    Creado por Māris B., actualizado por última vez por Edgars P. el oct 23, 2023 9 min de lectura

    Summary
    Basic multicast routing on single device
    Multicast routing with static RP
    Property Reference
        Instance
        Interface template
        Interface
        Neighbor
        Static RP
        Upstream Information Base

Summary

IP Multicast is a technology that allows data to be efficiently shared with many recipients over the Internet. Senders transmit their data to a specific multicast IP address, and receivers indicate their interest in receiving data sent to that address. The network then takes care of delivering the data from senders to receivers.

If both the sender and receiver for a multicast group are on the same local network segment, routers are not required for the process. Communication can happen directly, and this can be enhanced with the use of IGMP snooping switches. However, if the sender and receiver are on different network segments, a multicast routing protocol must be used to establish the path for data transmission between them.

Protocol Independent Multicast - Sparse Mode (PIM-SM or PIM) enables RouterOS to support multicast streaming over the network area. PIM stands for Platform Independent Multicast, meaning it's not tied to any particular unicast routing. SM stands for Sparse-Mode, which means that specific control messages ensure that data is delivered only to network segments where there are receivers that want it. In addition to the routing protocols that manage data transmission between network segments, routers need a way to discover local receivers on their directly connected network segment. For IPv4, this is achieved through the Internet Group Management Protocol (IGMP), and Multicast Listener Discovery (MLD) for IPv6.

RouterOS v7 has PIM-SM configuration available in the main system package. Older RouterOS versions need an additional multicast package installed in order to use PIM-SM. See more details about Packages.

The feature is not supported on SMIPS devices (hAP lite, hAP lite TC and hAP mini).
Basic multicast routing on single device

Picture this scenario, you have got a router with two interfaces, namely ether1 and ether2, and each of them is set up in separate networks. Normally, the router will create connected routes and hosts on both networks will be able to communicate using unicast traffic. However, if you want to enable multicast communication between these networks, you'll need to configure multicast routing separately because it won't work otherwise. In this scenario, we are going to create a simple configuration. This involves creating a PIM instance and configuring the required interfaces.

Begin by ensuring that IP addresses are set up on the router's interfaces.
/ip address
add address=192.168.10.1/24 interface=ether1 network=192.168.10.0
add address=192.168.20.1/24 interface=ether2 network=192.168.20.0

Configure PIM instance. For this example, the default settings should work fine.
/routing pimsm instance
add name=pimsm-instance-1

Last, add interfaces and specify the PIM instance you created earlier.
/routing pimsm interface-template
add interfaces=ether1,ether2 instance=pimsm-instance-1

Now router starts listening to IGMP membership reports (client join messages) and will route multicast traffic to clients interested in receiving it.

To test the configuration, you can configure a multicast sender using RouterOS traffic-generator and IGMP client using GMP.
# Multicast Sender
/ip address
add address=192.168.10.10/24 interface=ether1 network=192.168.10.0
/tool traffic-generator packet-template
add interface=ether1 ip-dst=229.1.1.2 mac-dst=01:00:5E:01:01:02/FF:FF:FF:FF:FF:FF name=multicast
/tool traffic-generator quick tx-template=multicast mbps=10

# Multicast Client
/ip address
add address=192.168.20.10/24 interface=ether1 network=192.168.20.0
/routing gmp
add disabled=no groups=229.1.1.2 interfaces=ether1

To verify whether multicast traffic is being properly routed, monitor the received packet counters on the client interface or use tools like Torch or a Packet Sniffer.

It is also possible to monitor active multicast group on router:
/routing pimsm uib-g print
Columns: INSTANCE, GROUP
# INSTANCE          GROUP    
0 pimsm-instance-1  229.1.1.2

/routing pimsm uib-sg print
Flags: K - KEEPALIVE; S - SPT-BIT
Columns: INSTANCE, GROUP, SOURCE
#    INSTANCE          GROUP      SOURCE       
0 KS pimsm-instance-1  229.1.1.2  192.168.10.10

Multicast routing with static RP

In the upcoming example, we'll be working with multiple PIM routers, as shown in the diagram below. PIM-SM uses shared trees and to make this work, we need to designate a specific node as the multicast root distribution point. In PIM, this router is called the Rendezvous Point, or RP. There are various methods for selecting an RP in PIM, such as the Bootstrap Router (BSR) method. However, for this example, we'll be using a straightforward approach known as static RP configuration. This means that the administrator can manually specify one or more RPs for specific multicast groups.

To get started, we'll need to configure IP addresses and set up unicast routing. In this example, we'll use OSPF to exchange routing information between the routers. See more details about OSFP.
# R1 Rendezvous Point:
/interface bridge
add name=loopback
/ip address
add address=10.0.0.1 interface=loopback network=10.0.0.1
add address=10.0.1.1/24 interface=ether2 network=10.0.1.0
add address=10.0.2.1/24 interface=ether3 network=10.0.2.0
/routing ospf instance
add disabled=no name=ospf-instance-1 router-id=10.0.0.1
/routing ospf area
add disabled=no instance=ospf-instance-1 name=ospf-area-1
/routing ospf interface-template
add area=ospf-area-1 disabled=no interfaces=loopback,ether2,ether3

# R2:
/interface bridge
add name=loopback
/ip address
add address=10.0.0.2 interface=loopback network=10.0.0.2
add address=10.0.1.2/24 interface=ether1 network=10.0.1.0
add address=192.168.20.1/24 interface=ether12 network=192.168.20.0
/routing ospf instance
add disabled=no name=ospf-instance-1 router-id=10.0.0.2
/routing ospf area
add disabled=no instance=ospf-instance-1 name=ospf-area-1
/routing ospf interface-template
add area=ospf-area-1 disabled=no interfaces=loopback,ether1,ether12

# R3:
/interface bridge
add name=loopback
/ip address
add address=10.0.0.3 interface=loopback network=10.0.0.3
add address=10.0.2.3/24 interface=ether1 network=10.0.2.0
add address=192.168.30.1/24 interface=ether12 network=192.168.30.0
/routing ospf instance
add disabled=no name=ospf-instance-1 router-id=10.0.0.3
/routing ospf area
add disabled=no instance=ospf-instance-1 name=ospf-area-1
/routing ospf interface-template
add area=ospf-area-1 disabled=no interfaces=loopback,ether1,ether12

As in the previous example with a single router, we need to configure the PIM instance and add the necessary interfaces on all routers.
# R1 Rendezvous Point:
/routing pimsm instance
add disabled=no name=pimsm-instance-1
/routing pimsm interface-template
add instance=pimsm-instance-1 interfaces=loopback,ether2,ether3

# R2:
/routing pimsm instance
add disabled=no name=pimsm-instance-1
/routing pimsm interface-template
add instance=pimsm-instance-1 interfaces=loopback,ether1,ether12

# R3:
/routing pimsm instance
add name=pimsm-instance-1
/routing pimsm interface-template
add instance=pimsm-instance-1 interfaces=loopback,ether1,ether12

Now, let's take a look at our PIM neighbors and their current statuses. On R1, there are two neighbors, while on R2 and R3, there's only one neighbor each.
# R1 Rendezvous Point:
/routing pimsm neighbor print
Flags: R - DESIGNATED-ROUTER; J - JOIN-TRACKING
Columns: INSTANCE, ADDRESS, PRIORITY
#    INSTANCE          ADDRESS          PRIORITY
0 RJ pimsm-instance-1  10.0.1.2%ether2  1       
1 RJ pimsm-instance-1  10.0.2.3%ether3  1       

# R2:
/routing pimsm neighbor print 
Flags: R - DESIGNATED-ROUTER; J - JOIN-TRACKING
Columns: INSTANCE, ADDRESS, PRIORITY
#    INSTANCE          ADDRESS          PRIORITY
0  J pimsm-instance-1  10.0.1.1%ether1  1       

# R3:
/routing pimsm neighbor print 
Flags: J - JOIN-TRACKING
Columns: INSTANCE, ADDRESS, PRIORITY
#   INSTANCE          ADDRESS          PRIORITY
0 J pimsm-instance-1  10.0.2.1%ether1  1       

Finally, we will select one router to act as our Rendezvous Point (RP). We will configure the R1 loopback IP address on all PIM routers. It's important to ensure that each router has the correct routing information to reach the R1 loopback address.
# R1 Rendezvous Point:
/routing pimsm static-rp
add address=10.0.0.1 instance=pimsm-instance-1

# R2:
/routing pimsm static-rp
add address=10.0.0.1 instance=pimsm-instance-1

# R3:
/routing pimsm static-rp
add address=10.0.0.1 instance=pimsm-instance-1
Property Reference
Instance

The instance menu defines the main PIM-SM settings. The instance is then used for all other PIM-related configurations like interface-template, static RP, and Bootstrap Router.

Sub-menu: /routing pimsm instance
afi (ipv4 | ipv6; Default: ipv4)	Specifies address family for PIM.
bsm-forward-back (yes | no; Default: )	Currently not implemented.
crp-advertise-contained (yes | no; Default: )	

Currently not implemented.
name (text; Default: )	Name of the instance.
rp-hash-mask-length (integer: 0..4294967295; Default: 30 (IPv4), or 126 (IPv6))	The hash mask allows changing how many groups to map to one of the matching RPs.
rp-static-override (yes | no; Default: no)	Changes the selection priority for static RP. When disabled, the bootstrap RP set has a higher priority. When enabled, static RP has a higher priority.
ssm-range (IPv4 | IPv6; Default: )	Currently not implemented.
switch-to-spt (yes | no; Default: yes)	Whether to switch to Shortest Path Tree (SPT) if multicast data bandwidth threshold is reached. The router will not proceed from protocol phase one (register encapsulation) to native multicast traffic flow if this option is disabled. It is recommended to enable this option.
switch-to-spt-bytes (integer: 0..4294967295; Default: 0)	Multicast data bandwidth threshold. Switching to Shortest Path Tree (SPT) happens if this threshold is reached in the specified time interval. If a value of 0 is configured, switching will happen immediately.
switch-to-spt-interval (time; Default: )	Time interval in which to account for multicast data bandwidth, used in conjunction with switch-to-spt-bytes to determine if the switching threshold is reached.
vrf (name; Default: main)	Name of the VRF.
Interface template

The interface template menu defines which interfaces will participate in PIM and what per-interface configuration will be used.

Sub-menu: /routing pimsm interface-template
hello-delay (time; Default: 5s)	Randomized interval for the initial Hello message on interface startup or detecting new neighbor.
hello-period (time; Default: 30s)	Periodic interval for Hello messages.
instance (name; Default: )	Name of the PIM instance this interface template belongs to.
interfaces (name; Default: all)	List of interfaces that will participate in PIM.
join-prune-period (time; Default: 1m)	
join-tracking-support (yes | no; Default: yes)	

Sets the value of a Tracking (T) bit in the LAN Prune Delay option in the Hello message. When enabled, a router advertises its willingness to disable Join suppression. it is possible for upstream routers to explicitly track the join membership of individual downstream routers if Join suppression is disabled. Unless all PIM routers on a link negotiate this capability, explicit tracking and the disabling of the Join suppression mechanism are not possible.
override-interval (time; Default: 2s500ms)	Sets the maximum time period over which to randomize when scheduling a delayed override Join message on a network that has join suppression enabled.
priority (integer: 0..4294967295; Default: 1)	The Designated Router (DR) priority. A single Designated Router is elected on each network. The priority is used only if all neighbors have advertised a priority option. Numerically largest priority is preferred. In case of a tie or if priority is not used - the numerically largest IP address is preferred.
propagation-delay (time; Default: 500ms)	

Sets the value for a prune pending timer. It is used by upstream routers to figure out how long they should wait for a Join override message before pruning an interface that has join suppression enabled.
source-addresses (IPv4 | IPv6; Default: )	
Interface

The interface menu shows all interfaces that are currently participating in PIM and their statuses. This menu contains dynamic and read-only entries that get created by defined interface templates.

Sub-menu: /routing pimsm interface
address (IP%interface@vrf)	Shows IP address, interface, and VRF.
designated-router (yes | no)	
dr (yes | no)	
dynamic (yes | no)	
instance (name)	Name of the PIM instance this interface template belongs to.
join-tracking (yes | no)	


override-interval (time)	
priority (integer: 0..4294967295)	
propagation-delay (time)	
Neighbor

The neighbor menu shows all detected neighbors that are running PIM and their statuses. This menu contains dynamic and read-only entries.

Sub-menu: /routing pimsm neighbor
address (IP%interface)	Shows the neighbor's IP address and local interface the neighbor is detected on.
designated-router (yes | no)	

Shows whether the neighbor is elected as Designated Router (DR).
instance (name)	Name of the PIM instance this neighbor is detected on.
join-tracking (yes | no)	

Indicates the neighbor's value of a Tracking (T) bit in the LAN Prune Delay option in the Hello message.
override-interval (time)	Indicates the neighbor's value of the override interval in the LAN Prune Delay option in the Hello message.
priority (integer: 0..4294967295)	Indicates the neighbor's priority value.
propagation-delay (time)	Indicates the neighbor's value of the propagation delay in the LAN Prune Delay option in the Hello message.
timeout (time)	Shows the reminding time after the neighbor is removed from the list if no new Hello message is received. The hold time equals to neighbor's hello-period * 3.5. 
Static RP

The static-rp menu allows manually defining the multicast group to RP mappings. Such a mechanism is not robust to failures but does at least provide a basic interoperability mechanism.

Sub-menu: /routing pimsm static-rp
address (IPv4 | IPv6; Default: )	The IP address of the static RP.
group (IPv4 | IPv6; Default: 224.0.0.0/4)	The multicast group that belongs to a specific RP.
instance (name; Default: )	Name of the PIM instance this static RP belongs to.
Upstream Information Base

The upstream information base menus show the any-source multicast (*,G) and source-specific multicast (S,G) groups and their statuses. These menus contain only read-only entries.

Sub-menu: /routing pimsm uib-g
group (IPv4 | IPv6)	The multicast group address.
instance (name)	Name of the PIM instance the multicast group is created on.
rp (IPv4 | IPv6)	

The address of the Rendezvous Point for this group.
rp-local (yes | no)	Indicates whether the multicast router itself is RP.
rpf (IP%interface)	The Reverse Path Forwarding (RPF) indicates the router address and outgoing interface that a Join message for that group is directed to.

Sub-menu: /routing pimsm uib-sg
group (IPv4 | IPv6)	The multicast group address.
instance (name)	Name of the PIM instance the multicast group is created on.
keepalive (yes | no)	
register (join | join-pending | prune)	
rpf (IP%interface)	The Reverse Path Forwarding (RPF) indicates the router address and outgoing interface that a Join message for that group is directed to.
source (IPv4 | IPv6)	The source IP address of the multicast group.
spt-bit (yes | no)	

The Shortest Path Tree (SPT) bit indicates whether forwarding is taking place on the (S,G) Shortest Path Tree or on the (*,G) tree. A router can have an (S,G) state and still be forwarding on a (*,G) state during the interval when the source-specific tree is being constructed. When SPT bit is false, only the (*,G) forwarding state is used to forward packets from S to G. When SPT bit is true, both (*,G) and (S,G) forwarding states are used.



    Creado por Māris B., actualizado por última vez el may 30, 2022 1 min de lectura

Routing stats.


/routing/stats/origin


/routing/stats/process

This menu allows to monitor debugging information of all the routing processes.
[admin@rack1_b35_CCR1036] /routing/stats/process> print interval=1
Columns: TASKS, PRIVATE-MEM-BLOCKS, SHARED-MEM-BLOCKS, PSS, RSS, VMS, RETIRED, ID, PID, RPID, PROCESS-TIME, KERNEL-TIME, CUR-BUSY, MAX-BUSY, CUR-CALC, MAX-CALC
 # TASKS                         PRIVATE-  SHARED-ME  PSS        RSS     VMS      RETIRED  ID       PID  RPID  PROCESS  KERNEL-TIME  CUR-BUSY  MAX-BUSY  CUR-CALC  MAX-CALC
 0 routing tables                768.0KiB  1792.0KiB  2399.0KiB  6.4MiB  22.1MiB       34  main     317     0  2s260ms  1s940ms      10ms      170ms     20ms      1s210ms 
   rib                                                                                                                                                                     
 1 fib                           0         0          2263.0KiB  6.2MiB  22.3MiB           fib      351     1  250ms    1s720ms                1s210ms             1s210ms 
 2 ospf                          256.0KiB  256.0KiB   2559.0KiB  6.6MiB  22.3MiB           ospf     384     1  4s710ms  5s210ms                20ms                20ms    
 3 pimsm                         256.0KiB  0          2252.0KiB  5.8MiB  22.3MiB           pim      386     1  200ms    450ms                  10ms                10ms    
 4 fantasy                       0         0          2031.0KiB  5.1MiB  22.3MiB           fantasy  388     1  270ms    390ms                  10ms                10ms    
 5 configuration and reporting   0         512.0KiB   2351.0KiB  6.4MiB  22.3MiB           static   389     1  310ms    430ms                  10ms                10ms    
 6 ldp                           256.0KiB  256.0KiB   2455.0KiB  6.4MiB  22.3MiB           mpls     387     1  340ms    350ms                  40ms                40ms    
   Copy                                                                                                                                                                    
 7 rip                           256.0KiB  0          2230.0KiB  5.7MiB  22.3MiB           rip      377     1  230ms    380ms                  10ms                10ms    
 8 routing policy configuration  512.0KiB  512.0KiB   2355.0KiB  5.6MiB  22.3MiB           policy   358     1  240ms    390ms                  10ms                10ms    
 9 BGP service                   512.0KiB  0          2592.0KiB  6.3MiB  22.3MiB           bgp      364     1  360ms    600ms                  10ms                10ms    
10 BFD service                   256.0KiB  0          2206.0KiB  5.7MiB  22.3MiB           12       371     1  230ms    370ms                  10ms                10ms    
11 BGP Input 111.11.0.1          512.0KiB  512.0KiB   2560.0KiB  6.4MiB  22.3MiB        1  22       679     1  140ms    350ms                  10ms                10ms    
   BGP Output 111.11.0.1                                                                                                                                                   
12 Global memory                           256.0KiB                                        global     0     0  



/routing/stats/step

