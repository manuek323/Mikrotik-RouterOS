
Authentication, Authorization, Accounting

    Creado por Usuario desconocido (emils), actualizado por última vez el may 31, 2022 1 min de lectura

In This Section:

        Certificates
        Dot1X
        HotSpot - Captive portal
        PPP AAA
        RADIUS
        User
        User Manager




    Creado por Artūrs C., actualizado por última vez por Matīss O. el jun 17, 2025 6 min de lectura

Overview

    Overview
        Certificate Template
            Certificate properties
            Certificate read-only properties
        Sign Certificate
        Export Certificate
        Import Certificate
        Settings
    Let's Encrypt certificates
        Server properties
            Example:
    SCEP
    Built-in root certificate authorities

/certificate

The general menu is used to manage certificates, add templates, issue certificates, and manage CRL and SCEP Clients.
Certificate Template

Certificate templates are used to prepare a desired certificate for signing.

Certificate template is deleted right after a certificate is signed or a certificate request command is executed
/certificate
add name=CA-Template common-name=CAtemp key-usage=key-cert-sign,crl-sign
add name=Server common-name=server
add name=Client common-name=client

To print out certificates:
[admin@4k11] /certificate> print detail 
Flags: K - private-key; L - crl; C - smart-card-key; A - authority; I - issued, R - revoked; E - expired; T - trusted 
 0         name="CA-Template" key-type=rsa common-name="CAtemp" key-size=2048 subject-alt-name="" days-valid=365 key-usage=key-cert-sign,crl-sign 

 1         name="Server" key-type=rsa common-name="server" key-size=2048 subject-alt-name="" days-valid=365 
           key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client 

 2         name="Client" key-type=rsa common-name="client" key-size=2048 subject-alt-name="" days-valid=365 
           key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client 
Certificate properties
common-name (string)	Certificate common name
copy-from (name)	Certificate name from which to copy general settings
country (string)	Certificate issuer country
days-valid (days Default: 365)	Days certificate will be valid after signing
digest-algorithm (md5 | sha1 | sha256 | sha384 | sha512 Default: sha256 )	Certificate public key algorithm
key-size (1024 | 1536 | 2048 | 4096 | 8192 | prime256v1 | secp384r1 | secp521r1 Default: 2048)	Certificate public key size

key-usage (code-sign | crl-sign | decipher-only | dvcs | encipher-only     key-cert-sign | ocsp-sign | tls-client | content-commitment | data-encipherment | digital-signature | email-protect | key-agreement | key-encipherment | timestamp | tls-server Default: digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client)
	Certificate usage

locality (string)
	Certificate issuer locality

name (string)
	Certificate name

organization (string)
	Certificate issuer organization

state (string)
	Certificate issuer state

subject-alt-name (DNS: | IP: | email:)
	Certificate subject alternative name

trusted (no| yes Default: )
	

unit (string)
	Certificate issuer organizational unit
Certificate read-only properties

After a certificate is signed, most of a certificate template properties are converted to read-only (except name and trusted)
serial-number	Certificate serial number
fingerprint	
akid	Certificate authority ID
skid	Certificate subject ID
invalid-before	Date and time before which a certificate expired
invalid-after	Date and time after which a certificate expired

expires-after 
	
key-type	
ca	Certificate authority common name

If the CA certificate is removed, all issued certificates in the chain are also removed.
Sign Certificate

Certificates should be signed. In the following example, we will sign certificates and add CRL URL for the server certificate:
/certificate 
sign CA-Template 
sign Client      
sign Server ca-crl-host=192.168.88.1 name=ServerCA

Let`s check is the certificates are signed:
[admin@MikroTik] /certificate> print
Flags: K - private-key; L - crl; A - authority; T - trusted
Columns: NAME, COMMON-name, FINGERPRINT
#        NAME         COMMON  FINGERPRINT                                                     
0  K AT  CA-Template  CAtemp  0c7aaa7607a4dde1bbf33deaae6be7bac9fe4064ba47d64e8a73dcefad6cfc38
1  K AT  Client       client  b3ff25ecb166ea41e15733a7493003f3ea66310c10390c33e98fe32364c3659f
2  KLAT  ServerCA     server  152b88c9d81f4b765a59e2302e01efd1fbf11ceeed6e59f4974e87787a5bb980

For a video example click here.

The time of the key signing process depends on the key size of a specific certificate. With values of 4k and higher, it might take a substantial time to sign this specific certificate on less powerful CPU-based devices.


Export Certificate

It is possible to export client certificates with keys and CA certificates in two formats - PEM or PCKS12.
export-passphrase (string Default: none)	Passphrase that will be used for exported certificate private key encryption.
file-name (string Default: cert_export_[Certificate name].crt/key/pkcs12)	Exported certificate file name.
type (pem | pkcs12 Default: pem)	

Exported certificate type.

In case of PEM, certificate will be exported with CRT extension, if export-passphrase is specified, also encrypted private KEY file will be exported.

In case of PKCS12, certificate will be exported with P12 extension, if export-passphrase is specified, exported certificate will contain encryted private key.
/certificate 
export-certificate CA-Template 
export-certificate ServerCA export-passphrase=yourpassphrase
export-certificate Client export-passphrase=yourpassphrase

Exported certificates are available under the /file section:
[admin@MikroTik] > file print
Columns: NAME, TYPE, SIZE, CREATION-TIME
#  NAME                         TYPE        SIZE  CREATION-TIME       
0  skins                        directory         jan/19/2019 00:00:04
1  flash                        directory         jan/19/2019 01:00:00
2  pub                          directory         jan/19/2019 02:42:16
3  cert_export_CA-Template.crt  .crt file   1119  jan/19/2019 04:15:21
4  cert_export_ServerCA.crt     .crt file   1229  jan/19/2019 04:15:42
5  cert_export_ServerCA.key     .key file   1858  jan/19/2019 04:15:42
6  cert_export_Client.crt       .crt file   1164  jan/19/2019 04:15:55
7  cert_export_Client.key       .key file   1858  jan/19/2019 04:15:55

Exporting certificates requires "sensitive" user policy.
Import Certificate

To import certificates, certificates must be uploaded to a device using one of the file upload methods.

Certificates must be imported as a file.

Supported are PEM, DER, CRT, PKCS12 formats.
name (string Default: file-name_number)	A certificate name that will be shown in the certificate manager
file-name (string)	A file name that will be imported
passphrase (string Default: none)	File passphrase if there is such
trusted (yes | no Default: yes)	Adds trusted flag for imported certificate


[admin@MikroTik] > /certificate/import file-name=certificate_file_name name=name_example passphrase=file_passphrase
     certificates-imported: 2
     private-keys-imported: 1
            files-imported: 1
       decryption-failures: 0
  keys-with-no-certificate: 0

[admin@MikroTik] > /certificate/print 
Flags: K - PRIVATE-KEY; T - TRUSTED
Columns: NAME, COMMON-NAME
#    NAME            COMMON-NAME                                                  
0 KT name_example    cert    
1  T name_example_1  ca   
Settings

/certificate settings allows configuring Certificate Revocation List (CRL) settings.

By default, CRL is not utilized, and certificates are not verified for revocation status.
builtin-trust-anchors (trusted | not-trusted Default: see description)	

Allows to trust built-in root certificate authorities

Default builtin-trust-anchors after upgrade from older RouterOS version: not-trusted

Default builtin-trust-anchors after configuration reset: trusted
crl-download (yes | no Default: no)	Whether to automatically download/update CRL
crl-store (ram | sytem Default: ram)	

Where to store downloaded CRL information

CRL will be automatically renewed every hour for certificates which have "trusted=yes" using http protocol (ldap and ftp is currently unsupported)
crl-use (yes | no Default: no)	Whether to use CRL

If /certificate/settings/set crl-use is set to yes, RouterOS will check CRL for each certificate in a certificate chain, therefore, an entire certificate chain should be installed into a device - starting from Root CA, intermediate CA (if there are such), and certificate that is used for specific service.

An example on importing a root certificate.
Let's Encrypt certificates

RouterOS v7 has Let's Encrypt (letsencrypt) certificate support for the 'www-ssl' service. To enable the Let's Encrypt certificate service with automatic certificate renewal, use the 'enable-ssl-certificate' command:
/certificate enable-ssl-certificate dns-name=my.domain.com

Note that the DNS name must point to the router. If the dns-name is not specified, it will default to the automatically generated /ip cloud name (ie. http://example.sn.mynetname.net)

If the used DNS name is not the default http://example.sn.mynetname.net, port TCP/80 must be available from the WAN.

The certificate is automatically renewed when 80% of its validity period had passed.

Different acme servers

It is possible to use not only Let's Encrypt certificate service, but any other you like.

The DNS name must point to the router and port TCP/80 must be available from the WAN.

The certificate is automatically renewed when 80% of its validity period had passed.
Server properties
directory-url (string)	ACME directory url.
eab-hmac-key (string)	HMAC key for ACME External Account Binding (optional).
eab-kid (string)	

Key identifier (optional).
Example:
/certificate/enable-ssl-certificate directory-url=https://acme.zerossl.com/v2/DV90 dns-name=mydomain.abc eab-hmac-key=4ac7xuxAdV4mIncwIIEhLjExsFZ4v1rWgDkX4SKXD25pMVtF85GZJYSF8UKXUOjzSr2g3-v4lhL57NHFaQ42Ff eab-kid=GHWaP2_Ghx73vcU8ricAKU 
SCEP

SCEP is using HTTP protocol and base64 encoded GET requests. Most of the requests are without authentication and cipher, however, important ones can be protected if necessary (ciphered or signed using a received public key).

SCEP client in RouterOS will:

    get CA certificate from CA server or RA (if used);
    user should compare the fingerprint of the CA certificate or if it comes from the right server;
    generate a self-signed certificate with a temporary key;
    send a certificate request to the server;
    if the server responds with status x, then the client keeps requesting until the server sends an error or approval.

The SCEP server supports the issuance of one certificate only. RouterOS supports also renew and next-ca options:

    renew - the possibility to renew the old certificate automatically with the same CA.
    next-ca - possibility to change the current CA certificate to the new one.

The client polls the server for any changes, if the server advertises that the next-ca is available, then the client may request the next CA or wait until CA almost expires and then request the next-ca.

The RouterOS client by default will try to use POST, AES, and SHA256 if the server advertises that. If the above algorithms are not supported, then the client will try to use 3DES, DES and SHA1, MD5.

SCEP certificates are renewed when 3/4 of their validity time has passed.


Built-in root certificate authorities

Starting from RouterOS 7.19, RouterOS contains list of built-in root certificate authorities that can be used for host certificate verification. 

Now it is possible to use DoH, download Adlist from URL or use fetch tool with certificate validation without the need to manually import the relevant root certificate.

The list of built-in root certificate authorities is accessible in System → Certificates → Built In CA


When upgrading from older RouterOS version, by default built-in root certificates are not trusted.

Execute /certificate/settings/set builtin-trust-anchors=trusted to change trust settings for these certificates




    Creado por Normunds R., actualizado por última vez por GG el mar 06, 2024 9 min de lectura

    Summary
    Client
    Server
    Examples
        RouterOS Authenticator configuration
            Port based VLAN ID assignment
            Dynamic switch rule configuration
        RouterOS Supplicant configuration


Summary

Dot1X is implementation of IEEE 802.1X standard in RouterOS. Main purpose is to provide port-based network access control using EAP over LAN also known as EAPOL. 802.1X consists of a supplicant (client), an authenticator (server) and an authentication server (RADIUS server). Both authenticator and supplicant sides are supported in RouterOS, as well as authentication server when User Manager package is installed. Supported EAP methods for supplicant are EAP-TLS, EAP-TTLS, EAP-MSCHAPv2 and PEAPv0/EAP-MSCHAPv2.

Feature is not supported on SMIPS devices (hAP lite, hAP lite TC and hAP mini).
Client

Supplicant configuration settings.

Sub-menu: /interface dot1x client
anon-identity (string; Default: )	Identity for outer layer EAP authentication. Used only with eap-ttls and eap-peap methods. If not set, value from identity parameter will be used for outer layer EAP authentication.
client-certificate (string; Default: )	Name of a certificate listed in System/Certificates. Necessary when eap-tls method is used.
comment (string; Default: )	Short description of the entry.
disabled (yes | no; Default: no)	Whether client is enabled or not.
eap-methods (eap-tls | eap-ttls | eap-peap | eap-mschapv2; Default: )	Ordered list of EAP methods used for authentication.
identity (string; Default: )	Supplicant identity used for EAP authentication.
interface (string; Default: )	Name of the interface the client will run on.
password (string; Default: )	Cleartext password for supplicant.


Read only properties
status (authenticated | authenticating | disabled)	Possible statuses:

    authenticated - the client has successfully authenticated;
    authenticated without server - access to the port is granted without communication with server;
    authenticating - the server is reached and authentication process is ongoing;
    connecting - initial stage of the authentication process;
    disabled - the client is disabled;
    error - an internal error has occurred;
    interface is down - the parent interface is not running;
    rejected - the server denied the authentication.

Server

A RouterOS dot1x server acts as an authenticator. An interface where dot1x server is enabled will block all traffic except for EAPOL packets which is used for the authentication. After client is successfully authenticated, the interface will accept all received traffic on the port. If the interface is connected to a shared medium with multiple hosts, the traffic will be accepted from all hosts when at least one client is successfully authenticated. However, it is possible to configure dynamic switch rules to accept only the authenticated user source MAC address and drop all other source MAC addresses. In case of failed authentication, it is possible to accept the traffic with a dedicated port VLAN ID. 

When a dot1x server is created on a bridge port, the bridge should be running (R/M)STP, otherwise EAP packets from the client will not be correctly accepted. Bridge interface is created with protocol-mode=rstp by default. If the bridge port should not send any BPDUs or any received BPDUs should be ignored, use edge=yes configuration on bridge ports. 

Sub-menu: /interface dot1x server
accounting (yes | no; Default: yes)	Whether to send RADIUS accounting requests to authentication server.
auth-timeout (time; Default: 1m)	Total time available for EAP authentication.
auth-types (dot1x | mac-auth; Default: dot1x)	Used authentication type on a server interface. When both options are selected at the same time, the server will prefer dot1x authentication type and only after 3 retrans-timeout periods, the authentication type will fall back to mac-auth. In order for mac-auth authentication type to work, the server interface should receive at least one frame containing a client's device source MAC address.
comment (string; Default: )	Short description of the entry.
disabled (yes | no; Default: no)	Whether server config is enabled or not.
guest-vlan-id (integer: 1..4094; Default: !guest-vlan-id)	Assigned VLAN when end devices does not support dot1x authentication and no mac-auth fall back is configured. The setting will apply after 3 retrans-timeout periods. Once dot1x enabled client is created and successful re-authentication happened, the port is removed from the guest VLAN. This setting is available since RouterOS 7.2 version and has an effect when bridge vlan-filtering is enabled. By default, guest VLAN is disabled.
interface (string; Default: )	Name of the interface or interface list the server will run on.
interim-update (time; Default: 0s)	Interval between scheduled RADIUS Interim-Update messages.
mac-auth-mode (mac-as-username | mac-as-username-and-password; Default: mac-as-username)	Allows to control User-Name and User-Password RADIUS attributes when using MAC authentication.
radius-mac-format (XX-XX-XX-XX-XX-XX | XX:XX:XX:XX:XX:XX | XXXXXXXXXXXX | xx-xx-xx-xx-xx-xx | xx:xx:xx:xx:xx:xx | xxxxxxxxxxxx; Default: XX:XX:XX:XX:XX:XX)	Controls how the MAC address of the client is encoded in the User-Name and User-Password attributes when using MAC authentication.
reauth-timeout (time; Default: !reauth-timeout)	Enables server port re-authentication. When enabled with dot1x authentication type, server will try to re-authenticate a client by sending EAP-Request Identity to the client. When enabled with mac-auth authentication type, server will try to re-authenticate client with RADIUS server by using the last seen MAC address. This setting is available since RouterOS 7.2 version. By default, re-authentication is disabled.  
reject-vlan-id (integer: 1..4094; Default: !reject-vlan-id)	Assigned VLAN when authentication failed and a RADIUS server responded with an Access-Reject message. This property will not apply if the RADIUS server is not responding at all, the client authentication will simply timeout and the service will be unavailable. This property only has an effect when bridge vlan-filtering is enabled. By default, reject VLAN is disabled.
retrans-timeout (time; Default: 30s)	Time interval between message re-transmissions if no response is received from supplicant.
server-fail-vlan-id (integer: 1..4094; Default: !server-fail-vlan-id)	Assigned VLAN when RADIUS server is not responding and request timeout has elapsed. This setting is available since RouterOS 7.2 version and has an effect when bridge vlan-filtering is enabled. By default, server-fail VLAN is disabled.


Currently authenticated clients are listed in the active menu (read only properties).

Sub-menu: /interface dot1x server active
auth-info (string)	

Authentication information:

    dot1x
    dot1x (guest vlan)
    dot1x (reject vlan)
    dot1x (server fail vlan)
    mac-auth
    mac-auth (reject vlan)
    mac-auth (server fail vlan)

client-mac (mac-address)	MAC Address of the supplicant.
interface (string)	Name of the interface.
session-id (string)	Unique session identifier.
username (string)	Identity of the supplicant.
vlan-id (string)	Untagged VLAN ID that is assigned to the interface. VLAN ID filtering must be enabled on bridge.


Statuses of all active dot1x server interfaces are listed in the state menu (read only properties).

Sub-menu: /interface dot1x server state
interface (string)	Name of the interface.
status (string)	Possible interface statuses:

    authorized - access to interface is granted;
    iface-down - interface is not running;
    rejected-holding - access was rejected by the RADIUS server;
    un-authorized - access to interface is not granted.

Examples

Below are described the most common configuration examples for dot1x server and client.
RouterOS Authenticator configuration

Start off by adding a new RADIUS client. The authentication server (RADIUS) does not necessary have to be in the same LAN as authenticator, but it must be reachable from the authenticator, so any firewall limitations must be considered.
/radius 
add address=10.1.2.3 secret=radiussecret service=dot1x

 If RADIUS communication is done over public network, it is advised to use RadSec for RADIUS communication. More information: RADIUS

Add new dot1x server instances.
/interface dot1x server
add interface=ether2 interim-update=30s comment=accounted
add interface=ether12 accounting=no comment=notaccounted
Port based VLAN ID assignment

It is possible to assign an authenticated interface to a specific VLAN ID using bridge VLAN filtering. This can be done using RADIUS Tunnel-Type, Tunnel-Medium-Type and Tunnel-Private-Group-ID attributes. Note that only devices with hardware offloaded VLAN filtering will be able to do this in switch chip. 

First of all, make sure the interface is added to a bridge which has VLAN filtering enabled.
/interface bridge
add name=bridge1 vlan-filtering=yes
/interface bridge port
add bridge=bridge1 interface=ether1
add bridge=bridge1 interface=ether2
add bridge=bridge1 interface=ether12

It is necessary to add static VLAN configuration for tagged VLAN traffic to be sent over ether1 interface.
/interface bridge vlan
add bridge=bridge1 tagged=ether1 vlan-ids=2
add bridge=bridge1 tagged=ether1 vlan-ids=12

With enabled RADIUS debug logs it is possible to see complete RADIUS message packets with all attributes. In our example, Tunnel attributes are received in Access-Accept message from RADIUS server:
09:51:45 radius,debug,packet received Access-Accept with id 64 from 10.1.2.3:1812
09:51:45 radius,debug,packet     Tunnel-Type = 13 
09:51:45 radius,debug,packet     Tunnel-Medium-Type = 6 
09:51:45 radius,debug,packet     Tunnel-Private-Group-ID = "12" 
(..)
09:51:45 radius,debug,packet     User-Name = "dot1x-user" 

The VLAN ID is now present in active session list and untagged ports are added to previously created static VLAN configuration.
/interface dot1x server active print 
 0 interface=ether12 username="dot1x-user" user-mac=00:0C:42:EB:71:F6 session-id="86b00006" vlan=12 

/interface bridge vlan print detail 
Flags: X - disabled, D - dynamic 
 0 D bridge=bridge1 vlan-ids=1 tagged="" untagged="" current-tagged="" current-untagged=bridge1,ether3 

 1   bridge=bridge1 vlan-ids=2 tagged=ether1 untagged="" current-tagged=ether1 current-untagged=ether2 

 2   bridge=bridge1 vlan-ids=12 tagged=ether1 untagged="" current-tagged=ether1 current-untagged=ether12 
Dynamic switch rule configuration

In some network configurations, additional access rules are needed for a particular supplicant to restrict or allow certain network services. This can be done using a Mikrotik-Switching-Filter attribute, please see the RADIUS vendor dictionary. When a client is successfully authenticated by an authentication server, the server can pass back the Mikrotik-Switching-Filter attribute. Based on the received information, the authenticator will create dynamic access rules on a switch port where the client resides. These rules will be active as long as the client session is active and the interface is running. There are certain order and restrictions regarding correct switch rule implementation:

    The mac-protocol, src-mac-address (available only since RouterOS 7.2 version), src-address (IPv4/mask, available only since RouterOS 7.2 version), dst-address (IPv4/mask), protocol (IPv4) src-port (L4, available only since RouterOS 7.2 version), dst-port (L4) conditional parameters are supported
    Hexadecimal or decimal representation can be used for mac-protocol and protocol parameters (e.g. protocol 17 or protocol 0x11)
    The src-port and dst-port support single or range values (e.g. src-port 10 or src-port 10-20)
    The src-mac-address support "xx:xx:xx:xx:xx:xx" or "xxxxxxxxxxxx" formats, and switch rule without any source MAC address can be set with "none" keyword (e.g. src-mac-address none)
    The src-mac-address (if not already set by the attribute), switch and ports conditional parametrs are automatically set for each rule
    Each rule should end with an action property, supported values are either drop or allow. If no action property is set, the default allow value will be used.
    Multiple rules are supported for a single supplicant and they must be separated by a comma ","

Below are some examples of Mikrotik-Switching-Filter attributes and dynamic switch rules they create:
# Drop ARP frames (EtherType: 0x0806 or 2054)
Mikrotik-Switching-Filter = "mac-protocol 2054 action drop"

/interface ethernet switch rule print
Flags: X - disabled, I - invalid, D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF mac-protocol=arp copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports=""

# Allow UDP (IP protocol: 0x11 or 17) destination port 100 and drop all other packets
Mikrotik-Switching-Filter = "protocol 17 dst-port 100 action allow, action drop"

/interface ethernet switch rule print
Flags: X - disabled, I - invalid, D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF protocol=udp dst-port=100 copy-to-cpu=no redirect-to-cpu=no mirror=no 

 1  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports=""

# Allow only authenticated source MAC address, drop all other packets
Mikrotik-Switching-Filter = "action allow, src-mac-address none action drop"

/interface ethernet switch rule print 
Flags: X - disabled, I - invalid; D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 src-mac-address=CC:2D:E0:01:6D:EB/FF:FF:FF:FF:FF:FF copy-to-cpu=no redirect-to-cpu=no mirror=no 

 1  D ;;; dot1x dynamic
      switch=switch1 ports=ether1 copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports="" 


In our example, Supplicant2 on ether2 is only allowed to access the 192.168.50.0/24 network with UDP destination port 50, all other traffic should be dropped. First, make sure that hardware offloading is working on bridge ports, otherwise switch rules might not work properly.
/interface bridge port print
Flags: X - disabled, I - inactive, D - dynamic, H - hw-offload 
 #     INTERFACE                   BRIDGE                   HW  PVID PRIORITY  PATH-COST INTERNAL-PATH-COST    HORIZON
 0   H ether1                      bridge1                  yes    1     0x80         10                 10       none
 1   H ether2                      bridge1                  yes    1     0x80         10                 10       none
 2   H ether12                     bridge1                  yes    1     0x80         10                 10       none


With enabled RADIUS debug logs it is possible to see complete RADIUS message packets with all attributes. In our example, Mikrotik-Switching-Filter attribute is received in Access-Accept message from Radius server:
02:35:38 radius,debug,packet received Access-Accept with id 121 from 10.1.2.3:1812 
(..)
02:35:38 radius,debug,packet     MT-Switching-Filter = "mac-protocol 2048 dst-address 192.168.50.0/24 dst-port 50 protocol 17 action allow,action drop"


The dynamic switch rules are now present under the switch menu:
/interface ethernet switch rule print
Flags: X - disabled, I - invalid, D - dynamic 
 0  D ;;; dot1x dynamic
      switch=switch1 ports=ether2 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF mac-protocol=ip dst-address=192.168.50.0/24 protocol=udp dst-port=50 copy-to-cpu=no redirect-to-cpu=no mirror=no 

 1  D ;;; dot1x dynamic
      switch=switch1 ports=ether2 src-mac-address=CC:2D:E0:11:22:33/FF:FF:FF:FF:FF:FF copy-to-cpu=no redirect-to-cpu=no mirror=no new-dst-ports="" 

Dynamic switch rules will only apply to RouterBoards with switch rule support - CRS3xx, CRS5xx series switches, CCR2116, CCR2216, and devices with QCA8337, Atheros8327 and Atheros8316 switch chips. CRS1xx/2xx series switches do no support this functionality. Take into consideration the maximum number of rules for each device, see CRS3xx, CRS5xx, CCR2116, CCR2216 table and basic switch chip table
RouterOS Supplicant configuration

CA certificates are required for eap-tls, eap-ttls and eap-peap authentication methods. Additionally a client certificate is required for eap-tls method. For this example we have already imported a P12 certificate bundle with self signed client and CA certificates. For more information how to import certificates in RouterOS, please visit System/Certificates.
/certificate print 
Flags: K - private-key, L - crl, C - smart-card-key, A - authority, I - issued, R - revoked, E - expired, T - trusted 
 #         NAME                                            COMMON-NAME                                         SUBJECT-ALT-NAME                             FINGERPRINT                                        
 0 K  A  T dot1x-client                                    ez_dot1x-client                                     IP:10.1.2.34
 1  L A  T dot1x CA                                        ca            

Simply add a new dot1x client instance that will initiate authentication process.
/interface dot1x client
add anon-identity=anonymous client-certificate=dot1x-client eap-methods=eap-tls identity=dot1x-user interface=ether1 password=dot1xtest

If authentication was successful, the interface should have status authenticated.
/interface dot1x client print 
Flags: I - inactive, X - disabled 
 0   interface=ether1 eap-methods=eap-peap identity="dot1x-user" password="dot1xtest" anon-identity="anonymous" client-certificate=dot1x-client status="authenticated" 
 
 
 
 
 

    Creado por Artūrs C., actualizado por última vez por Normunds R. el oct 03, 2024 8 min de lectura

    Introduction
        HotSpot Gateway features:
    Example
        Parameters asked during the setup process
    IP HotSpot
    IP HotSpot Active
    IP HotSpot Host
    IP Binding
    Cookies
    Using DHCP option to advertise HotSpot URL

Introduction

The MikroTik HotSpot Gateway provides authentication for clients before access to public networks.

Hotspot (captive portal) - uses web-proxy and it is capable of using only the default routing table, at the moment. Making the PCC(per connection-classifier) not a valid method, due to the, multiple routing tables used.
HotSpot Gateway features:

    different authentication methods of clients, using a local client database on the router, or remote RADIUS server;
    users accounting in a local database on the router, or on remote RADIUS server;
    a walled-garden system, access to some web pages without authorization;
    login page modification, where you can put information about the company;
    automatic and transparent change any IP address of a client to a valid address;
    HotSpot can inform DHCP clients that they are behind a captive portal (RFC7710);

A hotspot can work reliably only when IPv4 is used. Hotspot relies on Firewall NAT rules which currently are not supported for IPv6.
Example
[admin@MikroTik] /ip hotspot> setup 
Select interface to run HotSpot on 

hotspot interface: ether3
Set HotSpot address for interface 

local address of network: 10.5.50.1/24
masquerade network: yes
Set pool for HotSpot addresses 

address pool of network: 10.5.50.2-10.5.50.254
Select hotspot SSL certificate 

select certificate: none
Select SMTP server 

ip address of smtp server: 0.0.0.0
Setup DNS configuration 

dns servers: 10.1.101.1
DNS name of local hotspot server 

dns name: myhotspot
Create local hotspot user 

name of local hotspot user: admin
password for the user: 
[admin@MikroTik] /ip hotspot>

Verify HotSpot configuration:
[admin@MikroTik] /ip hotspot> print 
Flags: X - disabled, I - invalid, S - HTTPS 
# NAME INTERFACE ADDRESS-POOL PROFILE IDLE-TIMEOUT
0 hotspot1 ether3 hs-pool-3 hsprof1 5m 
[admin@MikroTik] /ip hotspot> 
[admin@MikroTik] /ip pool> print 
# NAME RANGES 
0 hs-pool-3 10.5.50.2-10.5.50.254 
[admin@MikroTik] /ip pool> /ip dhcp-server 
[admin@MikroTik] /ip dhcp-server> print 
Flags: X - disabled, I - invalid 
# NAME INTERFACE RELAY ADDRESS-POOL LEASE-TIME ADD-ARP
0 dhcp1 ether3 hs-pool-3 1h 
[admin@MikroTik] /ip dhcp-server> /ip firewall nat 
[admin@MikroTik] /ip firewall nat> print 
Flags: X - disabled, I - invalid, D - dynamic 
0 X ;;; place hotspot rules here
chain=unused-hs-chain action=passthrough 

1 ;;; masquerade hotspot network
chain=srcnat action=masquerade src-address=10.5.50.0/24 
[admin@MikroTik] /ip firewall nat> 
Parameters asked during the setup process
hotspot interface (string; Default: allow)	Interface name on which to run HotSpot. To run HotSpot on a bridge interface, make sure public interfaces are not included in the bridge ports.
local address of network (IP; Default: 10.5.50.1/24)	HotSpot gateway address
masquerade network (yes | no; Default: yes)	Whether to masquerade HotSpot network, when yes rule is added to /ip firewall nat with action=masquerade
address pool of network (string; Default: yes)	Address pool for HotSpot network, which is used to change user IP address to a valid address. Useful if providing network access to mobile clients that are not willing to change their networking settings.
select certificate (none | import-other-certificate; Default: )	Choose SSL certificate, when HTTPS authorization method is required.
ip address of smtp server (IP; Default: 0.0.0.0)	The IP address of the SMTP server, where to redirect HotSpot's network SMTP requests (25 TCP port)
dns servers (IP; Default: 0.0.0.0)	DNS server addresses used for HotSpot clients, configuration taken from /ip dns menu of the HotSpot gateway
dns name (string; Default: "")	the domain name of the HotSpot server, a full qualified domain name is required, for example, www.example.com
name of local hotspot user (string; Default: "admin")	username of one automatically created HotSpot user, added to /ip hotspot user
password for the user' (string; Default: )	Password for automatically created HotSpot user
IP HotSpot
/ip/hotspot

The menu is designed to manage the HotSpot servers of the router. It is possible to run HotSpot on Ethernet, wireless, VLAN, and bridge interfaces. One HotSpot server is allowed per interface. When HotSpot is configured on the bridge interface, set HotSpot interface as bridge interface, not as bridge port, do not add public interfaces to bridge ports. You can add HotSpot servers manually to the /ip/hotspot menu, but it is advised to run /ip/hotspot/setup, which adds all necessary settings.
name (text)	HotSpot server's name or identifier
address-pool (name/none; default: none)	address space used to change HotSpot client any IP address to a valid address. Useful for providing public network access to mobile clients that are not willing to change their networking settings
idle-timeout (time/none; default: 5m) 	period of inactivity for unauthorized clients. When there is no traffic from this client (literally client computer should be switched off), once the timeout is reached, a user is dropped from the HotSpot host list, its used address becomes available
keepalive-timeout (time/none; default: none)	Value of how long host can stay out of reach to be removed from the HotSpot
login-timeout (time/none; default: none)	Period of time after which if a host hasn't been authorized itself with a system the host entry gets deleted from host table. Loop repeats until the host logs in the system. Enable if there are situations where a host cannot log in after being too long in the host table unauthorized.
interface (name of an interface)	Interface to run HotSpot on
addresses-per-mac (integer/unlimited; default: 2)	Number of IP addresses allowed to be bind with the MAC address, when multiple HotSpot clients connected with one MAC-address
profile (name; default: default)	HotSpot server default HotSpot profile, which is located in /ip/hotspot/profile

Read-only
keepalive-timeout (read-only; time)	The exact value of the keepalive-timeout, that is applied to the user. Value shows how long the host can stay out of reach to be removed from the HotSpot
IP HotSpot Active
/ip/hotspot/active

HotSpot active menu shows all clients authenticated in HotSpot, the menu is informational (read-only) it is not possible to change anything here.
server (read-only; name)	HotSpot server name client is logged in
user (read-only; name)	name of the HotSpot user
domain (read-only; text)	the domain of the user (if split from the username), a parameter is used only with RADIUS authentication
address (read-only; IP address)	The IP address of the HotSpot user
mac-address (read-only; MAC-address)	MAC-address of the HotSpot user
login-by (read-only; multiple-choice: cookie / http-chap / http-pap / https / mac / mac-cookie / trial)	the authentication method used by the HotSpot client
uptime (read-only; time)	current session time of the user, it is showing how long the user has been logged in
idle-time (read-only; time)	the amount of time the user has been idle
session-time-left (read-only; time)	the exact value of session-time, that is applied for the user. Value shows how long user is allowed to be online to be logged off automatically by uptime reached
idle-timeout (read-only; time)	the exact value of the user's idle-timeout
keepalive-timeout (read-only; time)	the exact value of the keepalive-timeout, that is applied for the user. Value shows how long the host can stay out of reach to be removed from the HotSpot
limit-bytes-in (read-only; integer)	value shows how many bytes received from the client, an option is active when the appropriate parameter is configured for HotSpot user
limit-bytes-out (read-only; integer) 	value shows how many bytes send to the client, an option is active when the appropriate parameter is configured for HotSpot user
limit-bytes-total (read-only; integer)	value shows how many bytes total were send/received from the client, an option is active when the appropriate parameter is configured for HotSpot user
IP HotSpot Host
/ip/hotspot/host

The host table lists all computers connected to the HotSpot server. The host table is informational and it is not possible to change any value there:
mac-address (read-only; MAC-address)	HotSpot user MAC-address
address (read-only; IP address)	HotSpot client original IP address
to-address (read-only; IP address)	The new client address assigned by HotSpot might be the same as the original address
server (read-only; name)	HotSpot server name client is connected to
bridge-port (read-only; name)	"/interface bridge port" the client is connected to, value is unknown when HotSpot is not configured on the bridge
uptime (read-only; time)	value shows how long the user is online (connected to the HotSpot)
idle-time (read-only; time)	time user has been idle

idle-timeout (read-only; time) 
	value of the client idle-timeout (unauthorized client)
keepalive-timeout (read-only; time)	keepalive-timeout value of the unauthorized client
bytes-in (read-only; integer)	amount of bytes received from an unauthorized client
packet-in (read-only; integer)	amount of packets received from an unauthorized client
bytes-out (read-only; integer)	amount of bytes sent to an unauthorized client
packet-out (read-only; integer) 	amount of packets sent to an unauthorized client
IP Binding
/ip/hotspot/ip-binding

IP-Binding HotSpot menu allows to the setup of static One-to-One NAT translations, allows to bypass specific HotSpot clients without any authentication, and also allows to block specific hosts and subnets from the HotSpot network
address (IP Range; Default: "")	The original IP address of the client
mac-address (MAC; Default: "")	MAC address of the client
server (string | all; Default: "all")	Name of the HotSpot server.

    all - will be applied to all hotspot servers

to-address (IP; Default: "")	New IP address of the client, translation occurs on the router (client does not know anything about the translation)
type (blocked | bypassed | regular; Default: "")	Type of the IP-binding action

    regular - performs One-to-One NAT according to the rule, translates the address to to-address
    bypassed - performs the translation, but excludes client from login to the HotSpot
    blocked - translation is not performed and packets from a host are dropped

Cookies

The menu contains all cookies sent to the HotSpot clients, which are authorized by cookie method, all the entries are read-only.
/ip/hotspot/cookie


domain (string)	The domain name (if split from the username)
expires-in (time)	How long the cookie is valid
mac-address (MAC)	Client's MAC-address
user (string)	HotSpot username
Using DHCP option to advertise HotSpot URL

Most devices, such as modern smartphones, do some kind of background checking to see if they are behind a captive portal. They do this by requesting a known webpage and comparing the contents of that page, to what they should be. If contents are different, the device assumes there is a login page and creates a popup with this login page.

This does not always happen, as this "known webpage" could be blocked, whitelisted, or not accessible in internal networks. To improve on this mechanism, RFC 7710 was created, allowing the HotSpot to inform all DHCP clients that they are behind a captive-portal device and that they will need to authenticate to get Internet access, regardless of what webpages they do or do not request.

This DHCP option field is enabled automatically, but only if the router has a DNS name configured and has a valid SSL certificate (so that the login page can be accessed over HTTPS). When these requirements are met, a special DHCP option will be sent, containing a link to https://<dns-name-of-hotspot>/api. This link contains information in JSON format, instructing the client device of the captive portal status, and the location of the login page.

Contents of https://<dns-name-of-hotspot>/api are as follows:
{
"captive": $(if logged-in == 'yes')false$(else)true$(endif),
"user-portal-url": "$(link-login-only)",
$(if session-timeout-secs != 0)
"seconds-remaining": $(session-timeout-secs),
$(endif)
$(if remain-bytes-total)
"bytes-remaining": $(remain-bytes-total),
$(endif)
"can-extend-session": true
}

Some devices require venue-info URL as well, so you are free to modify the api.json file to your liking, just like any other hotspot files. It is located in the router files menu. 

Important

If you have set up Hotspot before RouterOS v7.3 when RFC 7710 was implemented, you will have to use "Reset HTML" function, or manually add/edit the api.json file to have the above contents, for Hotspot detection to work. 




    Creado por Normunds R., actualizado por última vez por GG el mar 08, 2024 19 min de lectura

Requirements

    HotSpot captive portal

Introduction

You can create a completely different set of servlet pages for each HotSpot server you have, specifying the directory in the "html-override-directory" property of a HotSpot server profile /ip hotspot profile. The default servlet pages are copied in the directory "hotspot" directory right after you create the server profile. This directory can be accessed by connecting to the router with an FTP client. You can copy this directory and modify the pages as you like using the information from this section of the manual. Note that it is suggested to edit the files manually, as automated HTML editing tools may corrupt the pages by removing variables or other vital parts. After you are finished with content modification you need to upload this modified content to some custom directory on the hotspot router and point previously mentioned property "html-override-directory" value as path to this new custom HTML directory.

Note: If "html-override-directory" value path is missing or empty then the hotspot server will revert to default HTML files.
Available Pages

Main HTML servlet pages, which are shown to the user:

    redirect.html - redirects the user to another URL (for example, to the login page)
    login.html - login page shown to a user to ask for a username and password. This page may take the following parameters:
        username - username
        password - either plain-text password (in case of PAP authentication) or MD5 hash of chap-id variable, password, and CHAP challenge (in case of CHAP authentication). This value is used as e-mail address for trial users
        dst - original URL requested before the redirect. This will be opened on successful login
        popup - whether to pop-up a status window on successful login
        radius<id> - send the attribute identified with <id> in text string form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
        radius<id>u - send the attribute identified with <id> in unsigned integer form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
        radius<id>-<vnd-id> - send the attribute identified with <id> and vendor ID <vnd-id> in text string form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
        radius<id>-<vnd-id>u - send the attribute identified with <id> and vendor ID <vnd-id> in unsigned integer form to the RADIUS server (in case RADIUS authentication is used; lost otherwise)
    md5.js - JavaScript for MD5 password hashing. Used together with http-chap login method
    alogin.html - page shown after a client has logged in. It pops-up status page and redirects the browser to the originally requested page (before he/she was redirected to the HotSpot login page)
    status.html - status page, shows statistics for the client. It is also able to display advertisements automatically
    logout.html - logout page, shown after a user is logged out. Shows final statistics about the finished session. This page may take the following additional parameters:
        erase-cookie - whether to erase cookies from the HotSpot server on logout (makes it impossible to log in with cookie next time from the same browser, might be useful in multiuser environments)
    error.html - error page, shown on fatal errors only

Some other pages are available as well, if more control is needed:

    rlogin.html - page, which redirects the client from some other URL to the login page, if authorization of the client is required to access that URL
    rstatus.html - similar to rlogin.html, only in case if the client is already logged in and the original URL is not known
    radvert.html - redirects the client to the scheduled advertisement link
    flogin.html - shown instead of login.html, if some error has happened (invalid username or password, for example)
    fstatus.html - shown instead of redirect, if a status page is requested, but the client is not logged in
    flogout.html - shown instead of redirect, if logout page is requested, but the client is not logged in

Serving Servlet Pages

The HotSpot servlet recognizes 5 different request types:

    request for a remote host
        if user is logged in and advertisement is due to be displayed, radvert.html is displayed. This page redirects to the scheduled advertisement page
        if user is logged in and advertisement is not scheduled for this user, the requested page is served
        if user is not logged in, but the destination host is allowed by the walled garden, then the request is also served
        if user is not logged in, and the destination host is disallowed by the walled garden, rlogin.html is displayed; if rlogin.html is not found, redirect.html is used to redirect to the login page


    request for "/" on the HotSpot host
        if user is logged in, rstatus.html is displayed; if rstatus.html is not found, redirect.html is used to redirect to the status page
        if user is not logged in, rlogin.html is displayed; if rlogin.html is not found, redirect.html is used to redirect to the login page


    request for "/login" page
        if user has successfully logged in (or is already logged in), alogin.html is displayed; if alogin.html is not found, redirect.html is used to redirect to the originally requested page or the status page (in case, the original destination page was not given)
        if user is not logged in (username was not supplied, no error message appeared), login.html is showed
        if login procedure has failed (an error message is supplied), flogin.html is displayed; if flogin.html is not found, login.html is used
        in case of fatal errors, error.html is showed


    request for "/status" page
        if user is logged in, status.html is displayed
        if user is not logged in, fstatus.html is displayed; if fstatus.html is not found, redirect.html is used to redirect to the login page


    request for '/logout' page
        if user is logged in, logout.html is displayed
        if user is not logged in, flogout.html is displayed; if flogout.html is not found, redirect.html is used to redirect to the login page

Note: If it is not possible to meet a request using the pages stored on the router's FTP server, Error 404 is displayed

There are many ways to customize what the HotSpot authentication pages look like:

    The pages are easily modifiable. They are stored on the router's FTP server in the directory you choose for the respective HotSpot server profile.
    By changing the variables, which client sends to the HotSpot servlet, it is possible to reduce the keyword count to one (username or password; for example, the client's MAC address may be used as the other value) or even to zero (License Agreement; some predefined values general for all users or client's MAC address may be used as username and password)
    Registration may occur on a different server (for example, on a server that is able to charge Credit Cards). Client's MAC address may be passed to it, so that this information doesn't have to be entered manually. After the registration, the server should change RADIUS database enabling client to log in for some amount of time.

To insert a variable in some place in the HTML file, the $(var_name) syntax is used, where the "var_name" is the name of the variable (without quotes). This construction may be used in any HotSpot HTML file accessed as '/', '/login', '/status' or '/logout', as well as any text or HTML (.txt, .htm or .html) file stored on the HotSpot server (with the exception of traffic counters, which are available in status page only, and error, error-orig, chap-id, chap-challenge and popup variables, which are available in login page only). For example, to show a link to the login page, following construction can be used:

<a href="$(link-login)">login</a>

Variables

All of the Servlet HTML pages use variables to show user specific values. Variable names appear only in the HTML source of the servlet pages - they are automatically replaced with the respective values by the HotSpot Servlet. For most variables, there is an example of their possible value included in brackets. All the described variables are valid in all servlet pages, but some of them just might be empty at the time they are accessed (for example, there is no uptime before a user has logged in).
List of available variables

Note: Some of the variables use hard-coded http URL, if you are using https, you can construct the link in some other way, for example for $link-status, you can use https://$(hostname)/$(target-dir)status

Common server variables:

    hostname - DNS name or IP address (if DNS name is not given) of the HotSpot Servlet ("hotspot.example.net")
    identity - RouterOS identity name ("MikroTik")
    login-by - authentication method used by user
    plain-passwd - a "yes/no" representation of whether HTTP-PAP login method is allowed ("no")
    server-address - HotSpot server address ("10.5.50.1:80")
    ssl-login - a "yes/no" representation of whether HTTPS method was used to access that servlet page ("no")
    server-name - HotSpot server name (set in the /ip hotspot menu, as the name property)

Links:

    link-login - link to login page including original URL requested ("http://10.5.50.1/login?dst=http://www.example.com/")
    link-login-only - link to login page, not including original URL requested ("http://10.5.50.1/login")
    link-logout - link to logout page ("http://10.5.50.1/logout")
    link-status - link to status page ("http://10.5.50.1/status")
    link-orig - original URL requested ("http://www.example.com/")

General client information:

    domain - domain name of the user ("example.com")
    interface-name - physical HotSpot interface name (in case of bridged interfaces, this will return the actual bridge port name)
    ip - IP address of the client ("10.5.50.2")
    logged-in - "yes" if the user is logged in, otherwise - "no" ("yes")
    mac - MAC address of the user ("01:23:45:67:89:AB")
    trial - a "yes/no" representation of whether the user has access to trial time. If user's trial time has expired, the value is "no"
    username - the name of the user ("John")
    host-ip - client IP address from /ip hotspot host table
    vlan-id - Represents ID of a VLAN interface from which the client is connected

User status information:

    idle-timeout - idle timeout ("20m" or "" if none)
    idle-timeout-secs - idle timeout in seconds ("88" or "0" if there is such timeout)
    limit-bytes-in - byte limit for send ("1000000" or "---" if there is no limit)
    limit-bytes-out - byte limit for receive ("1000000" or "---" if there is no limit)
    refresh-timeout - status page refresh timeout ("1m30s" or "" if none)
    refresh-timeout-secs - status page refresh timeout in seconds ("90s" or "0" if none)
    session-timeout - session time left for the user ("5h" or "" if none)
    session-timeout-secs - session time left for the user, in seconds ("3475" or "0" if there is such timeout)
    session-time-left - session time left for the user ("5h" or "" if none)
    session-time-left-secs - session time left for the user, in seconds ("3475" or "0" if there is such timeout)
    uptime - current session uptime ("10h2m33s")
    uptime-secs - current session uptime in seconds ("125")

Traffic counters, which are available only on the status page:

    bytes-in - number of bytes received from the user ("15423")
    bytes-in-nice - user-friendly form of number of bytes received from the user ("15423")
    bytes-out - number of bytes sent to the user ("11352")
    bytes-out-nice - user-friendly form of number of bytes sent to the user ("11352")
    packets-in - number of packets received from the user ("251")
    packets-out - number of packets sent to the user ("211")
    remain-bytes-in - remaining bytes until limit-bytes-in will be reached ("337465" or "---" if there is no limit)
    remain-bytes-out - remaining bytes until limit-bytes-out will be reached ("124455" or "---" if there is no limit)

Miscellaneous variables:

    session-id - value of 'session-id' parameter in the last request
    var - value of 'var' parameter in the last request
    error - error message, if something failed ("invalid username or password")
    error-orig - original error message (without translations retrieved from errors.txt), if something failed ("invalid username or password")
    chap-id - value of chap ID ("\371")
    chap-challenge - value of chap challenge ("\357\015\330\013\021\234\145\245\303\253\142\246\133\175\375\316")
    popup - whether to pop-up checkbox ("true" or "false")
    advert-pending - whether an advertisement is pending to be displayed ("yes" or "no")
    http-status - allows the setting of the http status code and message
    http-header - allows the setting of the http header

RADIUS-related variables:

    radius<id> - show the attribute identified with <id> in text string form (in case RADIUS authentication was used; "" otherwise)
    radius<id>u - show the attribute identified with <id> in unsigned integer form (in case RADIUS authentication was used; "0" otherwise)
    radius<id>-<vnd-id> - show the attribute identified with <id> and vendor ID <vnd-id> in text string form (in case RADIUS authentication was used; "" otherwise)
    radius<id>-<vnd-id>u - show the attribute identified with <id> and vendor ID <vnd-id> in unsigned integer form (in case RADIUS authentication was used; "0" otherwise)

Working with variables

$(if <var_name>) statements can be used in these pages. The following content will be included, if value of <var_name> will not be an empty string. It is an equivalent to $(if <var_name> != "") It is possible to compare on equivalence as well: $(if <var_name> == <value>) These statements have effect until $(elif <var_name>), $(else) or $(endif). In general case it looks like this:

some content, which will always be displayed
$(if username == john)
Hey, your username is john
$(elif username == dizzy)
Hello, Dizzy! How are you? Your administrator.
$(elif ip == 10.1.2.3)
You are sitting at that old computer, which is so slow...
$(elif mac == 00:01:02:03:04:05)
This is an ethernet card, which was stolen few months ago...
$(else)
I don't know who you are, so lets live in peace.
$(endif)
other content, which will always be displayed

Only one of those expressions will be shown. Which one - depends on the values of those variables for each client.
Redirects and custom Headers

	$(if http-status == 302)Hotspot login required$(endif)
	$(if http-header == "Location")$(link-redirect)$(endif)

Note: Although the above appears to use the conditional expression 'if' it is in fact setting the 'http-status' to '302' not testing for it. Also the same for the variable 'http-header'. Once again, even though it uses an 'if' it is in fact setting the variable to 'Location' followed by the URL set from the variable 'link-redirect'.

For example, in the case where $(link-redirect) evaluates to "http://192.168.88.1/login", then the HTTP response returned to the client will be changed to:

HTTP/1.0 302 Hotspot login required
<regular HTTP headers>
Location: http://192.168.88.1/login


http-status syntax:

	$(if http-status == XYZ)HTTP_STATUS_MESSAGE$(endif)

    XYZ - The status code you wish to return. Should be 3 decimal digits, the first one must not be 0
    HTTP_STATUS_MESSAGE - any text you wish to return to the client that will follow the above status code in the HTTP reply

In any HTTP response it will be on the first line and will be as follows:

HTTP/1.0 XYZ HTTP_STATUS_MESSAGE


http-header syntax:

$(if http-header == HTTP_HEADER_NAME)HTTP_HEADER_VALUE$(endif)

    HTTP_HEADER_NAME - name of the HTTP header to be sent in the response
    HTTP_HEADER_VALUE - the value of the HTTP header with the name HTTP_HEADER_NAME to be sent in the response

The HTTP response will appear as:

HTTP_HEADER_NAME: HTTP_HEADER_VALUE


All variables and conditional expressions within HTTP_HEADER_VALUE and HTTP_STATUS_MESSAGE are processed as usual.

In case multiple headers with the same name are added, then only the last one will be used (previous ones will be discarded). It allows the system to override regular HTTP headers (for example, Content-Type and Cache-Control).
Customizing Error Messages

All error messages are stored in the errors.txt file within the respective HotSpot servlet directory. You can change and translate all these messages to your native language. To do so, edit the errors.txt file. You can also use variables in the messages. All instructions are given in that file.
Multiple Versions of HotSpot Pages

Multiple HotSpot page sets for the same HotSpot server are supported. They can be chosen by the user (to select language) or automatically by JavaScript (to select PDA/regular version of HTML pages).

To utilize this feature, create subdirectories in the HotSpot HTML directory, and place those HTML files, which are different, in that subdirectory. For example, to translate everything in Latvian, the subdirectory "lv" can be created with login.html, logout.html, status.html, alogin.html, radvert.html and errors.txt files, which are translated into Latvian. If the requested HTML page can not be found in the requested subdirectory, the corresponding HTML file from the main directory will be used. Then main login.html file would contain a link to "/lv/login?dst=$(link-orig-esc)", which then displays Latvian version of login page: <a href="/lv/login?dst=$(link-orig-esc)">Latviski</a> . And Latvian version would contain a link to English version: <a href="/login?dst=$(link-orig-esc)">English</a>

Another way of referencing directories is to specify 'target' variable:

        <a href="$(link-login-only)?dst=$(link-orig-esc)&target=lv">Latviski</a>
        <a href="$(link-login-only)?dst=$(link-orig-esc)&target=%2F">English</a>

After the preferred directory has been selected (for example, "lv"), all links to local HotSpot pages will contain that path (for example, $(link-status) = "http://hotspot.mt.lv/lv/status"). So, if all HotSpot pages reference links using "$(link-xxx)" variables, then no more changes are to be made - each client will stay within the selected directory all the time.
Misc

If you want to use the HTTP-CHAP authentication method, you need to include the doLogin() function (which references to the md5.js which must be already loaded) before the Submit action of the login form. Otherwise, CHAP login will fail.

The resulting password to be sent to the HotSpot gateway in case of HTTP-CHAP method, it is formed by MD5-hashing the concatenation of the following: chap-id, the password of the user, and chap-challenge (in the given order)

In case variables are to be used in the link directly, then they must be escaped accordingly. For example, in login page, <a href="https://login.example.com/login?mac=$(mac)&user=$(username)">link</a> will not work as intended, if username will be "123&456=1 2". In this case instead of $(user), its escaped version must be used: $(user-esc): <a href="https://login.server.serv/login?mac=$(mac-esc)&user=$(user-esc)">link</a>. Now the same username will be converted to "123%26456%3D1+2", which is the valid representation of "123&456=1 2" in URL. This trick may be used with any variables, not only with $(username).

There is a boolean parameter "erase-cookie" to the logout page, which may be either "on" or "true" to delete user cookie on logout (so that the user would not be automatically logged on when he/she opens a browser next time.
Examples

With basic HTML language knowledge and the examples below it should be easy to implement the ideas described above.

    To provide predefined value as username, in login.html change:

<type="text" value="$(username)>

to this line:

<input type="hidden" name="username" value="hsuser">

(where hsuser is the username you are providing)

    To provide a predefined value as a password, in login.html change:

<input type="password">

to this line:

<input type="hidden" name="password" value="hspass">

(where hspass is the password you are providing)

    To send the client's MAC address to a registration server in the form of:

https://www.example.com/register.html?mac=XX:XX:XX:XX:XX:XX

change the Login button link in login.html to:

https://www.example.com/register.html?mac=$(mac)

(you should correct the link to point to your server)

    To show a banner after user login, in alogin.html after

$(if popup == 'true') add the following line:

open('http://www.example.com/your-banner-page.html', 'my-banner-name','');

(you should correct the link to point to the page you want to show)

    To choose a different page shown after login, in login.html change:

<input type="hidden" name="dst" value="$(link-orig)">

to this line:

<input type="hidden" name="dst" value="http://www.example.com">

(you should correct the link to point to your server)

    To erase the cookie on logoff, in the page containing a link to the logout (for example, in status.html) change:

open('$(link-logout)', 'hotspot_logout', ...

to this:

open('$(link-logout)?erase-cookie=on', 'hotspot_logout', ...

or alternatively add this line:

<input type="hidden" name="erase-cookie" value="on">

before this one:

<input type="submit" value="log off">

External authentication

Another example is making HotSpot to authenticate on a remote server (which may, for example, perform credit card charging):

    Allow direct access to the external server in walled-garden (either HTTP-based or IP-based)
    Modify the login page of the HotSpot servlet to redirect to the external authentication server. The external server should modify the RADIUS database as needed

Here is an example of such a login page to put on the HotSpot router (it is redirecting to https://auth.example.com/login.php, replace with the actual address of an external authentication server):

<html>
<title>...</title>
<body>
<form name="redirect" action="https://auth.example.com/login.php" method="post">
<input type="hidden" name="mac" value="$(mac)">
<input type="hidden" name="ip" value="$(ip)">
<input type="hidden" name="username" value="$(username)">
<input type="hidden" name="link-login" value="$(link-login)">
<input type="hidden" name="link-orig" value="$(link-orig)">
<input type="hidden" name="error" value="$(error)">
</form>
<script language="JavaScript">
<!--
	document.redirect.submit();
//-->
</script>
</body>
</html>
          

    The external server can log in a HotSpot client by redirecting it back to the original HotSpot servlet login page, specifying the correct username and password

Here is an example of such a page (it is redirecting to https://hotspot.example.com/login, replace with the actual address of a HotSpot router; also, it is displaying www.mikrotik.com after successful login, replace with what is needed):

<html>
<title>Hotspot login page</title>
<body>
<form name="login" action="https://hotspot.example.com/login" method="post">
<input type="text" name="username" value="demo">
<input type="password" name="password" value="none">
<input type="hidden" name="domain" value="">
<input type="hidden" name="dst" value="http://www.mikrotik.com/">
<input type="submit" name="login" value="log in">
</form>
</body>
</html>
          

    Hotspot will ask the RADIUS server whether to allow the login or not. If allowed, alogin.html page will be displayed (it can be modified to do anything). If not allowed, the flogin.html (or login.html) page will be displayed, which will redirect the client back to the external authentication server.

Note: as shown in these examples, HTTPS protocol and POST method can be used to secure communications.
HTTP header detection

The Hotspot login pages have access to HTTP headers by using $(http-header-name);

For example, there exists an ability to check the user agent (or browser), and will return any other content instead of the regular login page, if so desired. This can be used to disable automatic popups in phones, for example.

For example, to output "SUCCESS" for users of a specific Firefox mobile version, instead of the login page, you can these lines on the top of the rlogin.html page in your hotspot directory:

$(if user-agent == "Mozilla/5.0 (Android; Mobile; rv:40.0) Gecko/40.0 Firefox/40.0" ) 
<HTML><HEAD><TITLE>Success</TITLE></HEAD><BODY>Success</BODY></HTML> 
$(else)
---- regular content of rlogin.html page  ----
$(endif)

This will DISABLE the login popup for Android Firefox 40 users.
One-click login

It is possible to create a modified captive portal for quick one-click login for scenarios where no user or password is required.

What you need to do is:

    Create a user for this purpose. In example, it is "notsosecretuser" with password "notsosecretpass"
    Assign this user to a user profile that allows a specific/unlimited amount of simultaneous active users.
    Copy original hotspot directory that is already generated in routers file menu on root level.
    Modify the contents of this copy directory contents.
        Only one file requires modifications for this to work, the "login.html".

Original:

<table width="100" style="background-color: #ffffff">
  <tr><td align="right">login</td>
      <td><input style="width: 80px" name="username" type="text" value="$(username)"/></td>
  </tr>
  <tr><td align="right">password</td>
      <td><input style="width: 80px" name="password" type="password"/></td>
  </tr>
  <tr><td> </td>
      <td><input type="submit" value="OK" /></td>
  </tr>
</table>

Modified:

<table width="100" style="background-color: #ffffff">
  <tr style="display:none;"><td align="right">login</td>
    <td><input style="width: 80px" name="username" type="text" value="notsosecretuser"/></td>
  </tr>
  <tr style="display:none;"><td align="right">password</td>
    <td><input style="width: 80px" name="password" type="password" value="notsosecretpass"/></td>
  </tr>
  <tr><td> </td>
    <td><input type="submit" value="Proceed to Internet!" /></td>
  </tr>
</table>

What changed:

            User and Password "" fields are hidden.
            Both User and Password field values contain predefined values.
            Changed the "OK" button value(name) to something more fitting.

    Now upload this new hotspot folder back to the router, preferably with a different name.
    Change settings in the hotspot server profile to use this new html directory.

/ip hotspot profile set (profile number or name) html-directory-override=(dir path/name)

Firewall customizations
Summary

Apart from the obvious dynamic entries in the /ip hotspot submenu itself (like hosts and active users), some additional rules are added in the firewall tables when activating a HotSpot service. 
NAT

From /ip firewall nat print dynamic command, you can get something like this (comments follow after each of the rules):

 0 D chain=dstnat action=jump jump-target=hotspot hotspot=from-client

Putting all HotSpot-related tasks for packets from all HotSpot clients into a separate chain.

 1 I chain=hotspot action=jump jump-target=pre-hotspot

Any actions that should be done before HotSpot rules apply, should be put in the pre-hotspot chain. This chain is under full administrator control and does not contain any rules set by the system, hence the invalid jump rule (as the chain does not have any rules by default).

 2 D chain=hotspot action=redirect to-ports=64872 dst-port=53 protocol=udp 
 3 D chain=hotspot action=redirect to-ports=64872 dst-port=53 protocol=tcp 

Redirect all DNS requests to the HotSpot service. The 64872 port provides DNS service for all HotSpot users. If you want the HotSpot server to listen to another port, add rules here the same way, changing dst-port property.

 4 D chain=hotspot action=redirect to-ports=64873 hotspot=local-dst dst-port=80
     protocol=tcp

Redirect all HTTP login requests to the HTTP login servlet. The 64873 is HotSpot HTTP servlet port.

 5 D chain=hotspot action=redirect to-ports=64875 hotspot=local-dst dst-port=443
     protocol=tcp

Redirect all HTTPS login requests to the HTTPS login servlet. The 64875 is HotSpot HTTPS servlet port.

 6 D chain=hotspot action=jump jump-target=hs-unauth hotspot=!auth protocol=tcp

All other packets except DNS and login requests from unauthorized clients should pass through the hs-unauth chain.

 7 D chain=hotspot action=jump jump-target=hs-auth hotspot=auth protocol=tcp

And packets from the authorized clients - through the hs-auth chain.

 8 D ;;; www.mikrotik.com
     chain=hs-unauth action=return dst-address=66.228.113.26 dst-port=80 protocol=tcp

First in the hs-unauth chain is put everything that affects TCP protocol in the /ip hotspot walled-garden ip submenu (i.e., everything where either protocol is not set, or set to TCP). Here we are excluding www.mikrotik.com from being redirected to the login page.

 9 D chain=hs-unauth action=redirect to-ports=64874 dst-port=80 protocol=tcp

All other HTTP requests are redirected to the Walled Garden proxy server which listens to the 64874 port. If there is an "allow" entry in the /ip hotspot walled-garden menu for an HTTP request, it is being forwarded to the destination. Otherwise, the request will be automatically redirected to the HotSpot login servlet (port 64873).

10 D chain=hs-unauth action=redirect to-ports=64874 dst-port=3128 protocol=tcp 
11 D chain=hs-unauth action=redirect to-ports=64874 dst-port=8080 protocol=tcp 

HotSpot by default assumes that only these ports may be used for HTTP proxy requests. These two entries are used to "catch" client requests to unknown proxies (you can add more rules here for other ports). I.e., to make it possible for the clients with unknown proxy settings to work with the HotSpot system. This feature is called "Universal Proxy". If it is detected that a client is using some proxy server, the system will automatically mark those packets with the HTTP hotspot mark to work around the unknown proxy problem, as we will see later on. Note that the port used (64874) is the same as for HTTP requests in rule #9 (so both HTTP and HTTP proxy requests are processed by the same code).

12 D chain=hs-unauth action=redirect to-ports=64875 dst-port=443 protocol=tcp

HTTPS proxy is listening on the 64875 port.

13 I chain=hs-unauth action=jump jump-target=hs-smtp dst-port=25 protocol=tcp

Redirect for SMTP protocol may also be defined in the HotSpot configuration. In case it is, a redirect rule will be put in the hs-smtp chain. This is done so that users with unknown SMTP configuration would be able to send their mail through the service provider's (your) SMTP server instead of going to the [possibly unavailable outside their network of origin] SMTP server users have configured on their computers. The chain is empty by default, hence the invalid jump rule.

14 D chain=hs-auth action=redirect to-ports=64874 hotspot=http protocol=tcp

Providing HTTP proxy service for authorized users. Authenticated user requests may need to be subject to transparent proxying (the "Universal Proxy" technique and advertisement feature). This HTTP mark is put automatically on the HTTP proxy requests to the servers detected by the HotSpot HTTP proxy (the one that is listening on the 64874 port) as HTTP proxy requests for unknown proxy servers. This is done so that users that have some proxy settings would use the HotSpot gateway instead of the [possibly unavailable outside their network of origin] proxy server users have configured in their computers. This mark is also applied when an advertisement is due to be shown to the user, as well as on any HTTP requests from the users whose profile is configured to transparently proxy their requests.

15 I chain=hs-auth action=jump jump-target=hs-smtp dst-port=25 protocol=tcp

Providing SMTP proxy for authorized users (the same as in rule #13).
Packet Filtering

From /ip firewall filter print dynamic command, you can get something like this (comments follow after each of the rules):

 0 D chain=forward action=jump jump-target=hs-unauth hotspot=from-client,!auth

Any packet that traverse the router from an unauthorized client will be sent to the hs-unauth chain. The hs-unauth implements the IP-based Walled Garden filter.

 1 D chain=forward action=jump jump-target=hs-unauth-to hotspot=to-client,!auth

Everything that comes to clients through the router, gets redirected to another chain, called hs-unauth-to. This chain should reject unauthorized requests to the clients.

 2 D chain=input action=jump jump-target=hs-input hotspot=from-client

Everything that comes from clients to the router itself, gets to yet another chain, called hs-input.

 3 I chain=hs-input action=jump jump-target=pre-hs-input

Before proceeding with [predefined] dynamic rules, the packet gets to the administratively controlled pre-hs-input chain, which is empty by default, hence the invalid state of the jump rule.

 4 D chain=hs-input action=accept dst-port=64872 protocol=udp 
 5 D chain=hs-input action=accept dst-port=64872-64875 protocol=tcp 

Allow client access to the local authentication and proxy services (as described earlier).

 6 D chain=hs-input action=jump jump-target=hs-unauth hotspot=!auth

All other traffic from unauthorized clients to the router itself will be treated the same way as the traffic traversing the routers.

 7 D chain=hs-unauth action=return protocol=icmp
 8 D ;;; www.mikrotik.com
     chain=hs-unauth action=return dst-address=66.228.113.26 dst-port=80 protocol=tcp

Unlike the NAT table where only TCP-protocol related Walled Garden entries were added, in the packet filter hs-unauth chain is added to everything you have set in the /ip hotspot walled-garden ip menu. That is why although you have seen only one entry in the NAT table, there are two rules here.

 9 D chain=hs-unauth action=reject reject-with=tcp-reset protocol=tcp
10 D chain=hs-unauth action=reject reject-with=icmp-net-prohibited

Everything else that has not been white-listed by the Walled Garden will be rejected. Note the usage of TCP Reset for rejecting TCP connections.

11 D chain=hs-unauth-to action=return protocol=icmp
12 D ;;; www.mikrotik.com
     chain=hs-unauth-to action=return src-address=66.228.113.26 src-port=80 protocol=tcp

The same action as in rules #7 and #8 is performed for the packets destined to the clients (chain hs-unauth-to) as well.

13 D chain=hs-unauth-to action=reject reject-with=icmp-host-prohibited

Reject all packets to the clients with an ICMP reject message.
