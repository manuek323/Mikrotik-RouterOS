

    Creado por Artūrs C., actualizado por última vez el jul 21, 2022 15 min de lectura

    Summary
    Configuration examples
        Transparent proxy configuration example
        Proxy-based firewall – Access List
    Enabling RAM or Store-based caching.
        RAM proxy cache:
        Store proxy cache:
    Reference
        General
        Access List
        Direct Access
        Cache Management
        Connections
        Cache Inserts
        Cache Lookups
        Cache Contents
    HTTP Methods
        Options
        GET
        HEAD
        POST
        PUT
        TRACE

Summary

MikroTik RouterOS performs proxying of HTTP and HTTP-proxy (for FTP and HTTP protocols) requests. The proxy server performs the Internet object cache function by storing requested Internet objects, i.e., data available via HTTP and FTP protocols on a system positioned closer to the recipient in the form of speeding up customer browsing by delivering them requested file copies from the proxy cache at local network speed. MikroTik RouterOS implements the following proxy server features:

    Regular HTTP proxy – customer (itself) specifies what is a proxy server for him;
    Transparent proxy – the customer does not know about the proxy being enabled and there isn’t a necessity for any additional configuration for the web browser of the client;
    Access list by source, destination, URL, and requested method (HTTP firewall);
    Cache access list to specify which objects to cache, and which not;
    Direct Access List – to specify which resources should be accessed directly, and which - through another proxy server;
    Logging facility – allows to get and store information about the proxy operation;
    Parent proxy support – allows to specify another proxy server, (if they don’t have the requested object ask their parents, or to the original server);


A proxy server usually is placed at various points between users and the destination server (also known as the origin server) on the Internet.

A Web proxy (cache) watches requests coming from clients, saving copies of the responses for itself. Then, if there is another request for the same URL, it can use the response that it has, instead of asking the origin server for it again. If the proxy has not requested a file, it downloads that from the original server.

There can be many potential purposes of proxy servers:

    To increase access speed to resources (it takes less time for the client to get the object);
    Works as HTTP firewall (deny access to undesirable web pages);

Allows filtering web content (by specific parameters, like source address, a destination address, port, URL, HTTP request method) scan outbound content, e.g., for data leak protection.

It may be useful to have a Web proxy running even with no cache when you want to use it only as something like an HTTP and FTP firewall (for example, denying access to undesired web pages or denying a specific type of files e.g. .mp3 files) or to redirect requests to external proxy (possibly, to a proxy with caching functions) transparently.
Configuration examples
/ip/proxy

In MikroTik RouterOS, a proxy configuration is performed in the /ip/proxy menu. See below how to enable the proxy on port 8080 and set up 192.168.88.254 as the proxy source address:
[admin@MikroTik] > ip/proxy/set enabled=yes port=8080 src-address=192.168.88.254
[admin@MikroTik] > ip/proxy/print 
                 enabled: yes
             src-address: 192.168.88.254
                    port: 8080
               anonymous: no
            parent-proxy: ::
       parent-proxy-port: 0
     cache-administrator: webmaster
          max-cache-size: unlimited
   max-cache-object-size: 2048KiB
           cache-on-disk: no
  max-client-connections: 600
  max-server-connections: 600
          max-fresh-time: 3d
   serialize-connections: no
       always-from-cache: no
          cache-hit-dscp: 4
              cache-path: web-proxy

When setting up a regular proxy service, make sure it serves only your clients and prevents unauthorized access to it by creating a firewall that allows only your clients to use a proxy, otherwise, it may be used as an open proxy.
Transparent proxy configuration example

RouterOS can also act as a Transparent Caching server, with no configuration required in the customer’s web browser. A transparent proxy does not modify the requested URL or response. RouterOS will take all HTTP requests and redirect them to the local proxy service. This process will be entirely transparent to the user (users may not know anything about a proxy server that is located between them and the original server), and the only difference to them will be the increased browsing speed.

To enable the transparent mode, the firewall rule in destination NAT has to be added, specifying which connections (to which ports) should be transparently redirected to the proxy. Check proxy settings above and redirect us users (192.168.1.0/24) to a proxy server:


[admin@MikroTik] ip firewall nat> add chain=dstnat protocol=tcp src-address=192.168.1.0/24 dst-port=80 action=redirect to-ports=8080
[admin@MikroTik] ip firewall nat> print
Flags: X - disabled, I - invalid, D - dynamic
 0   chain=dstnat protocol=tcp dst-port=80 action=redirect to-ports=8080

 The web proxy can be used as a transparent and normal web proxy at the same time. In transparent mode, it is possible to use it as a standard web proxy, too. However, in this case, proxy users may have trouble reaching web pages that are accessed transparently.
Proxy-based firewall – Access List

An access list is implemented in the same way as MikroTik firewall rules processed from the top to the bottom. The first matching rule specifies the decision of what to do with this connection. Connections can be matched by their source address, destination address, destination port, sub-string of the requested URL (Uniform Resource Locator), or request method. If none of these parameters is specified, every connection will match this rule.

If a connection is matched by a rule, the action property of this rule specifies whether a connection will be allowed or not (deny). If a connection does not match any rule, it will be allowed.

In this example assume that we have configured a transparent proxy server, it will block the website http://www.facebook.com, we can always block the same for different networks by giving src-address:
/ip proxy access add src-address=192.168.1.0/24 dst-host=www.facebook.com action=deny

Users from network 192.168.1.0/24 will not be able to access the website www.facebook.com.

You can block also websites that contain specific words in the URL:
/ip proxy access add dst-host=:mail action=deny

This statement will block all websites which contain the word “mail” in the URL. Like www.mail.com, www.hotmail.com, mail.yahoo.com, etc.

We can also stop downloading specific types of files like .flv, .avi, .mp4, .mp3, .exe, .dat, …etc.
 /ip proxy access
 add path=*.flv action=deny
 add path=*.avi action=deny
 add path=*.mp4 action=deny
 add path=*.mp3 action=deny
 add path=*.zip action=deny
 add path=*.rar action=deny


Here are available also different wildcard characters, to create specific conditions and to match them by proxy access list. Wildcard properties (dst-host and dst-path) match a complete string (i.e., they will not match "example.com" if they are set to "example"). Available wildcards are '*' (match any number of any characters) and '?' (match any one character).

Regular expressions are also accepted here, but if the property should be treated as a regular expression, it should start with a colon (':').

To show that no symbols are allowed before the given pattern, we use the ^ symbol at the beginning of the pattern.

To specify that no symbols are allowed after the given pattern, we use the $ symbol at the end of the pattern.
Enabling RAM or Store-based caching.

In this example, it will presume that you already have the proxy configured and working and you just want to enable caching. If a command/parameter detailed description is required check the reference section which is located right below the example section.

    RAM-based caching:
        Good if you have a device with a considerable amount of RAM for caching. Enabling this on a device with RAM 256MB or less will not give your network any benefit.
        Way faster cache writes/read than one that is stored on USB or SATA connected mediums.

    Store-based caching:
        Larger proxy caches are available simply due to medium capacity differences.

RAM proxy cache:

Important commands:

    max-cache-size=
    max-cache-object-size=
    cache-on-disk=

[admin@MikroTik] /ip proxy> set max-cache-size=unlimited max-cache-object-size=50000KiB cache-on-disk=no 
...
[admin@MikroTik] /ip proxy> print 
                 enabled: yes
             src-address: ::
                    port: 8080
               anonymous: no
            parent-proxy: 0.0.0.0
       parent-proxy-port: 0
     cache-administrator: webmaster
          max-cache-size: unlimited  <-------
   max-cache-object-size: 500000KiB  <-------
           cache-on-disk: no  <-------
  max-client-connections: 600
  max-server-connections: 600
          max-fresh-time: 3d
   serialize-connections: no 
       always-from-cache: no
          cache-hit-dscp: 4
              cache-path: proxy-cache
Store proxy cache:

Important commands:

    max-cache-size=
    max-cache-object-size=
    cache-on-disk=
    cache-path=

[admin@MikroTik] > ip proxy set cache-on-disk=yes cache-path=/usb1/proxy/cache

[admin@MikroTik] > ip proxy print                                                
                 enabled: yes
             src-address: ::
                    port: 8080
               anonymous: no
            parent-proxy: 0.0.0.0
       parent-proxy-port: 0
     cache-administrator: webmaster
          max-cache-size: unlimited  <-------
   max-cache-object-size: 50000KiB  <-------
           cache-on-disk: yes  <-------
  max-client-connections: 600
  max-server-connections: 600
          max-fresh-time: 3d
   serialize-connections: no
       always-from-cache: no
          cache-hit-dscp: 4
              cache-path: usb1/proxy/cache  <-------

[admin@MikroTik] > file print                                                    
 # NAME                                                           TYPE              
 0 skins                                                          directory        
 5 usb1/proxy                                                     directory           
 6 usb1/proxy/cache                                               web-proxy store   <-------      
 7 usb1/lost+found                                                directory  

Check if a cache is working:
[admin@MikroTik] > ip proxy monitor 
                 status: running
                 uptime: 2w20h28m25s
     client-connections: 15
     server-connections: 7
               requests: 79772
                   hits: 30513
             cache-used: 481KiB
         total-ram-used: 1207KiB
  received-from-servers: 4042536KiB
        sent-to-clients: 4399757KiB
   hits-sent-to-clients: 176934KiB
Reference

List of all available parameters and commands per menu.
General
/ip/proxy


always-from-cache (yes | no; Default: no)	ignore client refresh requests if the content is considered fresh
anonymous (yes | no; Default: no)	If not set, the IP address of the client would be passed X-Forwarded-For header (could be accessed using HTTP_X_FORWARDED_FOR environment variable in remote servers)
cache-administrator (string; Default: webmaster)	Administrator's e-mail displayed on proxy error page
cache-hit-dscp (integer: 0..63; Default: 4)	Automatically mark cache hit with the provided DSCP value
cache-on-disk (yes | no; Default: no)	Whether to store cache on disk
cache-path (string; Default: web-proxy)	A path where the cache will be stored, when cache-on-disk is enabled.
max-cache-object-size (integer: 0..4294967295[KiB]; Default: 2048KiB)	Specifies the maximal cache object size, measured in kilobytes
max-cache-size (none | unlimited | integer: 0..4294967295[KiB]; Default: unlimited)	Specifies the maximal cache size, measured in kilobytes
max-client-connections (integer: Dynamic ; Default: 600)	Maximal number of connections accepted from clients (any further connections will be rejected)
max-fresh-time (time; Default: 3d)	Maximal time to store a cached object. The validity period of an object is usually defined by the object itself, but in case it is set too high, you can override the maximal value
max-server-connections (integer: Dynamic ; Default: 600)	Maximal number of connections made to servers (any further connections from clients will be put on hold until some server connections will terminate)
parent-proxy (Ip4 | ip6; Default: 0.0.0.0)	IP address and port of another HTTP proxy to redirect all requests to. If set to 0.0.0.0 parent proxy is not used.
parent-proxy-port (integer: 0..65535; Default: 0)	Port that parent proxy is listening on.
port (integer: 0..65535; Default: 8080)	TCP port the proxy server will be listening on. This port has to be specified on all clients that want to use the server as an HTTP proxy. A transparent (with zero configuration for clients) proxy setup can be made by redirecting HTTP requests to this port in the IP firewall using the destination NAT feature
serialize-connections (yes | no; Default: no)	Do not make multiple connections to the server for multiple client connections, if possible (i.e. server supports persistent HTTP connections). Clients will be served on the FIFO principle; the next client is processed when the response transfer to the previous one is completed. If a client is idle for too long (max 5 seconds by default), it will give up waiting and open another connection to the server
src-address (Ip4 | Ip6; Default: 0.0.0.0)	A proxy will use a specified address when connecting to the parent proxy or website. If set to 0.0.0.0 then the appropriate IP address will be taken from the routing table.
Access List
/ip/proxy/access

An access list is configured like regular firewall rules. Rules are processed from the top to the bottom. The first matching rule specifies the decision of what to do with this connection. There is a total of 6 classifiers that specify matching constraints. If none of these classifiers is specified, the particular rule will match every connection.

If a connection is matched by a rule, the action property of this rule specifies whether a connection will be allowed or not. If the particular connection does not match any rule, it will be allowed.


action (allow | deny; Default: allow)	Specifies whether to pass or deny matched packets
dst-address (Ip4[-Ip4 | /0..32] | Ip6/0..128; Default: )	The destination address of the target server.
dst-host (string; Default: )	IP address or DNS name used to make a connection to the target server (this is the string user wrote in a browser before specifying the port and path to a particular web page
dst-port (integer[-integer[,integer[,...]]]: 0..65535; Default: )	List or range of ports the packet is destined to
local-port (integer: 0..65535; Default: )	Specifies the port of the web proxy via which the packet was received. This value should match one of the ports the web proxy is listening on.
method (any | connect | delete | get | head | options | post | put | trace; Default: )	The HTTP method used in the request (see HTTP Methods section at the end of this document)
path (string; Default: )	Name of the requested page within the target server (i.e. the name of a particular web page or document without the name of the server it resides on)
redirect-to (string; Default: )	In case of access is denied by this rule, the user shall be redirected to the URL specified here
src-address (Ip4[-Ip4 | /0..32] | Ip6/0..128; Default: )	The source address of the connection originator.


Read-only properties:
hits (integer)	Count of requests that were matched by this rule


Wildcard properties (dst-host and dst-path) match a complete string (i.e., they will not match "example.com" if they are set to "example"). Available wildcards are '*' (match any number of any characters) and '?' (match any one character). Regular expressions are also accepted here, but if the property should be treated as a regular expression, it should start with a colon (':').

Small hints in using regular expressions:

    \\ symbol sequence is used to enter \ character in the console;
    \. pattern means. only (in regular expressions single dot in a pattern means any symbol);
    to show that no symbols are allowed before the given pattern, we use the ^ symbol at the beginning of the pattern;
    to specify that no symbols are allowed after the given pattern, we use the $ symbol at the end of the pattern;
    to enter [ or ] symbols, you should escape them with backslash "\.";

It is strongly recommended to deny all IP addresses except those behind the router as the proxy still may be used to access your internal-use-only (intranet) web servers. Also, consult examples in Firewall Manual on how to protect your router.
Direct Access
/ip/proxy/direct

If a parent-proxy property is specified, it is possible to tell the proxy server whether to try to pass the request to the parent proxy or to resolve it by connecting to the requested server directly. The direct Access List is managed just like the Proxy Access List described in the previous chapter except for the action argument. Unlike the access list, the direct proxy access list has a default action equal to deny. It takes place when no rules are specified or a particular request did not match any rule.


action (allow | deny; Default: allow)	Specifies the action to perform on matched packets:

    allow - always resolve matched requests directly bypassing the parent router
    deny - resolve matched requests through the parent proxy. If no one is specified this has the same effect as allow.

dst-address (Ip4[-Ip4 | /0..32] | Ip6/0..128; Default: )	The destination address of the target server.
dst-host (string; Default: )	IP address or DNS name used to make a connection to the target server (this is the string user wrote in a browser before specifying port and path to a particular web page
dst-port (integer[-integer[,integer[,...]]]: 0..65535; Default: )	List or range of ports used by connection to the target server.
local-port (integer: 0..65535; Default: )	Specifies the port of the web proxy via which the packet was received. This value should match one of the ports the web proxy is listening on.
method (any | connect | delete | get | head | options | post | put | trace; Default: )	The HTTP method used in the request (see HTTP Methods section at the end of this document)
path (string; Default: )	Name of the requested page within the target server (i.e. the name of a particular web page or document without the name of the server it resides on)
src-address (Ip4[-Ip4 | /0..32] | Ip6/0..128; Default: )	The source address of the connection originator.


Read-only properties:
hits (integer)	Count of requests that were matched by this rule
Cache Management
/ip/proxy/cache

The cache access list specifies, which requests (domains, servers, pages) have to be cached locally by web proxy, and which do not. This list is implemented exactly the same way as the web proxy access list. The default action is to cache an object (if no matching rule is found).


action (allow | deny; Default: allow)	Specifies the action to perform on matched packets:

    allow - cache objects from matched request
    deny - do not cache objects from matched request

dst-address (Ip4[-Ip4 | /0..32] | Ip6/0..128; Default: )	The destination address of the target server
dst-host (string; Default: )	IP address or DNS name used to make a connection to the target server (this is the string user wrote in a browser before specifying port and path to a particular web page
dst-port (integer[-integer[,integer[,...]]]: 0..65535; Default: )	List or range of ports the packet is destined to.
local-port (integer: 0..65535; Default: )	Specifies the port of the web proxy via which the packet was received. This value should match one of the ports the web proxy is listening on.
method (any | connect | delete | get | head | options | post | put | trace; Default: )	The HTTP method used in the request (see HTTP Methods section at the end of this document)
path (string; Default: )	Name of the requested page within the target server (i.e. the name of a particular web page or document without the name of the server it resides on)
src-address (Ip4[-Ip4 | /0..32] | Ip6/0..128; Default: )	The source address of the connection originator


Read-only properties:
hits (integer)	Count of requests that were matched by this rule


Connections
/ip/proxy/connections

This menu contains the list of current connections the proxy is serving.

Read-only properties:
client ()	
dst-address (Ip4 | Ip6)	IPv4/Ipv6 destination address of the connection
protocol (string)	Protocol name
rx-bytes (integer)	The number of bytes received by the client
server ()	
src-address (Ip4 | Ip6)	Ipv4/ipv6 address of the connection originator
state (closing | connecting | converting | hotspot | idle | resolving | rx-header | tx-body | tx-eof | tx-header | waiting)	Connection state:

    closing - the data transfer is finished, and the connection is being finalized
    connecting - establishing toe connection
    converting - replacing header and footer fields in response or request packet
    hotspot - check if hotspot authentication allows continuing (for hotspot proxy)
    idle - staying idle
    resolving - resolving the server's DNS name
    rx-header - receiving HTTP header
    tx-body - transmitting HTTP body to the client
    tx-eof - writing chunk-end (when converting to chunked response)
    tx-header - transmitting HTTP header to the client
    waiting - waiting for transmission from a peer

tx-bytes (integer)	The number of bytes sent by the client


Cache Inserts
/ip/proxy/inserts

This menu shows statistics on objects stored in a cache (cache inserts).

Read-only properties:
denied (integer)	A number of inserts were denied by the caching list.
errors (integer)	Number of disk or other system-related errors
no-memory (integer)	Number of objects not stored because there was not enough memory
successes (integer)	A number of successful cache inserts.
too-large (integer)	Number of objects too large to store
Cache Lookups
/ip/proxy/lookup

This menu shows statistics on objects read from cache (cache lookups).

Read-only properties:
denied (integer)	Number of requests denied by the access list.
expired (integer)	Number of requests found in cache, but expired, and, thus, requested from an external server
no-expiration-info (integer)	Conditional request received for a page that does not have the information to compare the request with
non-cacheable (integer)	Number of requests requested from the external servers unconditionally (as their caching is denied by the cache access list)
not-found (integer)	Number of requests not found in the cache, and, thus, requested from an external server (or parent proxy if configured accordingly)
successes (integer)	Number of requests found in the cache.
Cache Contents
/ip/proxy/cache-contents

This menu shows cached contents.

Read-only properties:
file-size (integer)	Cached object size
last-accessed (time)	
last-accessed-time (time)	
last-modified (time)	
last-modified-time (time)	
uri (string)	


HTTP Methods
Options

This method is a request for information about the communication options available on the chain between the client and the server identified by the Request-URI. The method allows the client to determine the options and (or) the requirements associated with a resource without initiating any resource retrieval
GET

This method retrieves whatever information identified by the Request-URI. If the Request-URI refers to a data processing process then the response to the GET method should contain data produced by the process, not the source code of the process procedure(-s), unless the source is the result of the process.

The GET method can become a conditional GET if the request message includes an If-Modified-Since, If-Unmodified-Since, If-Match, If-None-Match, or If-Range header field. The conditional GET method is used to reduce the network traffic specifying that the transfer of the entity should occur only under circumstances described by conditional header field(-s).

The GET method can become a partial GET if the request message includes a Range header field. The partial GET method intends to reduce unnecessary network usage by requesting only parts of entities without transferring data already held by the client.

The response to a GET request is cacheable if and only if it meets the requirements for HTTP caching.
HEAD

This method shares all features of GET method except that the server must not return a message-body in the response. This retrieves the metainformation of the entity implied by the request which leads to its wide usage of it for testing hypertext links for validity, accessibility, and recent modification.

The response to a HEAD request may be cacheable in the way that the information contained in the response may be used to update the previously cached entity identified by that Request-URI.
POST

This method requests that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI.

The actual action performed by the POST method is determined by the origin server and usually is Request-URI dependent.

Responses to POST method are not cacheable, unless the response includes appropriate Cache-Control or Expires header fields.
PUT

This method requests that the enclosed entity be stored under the supplied Request-URI. If another entity exists under specified Request-URI, the enclosed entity should be considered as an updated (newer) version of that residing on the origin server. If the Request-URI is not pointing to an existing resource, the origin server should create a resource with that URI.

If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries should be treated as stale. Responses to this method are not cacheable.
TRACE

This method invokes a remote, application-layer loop-back of the request message. The final recipient of the request should reflect the message received back to the client as the entity-body of a 200 (OK) response. The final recipient is either the origin server or the first proxy or gateway to receive a Max-Forwards value of 0 in the request. A TRACE request must not include an entity.

Responses to this method MUST NOT be cached.





    Creado por Māris B., actualizado por última vez el feb 10, 2025 7 min de lectura

Overview

RouterOS supports OpenFlow 1.0 and 1.3 which allows communication between the OpenFlow controller and OpenFlow agent.

OpenFlow is used to centralize management of network equipment in Software Define Networks (SDNs). 

Applications on OpenFlow controller have access to switch's data-path and can perform custom tasks, like flow steering, traffic monitoring etc.

Controller sends flows to be added in the agent's flow table. Packet lookup, modification and forwarding is done based on flow table on the agent.


RouterOS supports OpenFlow fastpath in simple setups where " goto table" flows are not used.

OpenFlow feature overrides regular packet processing functionality - packets that are received on interfaces that are OpenFlow switch ports, will not pass through the regular networking stack unless OpenFlow controller sets up flows that enable this. Due to this care must be taken to not disable access to the device when configuring OpenFlow. 


OpenFlow support is available as standalone openflow package.


Currently supported basic capabilities:

    OFPC_FLOW_STATS
    OFPC_TABLE_STATS
    OFPC_PORT_STATS
    OFPC_GROUP_STATS

Currently unsupported basic capabilities:

    OFPC_IP_REASM
    OFPC_QUEUE_STATS
    OFPC_PORT_BLOCKED


Currently not supported configuration parameters and actions (version 1):

    OFPT_SET_ASYNC
    OFPAT_SET_NW_SRC
    OFPAT_SET_NW_DST
    OFPAT_SET_NW_TOS
    OFPAT_SET_TP_SRC
    OFPAT_SET_TP_DST
    OFPAT_ENQUEUE
    OFPAT_VENDOR


Currently not supported configuration parameters and actions (version 1.3):

    OFPT_SET_ASYNC
    OFPAT_SET_NW_TTL
    OFPAT_DEC_NW_TTL
    OFPAT_COPY_TTL_OUT
    OFPAT_COPY_TTL_IN


Configuration Example

Example demonstrates very basic L2 untagged packet forwarding between sfp-sfplus1-2 ports. Faucet is used a controller.
/openflow
add controllers=tcp/10.155.101.182/6653 datapath-id=1/DC:2C:6E:A4:B4:2E disabled=no name=faucet

/openflow port
add disabled=no interface=sfp-sfpplus1 port-id=1 switch=faucet
add disabled=no interface=sfp-sfpplus2 port-id=2 switch=faucet

If you intend to use also Gauge, then add Gauge's IP and port  in the controllers list. Example, where 6654 is Gauge port: controllers=tcp/10.155.101.182/6653,tcp/10.155.101.182/6654


Faucet configuration. dp_id must be the same as datapath-id from ROS configuration in hex format ( 1/DC:2C:6E:A4:B4:2E →  0x0001dc2c6ea4b42e ):
---
vlans:
    100:
        description: "untagged"

acls:
    1:
        - rule:
            actions:
                allow: 1

dps:
    test_switch:
        dp_id: 0x0001dc2c6ea4b42e
        hardware: "Generic"
        drop_broadcast_source_address: false
        drop_spoofed_faucet_mac: false
        interfaces:
            1:
                name: "h1"
                description: "host1 container"
                native_vlan: 100
                acl_in: 1
            2:
                name: "h2"
                description: "host2 container"
                native_vlan: 100
                acl_in: 1


Faucet installed flows can be seen from /openflow/flow menu:
[admin@CCR2004_2XS_111] /openflow/flow>  print detail 
Flags: I - inactive 
 0   switch=faucet version=4 match=" [ { ethdst_m=01000cccccccffffffffffff } ]" actions=" []" 
     info="priority 8240, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 1   switch=faucet version=4 match=" [ { ethdst_m=01000ccccccdffffffffffff } ]" actions=" []" 
     info="priority 8240, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 2   switch=faucet version=4 match=" [ { ethdst_m=ffffffffffffffffffffffff }; { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=1; max_len=0 } }; { output={ port=2; max_len=0 } } ] 
        } ]" 
     info="priority 8240, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 3   switch=faucet version=4 match=" [ { ethdst_m=0180c2000000fffffffffff0 } ]" actions=" []" 
     info="priority 8236, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 4   switch=faucet version=4 match=" [ { ethdst_m=0180c2000000ffffff000000 }; { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=1; max_len=0 } }; { output={ port=2; max_len=0 } } ] 
        } ]" 
     info="priority 8216, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 5   switch=faucet version=4 match=" [ { ethdst_m=01005e000000ffffff000000 }; { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=1; max_len=0 } }; { output={ port=2; max_len=0 } } ] 
        } ]" 
     info="priority 8216, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 6   switch=faucet version=4 match=" [ { ethdst_m=333300000000ffff00000000 }; { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=1; max_len=0 } }; { output={ port=2; max_len=0 } } ] 
        } ]" 
     info="priority 8208, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 7   switch=faucet version=4 match=" [ { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=1; max_len=0 } }; { output={ port=2; max_len=0 } } ] 
        } ]" 
     info="priority 8192, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 8   switch=faucet version=4 match=" []" actions=" []" 
     info="priority 0, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=4 

 9   switch=faucet version=4 match=" []" actions=" [ { goto=4 } ]" 
     info="priority 0, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=3 

10   switch=faucet version=4 match=" [ { ethtype=9000 } ]" actions=" []" 
     info="priority 20490, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=2 

11   switch=faucet version=4 match=" [ { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { output={ port=4294967293; max_len=96 } } ] }; { goto=3 } ]" 
     info="priority 4096, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=2 

12   switch=faucet version=4 match=" []" actions=" [ { goto=3 } ]" 
     info="priority 0, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=2 

13   switch=faucet version=4 match=" [ { inport=00000001 }; { vlanvid=0000 } ]" 
     actions=" [ { apply-actions= [ { pushvlan={ ethertype=33024 } }; { setfield={ vlanvid=1064 } } ] }; { goto=2 } ]" 
     info="priority 4096, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=1 

14   switch=faucet version=4 match=" [ { inport=00000002 }; { vlanvid=0000 } ]" 
     actions=" [ { apply-actions= [ { pushvlan={ ethertype=33024 } }; { setfield={ vlanvid=1064 } } ] }; { goto=2 } ]" 
     info="priority 4096, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=1 

15   switch=faucet version=4 match=" []" actions=" []" 
     info="priority 0, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=1 

16   switch=faucet version=4 match=" [ { inport=00000001 } ]" actions=" [ { goto=1 } ]" 
     info="priority 20480, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=0 

17   switch=faucet version=4 match=" [ { inport=00000002 } ]" actions=" [ { goto=1 } ]" 
     info="priority 20480, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=0 

18   switch=faucet version=4 match=" []" actions=" []" 
     info="priority 0, idletimeout 0, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=0 

19   switch=faucet version=4 match=" [ { ethdst=dc2c6ec5a7ff }; { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=1; max_len=0 } } ] } ]" 
     info="priority 8192, idletimeout 413, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=3 

20   switch=faucet version=4 match=" [ { inport=00000001 }; { ethsrc=dc2c6ec5a7ff }; { vlanvid=1064 } ]" 
     actions=" [ { goto=3 } ]" info="priority 8191, idletimeout 0, hardtimeout 263, cookie 1524372928, removenotify 0" 
     table-id=2 

21   switch=faucet version=4 match=" [ { ethdst=dc2c6e46f893 }; { vlanvid=1064 } ]" 
     actions=" [ { apply-actions= [ { popvlan={} }; { output={ port=2; max_len=0 } } ] } ]" 
     info="priority 8192, idletimeout 417, hardtimeout 0, cookie 1524372928, removenotify 0" table-id=3 

22   switch=faucet version=4 match=" [ { inport=00000002 }; { ethsrc=dc2c6e46f893 }; { vlanvid=1064 } ]" 
     actions=" [ { goto=3 } ]" info="priority 8191, idletimeout 0, hardtimeout 267, cookie 1524372928, removenotify 0" 
     table-id=2 


Statistics of the flows can be seen with stats parameter:
[admin@CCR2004_2XS_111] /openflow/flow>  print stats 
Columns: SWITCH, MATCH, BYTES, PACKETS, DURATION
 # SWITCH  MATCH                                                                BYTES  PACKETS  DURATION  
 0 faucet   [ { ethdst_m=01000cccccccffffffffffff } ]                            3590       25  6m26s890ms
 1 faucet   [ { ethdst_m=01000ccccccdffffffffffff } ]                               0        0  6m26s890ms
 2 faucet   [ { ethdst_m=ffffffffffffffffffffffff }; { vlanvid=1064 } ]          5552       26  6m26s890ms
 3 faucet   [ { ethdst_m=0180c2000000fffffffffff0 } ]                            4917       25  6m26s890ms
 4 faucet   [ { ethdst_m=0180c2000000ffffff000000 }; { vlanvid=1064 } ]             0        0  6m26s890ms
 5 faucet   [ { ethdst_m=01005e000000ffffff000000 }; { vlanvid=1064 } ]             0        0  6m26s890ms
 6 faucet   [ { ethdst_m=333300000000ffff00000000 }; { vlanvid=1064 } ]          5992       25  6m26s890ms
 7 faucet   [ { vlanvid=1064 } ]                                                  340        5  6m26s890ms
 8 faucet   []                                                                      0        0  6m26s890ms
 9 faucet   []                                                                  20391      106  6m26s890ms
10 faucet   [ { ethtype=9000 } ]                                                    0        0  6m26s890ms
11 faucet   [ { vlanvid=1064 } ]                                                  530        8  6m26s890ms
12 faucet   []                                                                      0        0  6m26s890ms
13 faucet   [ { inport=00000001 }; { vlanvid=0000 } ]                           39135      463  6m26s890ms
14 faucet   [ { inport=00000002 }; { vlanvid=0000 } ]                           37936      459  6m26s890ms
15 faucet   []                                                                  17941      100  6m26s890ms
16 faucet   [ { inport=00000001 } ]                                             48664      515  6m26s890ms
17 faucet   [ { inport=00000002 } ]                                             46348      507  6m26s890ms
18 faucet   []                                                                      0        0  6m26s890ms
19 faucet   [ { ethdst=dc2c6ec5a7ff }; { vlanvid=1064 } ]                       28340      408  6m26s780ms
20 faucet   [ { ethdst=dc2c6e46f893 }; { vlanvid=1064 } ]                       28340      408  6m26s780ms
21 faucet   [ { inport=00000001 }; { ethsrc=dc2c6ec5a7ff }; { vlanvid=1064 } ]  12020      142  2m660ms   
22 faucet   [ { inport=00000002 }; { ethsrc=dc2c6e46f893 }; { vlanvid=1064 } ]  10769      133  1m55s660ms


Statistics

Fastpath statistics can be seen from /openflow/print fast-path. We can see that in this example fast path is not functional due to complexity of flows Faucet is installing
[admin@CCR2004_2XS_111] /openflow> print fast-path 
  openflow-fast-path-packets: 0 0
    openflow-fast-path-bytes: 0 0


Port statistics can be seen from /openflow/port menu
[admin@CCR2004_2XS_111] /openflow/port> print stats
Columns: INTERFACE, PORT-ID, RX-BYTES, TX-BYTES, RX-PACKETS, TX-PACKETS
# INTERFACE     PORT-ID  RX-BYTES  TX-BYTES  RX-PACKETS  TX-PACKETS
0 sfp-sfpplus1        1    115668     81180        1223        1035
1 sfp-sfpplus2        2    112200     82188        1215        1037


Reference


General

Sub Menu: /openflow

This menu lists the configuration of OpenFlow clients.
certificate (name)	Name of the certificate from certificate list. Used together with verify-peer parameter.
controllers (list of [protocol/address/port])	Configuration of the connection to the controller. Supported protocols are tcp and tls. Example: tcp/1.2.3.4/6654
datapath-id (number/mac)	

Datapath ID consisting of two parts (integer number [0..65535] and MAC address) separated with slash.
name (string)	

Reference name of the entry
passive-port (disabled | integer [1..65535])	

 
verify-peer (if-cert-present | none | required)	

Verify peer's identity using certificates
version (1 | 1.3 | default)	Version of the OpenFlow standard to be used.


Read-Only Parameters
openflow-fast-path-bytes (integer)	Amount of bytes set to fastpath
openflow-fast-path-packets (integer)	Number of packets sent to fastpath


Flows

Sub Menu: /openflow/flow

This menu lists installed flows responsible for packet forwarding between openflow ports.
actions (string)	Action string
bytes (integer)	Amount of bytes matched by the rule
duration (time)	


inactive (yes | no)	

 
info (string)	

 Info string
match (string)	

Matcher rule string
packets (integer)	

 Number of packets matched by the rule
switch (name)	

 Controller name that installed the rule
table-id (integer)	

 ID of the table where rule is located
version (integer)	


Groups

Sub Menu: /openflow/group

 
bucket-count ()	 
bucket-stats ()	
buckets ()	


bytes (integer)	

 
duration (time)	

 
flow-count (integer)	

 
id (integer)	

 
inactive (yes | no)	

 
packets (integer)	

 
switch (name)	
type ()	


Meter

Sub Menu: /openflow/meter

 Sub-menu displays installed traffic meters by the controller. Meters allow the rate-monitoring before the output and apply actions instruction.


band-count ()	 
bands ()	
bytes (integer)	

 Number of accounted bytes
duration (time)	

 
id (integer)	

 
inactive (yes | no)	

 
packets (integer)	

Number of accounted packets 
switch (name)	 Controller name that installed the rule


Ports

Sub Menu: /openflow/port

This menu lists the ports controlled by the OpenFlow. 
interface (name)	Name of the interface to be controlled by the OpenFlow
port-id (integer)	Port ID used to identify interface in flow rules
switch (name)	

Name of the switch that will be able to control the port.


Read-Only Parameters
rx-bytes (integer)	Amount of bytes received on interface
rx-packets (integer)	Number of packets received on interface
tx-bytes (integer)	Amount of bytes transmitted on interface
tx-packets (integer)	Number of packets transmitted on interface





Routing

    Creado por Māris B., actualizado por última vez por Usuario desconocido (emils) el may 31, 2022 1 min de lectura

In This Section:

        Routing Protocol Overview
        Moving from ROSv6 to v7 with examples
        Routing Protocol Multi-core Support
        Policy Routing
        Virtual Routing and Forwarding - VRF
        OSPF
        RIP
        BGP
        RPKI
        Route Selection and Filters
        Multicast
        Routing Debugging Tools
        Routing Reference
        BFD
        IS-IS
        EVPN





    Creado por Māris B., actualizado por última vez el jun 18, 2025 5 min de lectura

    Feature Status
    Performance Status
        One Peer Receive Only
        Two Peers Receive Only
        Multi-homing Sim
        Memory Usage:

Feature Status

N/A - Feature not yet available

OK - Initial tests successful

NOK - initial tests not successful

Highlight Colors:

    Yellow - partially working
    Green - Working
    Red - Not working at the moment

Winbox	 	 	 	 	 	 	 	 
BGP support	
	
	
	
	
	
	
	
OSPF support	
	
	
	
	
	
	
	
RIP support	
	
	
	
	
	
	
	
Router ID support	
	
	
	
	
	
	
	
Routing filter support	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
Generic	 	 	 	 	 	 	 	 
/31 address support	
	
	
	
	
	
	
	
Convert route rules after upgrade from v6.x	
	
	
	
	
	
	
	
Static IPv6 upgrade from ROS v6	
	
	
	
	
	
	
	
IPv4 Route Rules	
	
	
	
	
	
	
	
IPv6 Route Rules	
	
	
	
	
	
	
	
ECMP flags	
	
	
	
	
	
	
	
dst@table	
	
	
	
	
	
	
	
gateway@table	
	
	
	
	
	
	
	
gateway%interface	
	
	
	
	
	
	
	
recursive route over ipv6 LL address	
	
	
	
	
	
	
	
3 level recursive gateway with ECMP 	
	
	
	
	
	
	
	
IPV6 ECMP	
	
	
	
	
	
	
	
IPv6 connected ECMP	
	
	
	
	
	
	
	
Addresses from same subnet to multiple interfaces	
	
	
	
	
	
	
	
Show time when route was last updated	
	
	
	
	
	
	
	
Check Gateway	BFD not ready	
	
	
	
	
	
	
Scope and target scope	
	
	
	
	
	
	
	
IPv4 Mangle routing-mark	
	
	
	
	
	
	
	
IPv6 Mangle routing-mark	
	
	
	
	
	
	
	
Packet SRC address	Does not work correctly with /32 addresses	
	
	
	
	
	
	
Routing-table parameter for ping and telnet	
	
	
	
	
	
	
	
Show if route is hardware accelerated	Shows if route is candidate for HW acceleration	
	
	
	
	
	
	
Custom route selection policy 	
	
	
	
	
	
	
	
IPv4 with IPv6 nexthops for RFC5549	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
Routing id	
	
	
	
	
	
	
	
VRF	
	
	
	
	
	
	
	
Management services support for VRFs 	telnet, ssh, api, www services can be set to listen on specific VRF	
	
	
	
	
	
	
Dynamically import/export routes from one vrf to another within the same router	
	
	
	
	
	
	
	
BFD	
	Initial support	
	
	
	
	
	

	
	
	
	
	
	
	
	
OSPF	 	 	 	 	 	 	 	 
Convert OSPF config from v6 to v7 after upgrade	

Known conversion problems:

    NBMA neighbors place in backbone

    ospf-v2 networks + interface may have issues

    dynamic interfaces may have issues

    MPLS PE CE features are not converted

	


	


	


	


	


	


	


OSPF neighbors in NSSA Area	
	
	
	
	
	
	
	
OSPF in broadcast network	
	
	
	
	
	
	
	
OSPF with routing filters	
	
	
	
	
	
	
	
OSPF Virtual Link	
	
	
	
	
	
	
	
OPSF input filtering	
	
	
	
	
	
	
	
HMAC-SHA auth RFC5709	Initial support	
	
	
	
	
	
	
OSPF SNMP monitoring	
	
	
	
	
	
	
	
BGP SNMP monitoring	
	For ipv4 sessions	
	
	
	
	
	

	
	
	
	
	
	
	
	
IS-IS	
	
	
	
	
	
	
	
IPv4	
	
	Initial support	
	
	
	
	
IPv6	
	
	
	
	
	
	
	
Traffic Engineering	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
BGP	 	 	 	 	 	 	 	 
Convert BGP config from v6 to v7 after upgrade	
	
	
	
	
	
	
	
BGP Templates and dynamic peers	
	
	
	
	
	
	
	
BGP connect listen on a network	
	
	
	
	
	
	
	
BGP guess remote.as	
	
	
	
	
	
	
	
Show from which peer route received	
	
	
	
	
	
	
	
BGP Address Families	
	
	
	
	
	
	
	
BGP input.accept-*	
	
	
	
	
	
	
	
eBGP nexthop self	
	
	
	
	
	
	
	
Input Filter	
	
	
	
	
	
	
	
Output Filter	
	
	
	
	
	
	
	
BGP Local address auto selection	
	
	
	
	
	
	
	
BGP route reflect	
	
	
	
	
	
	
	
BGP route server	
	
	
	
	
	
	
	
BGP Roles
https://datatracker.ietf.org/doc/draft-ietf-idr-bgp-open-policy/?include_text=1	rfc roles not fully implemented	
	
	
	
	
	
	
BGP session uptime in "established" state	
	
	
	
	
	
	
	
BGP session last established time	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
BGP Flow Spec	Flow spec attributes are forwarded	
	
	
	
	
	
	
BGP Selection	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
BGP Selection (Multipath)	
	
	
	
	
	
	
	
BGP Confederation	
	
	
	
	
	
	
	
BGP Aggregation	
	
	
	
	
	
	
	
BGP ORF	
	
	
	
	
	
	
	
Discard prefix RTBH  RFC 6666	
	
	
	
	
	
	
	
AS-wide Unique BGP Identifier RFC 6286	
	
	
	
	
	
	
	
Exported PDU PCAP saver	
	
	
	
	
	
	
	
Exported PDU PCAP loader	
	
	
	
	
	
	
	
BGP Advertisement monitoring	Advertisements rework	
	
	
	
	
	
	
BGP Prefix limit	
	
	
	
	
	
	
	
BGP advertise IPv4 prefix with IPv6 nexthop (RFC5549, RFC8950)	
	
	
	
	
	
	
	AFI/SAFI 1/1
BGP VPNv6 support	
	Prerequisites are made, need to add actual BGP Afi	
	
	
	
	
	
BGP Instance config	
	
	
	
	
	
	
	
EVPN	
	
	
	
	
	
	
	Initial support

	
	
	
	
	
	
	
	
MPLS	 	 	 	 	 	 	 	 
Static label mapping	
	
	
	
	
	
	
	
Static mapping upgrade from v6	
	
	
	
	
	
	
	
LDP IPv4 mapping	
	
	
	
	
	
	
	
LDP IPv6 mapping	
	
	
	
	
	
	
	
LDP signaled VPLS	
	
	
	
	
	
	
	
LDP config upgrade from v6	
	
	
	
	
	
	
	
LDP Dual Stack	
	
	
	
	
	
	
	
TE	
	
	
	
	
	
	
	
TE Config upgrade from v6	
	
	
	
	
	
	
	
VPLS Encap to TE	
	
	
	
	
	
	
	
BGP signaled VPLS	
	
	
	
	
	
	
	
VPLS config upgrade from v6	
	
	
	
	
	
	
	
RSVP Fast reroute	
	
	
	
	
	
	
	
FRR/RI-RSVP (RFC 8370)
	
	
	
	
	
	
	
	
MPLS ECMP	
	
	
	
	
	
	
	
One label per VRF	
	
	
	
	
	
	
	
Ability to use MPLS EXP-bit in Queues	
	
	
	
	
	
	
	
MPLS Fast-Path	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
RPKI session	
	
	
	
	
	
	
	
RPKI possibility to view received info of specific prefix	
	
	
	
	
	
	
	
RPKI show connection status	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
Filters	 	 	 	 	 	 	 	 
Convert routing filters after upgrade from v6.x	
	
	
	
	
	
	
	
Syntax completion	
	
	
	
	
	
	
	
Routing filter chain drop by default without rules	
	
	
	
	
	
	
	
Routing filter prefix match	
	
	
	
	
	
	
	
Routing filter protocol match	
	
	
	
	
	
	
	
Routing filter append communities	
	
	
	
	
	
	
	
Routing filter append large community	
	
	
	
	
	
	
	
Routing filter set weight	
	
	
	
	
	
	
	
Routing filter set local pref	
	
	
	
	
	
	
	
Routing filter set MED	
	
	
	
	
	
	
	
Routing filter set origin	
	
	
	
	
	
	
	
Routing filter set igp metric from OSPF cost	
	
	
	
	
	
	
	
Routing filter match prefix with address list	
	
	
	
	
	
	
	
Routing filter match community/large community lists	
	
	
	
	
	
	
	
Routing filter add a prefix to address list	
	
	
	
	
	
	
	
Routing filter validate prefix with RPKI	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
Multicast	 	 	 	 	 	 	 	 
IGMP-Proxy	
	
	
	
	
	
	
	
PIM-SM	
	
	
	
	
	
	
	
Performance Status


Used hardware:

    CCR1036, 16GB RAM (tile)
    CCR2004(arm64)
    CCR1100AHx4(arm)
    Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz 32GB RAM (as a host for CHRs)


The simulated upstream peer is a CHR router running ROSv6 with a copy of the global IPv4 routing table (585K routes loaded from MRT dump).
One Peer Receive Only

DUT establishes a connection to simulated upstream peers, receives routes, and installs them in FIB.
CCR	0:40 - 2:12	0:46	
	
	
RB1100x4 1.4GHz	0:32-0:38	0:23	
	
	
CCR2004	0:32	0:18	
	
	
x86 (CHR)	0:20	
	
	
	
RB450G (in/out affinity=alone)	after trying for 9min - ran out of memory at 558K routes	2:02 (121MB free)	
	
	
RB450G (in/out affinity=main)	-	1:54	
	
	
RB450G (affinity in=alone out=input)	-	2:12	
	
	
CCR2116	
	
	
	0:36	0:34
CCR2216	
	
	
	0:39	0:34
CCR2216 (150 regexp as-path rules)	
	
	
	
	2:09


Two Peers Receive Only

DUT establishes a connection to two simulated upstream peers, receives routes, picks the best route, and installs in FIB. On ROSv7 affinity settings are set to "alone".
CCR	1:01 - 2:45	
	1:11	
RB1100x4 1.4GHz	0:51	
	0:30	
CCR2004	0:51	
	0:29	0:33
router x	
	
	
	0:40
x86 (CHR)	0:25	
	
	
x86 (virtual)	
	0:26(4cores)	
	

	
	0:46(2cores)	
	

	
	0:30(2cores no LDP)	
	


Multi-homing Sim

Two DUT devices establish eBGP sessions to simulated x86 upstream routers. Both DUTs are interconnected with the iBGP session. Each DUT receives routes from upstream and readvertises routes over iBGP. On ROSv7 affinity, settings are set to "alone" and early-cut disabled.

    Route Provider: CHR (ROSv6 585K routes)
    DUT_1: CCR1036
    DUT_2: CCR1036

v7.1beta3	1:11
v7.1beta2	1:29
v6.xx	1:02 - 8:30


    Route Provider: CHR (ROSv6 585K routes)
    DUT_1: CCR2004
    DUT_2: RB1100AHx2

v7.1beta3	0:36
v6.xx	0:59


    Route Provider: CCR2216 (ROSv7.16 1008427 routes) 
    DUT_1: CCR2216
    DUT_2: CCR2116


	Time	Mem
v7.15.3	0:59	285MB
v7.16	0:48	297MB

Route Server

	Time	Mem
v7.15.3	-	-MB
v7.16	-	

-MB
Memory Usage:
Columns: TASKS, PRIVATE-MEM-BLOCKS, SHARED-MEM-BLOCKS, PSS, RSS, VMS, RETIRED, ID, PID, RPID, PROCESS-TIME, KERNEL-TIME, CUR-BUSY, MAX-BU>
   #  TASKS                         PRIVATE-M  SHARED-M  P  R  V  RE  ID       PID  R  PROCESS-  KERNEL-  CUR  MAX-BUS  CUR  MAX-CALC
   0  routing tables                12.0MiB    30.2MiB   0  0  0  12  main     111  0  8s980ms   2s60ms   0ms  1s320ms  0ms  10s700ms
      rib                                                                                                                            
      connected networks                                                                                                             
   1  fib                           2816.0KiB  0         0  0  0      fib      130  1  3s        4s660ms       7s220ms       7s220ms 
   2  ospf                          512.0KiB   256.0KiB  0  0  0      ospf     137  1  1s220ms   130ms         980ms         1s40ms  
      connected networks                                                                                                             
   3  fantasy                       256.0KiB   0         0  0  0      fantasy  138  1  60ms      80ms          40ms          40ms    
   4  configuration and reporting   3840.0KiB  512.0KiB  0  0  0      static   139  1  1s270ms   110ms         260ms         260ms   
   5  rip                           512.0KiB   0         0  0  0      rip      136  1  120ms     70ms          60ms          120ms   
      connected networks                                                                                                             
   6  routing policy configuration  768.0KiB   768.0KiB  0  0  0      policy   133  1  2s290ms   3s170ms       80ms          80ms    
   7  BGP service                   768.0KiB   0         0  0  0      bgp      134  1  2s760ms   5s480ms       20ms          60ms    
      connected networks                                                                                                             
   8  BFD service                   512.0KiB   0         0  0  0      12       135  1  100ms     90ms          40ms          120ms   
      connected networks                                                                                                             
   9  BGP Input 10.155.101.186      3072.0KiB  6.2MiB    0  0  0      20       183  1  1s350ms   1s190ms       20ms          20ms    
  10  BGP Output 10.155.101.186     5.5MiB     0         0  0  0      21       184  1  5s400ms   500ms         3s880ms       3s880ms 
  11  BGP Input 10.155.101.232      3072.0KiB  6.2MiB    0  0  0      22       187  1  970ms     740ms         20ms          20ms    
  12  BGP Output 10.155.101.232     8.2MiB     0         0  0  0      23       188  1  10s830ms  960ms         7s            7s      
  13  Global memory                            256.0KiB               global     0  0    
  
  