
Network Management

    Creado por Usuario desconocido (emils), actualizado por última vez el may 31, 2022 1 min de lectura

In This Section:

        ARP
        Cloud
        DHCP
        DNS
        SOCKS
        Proxy
        Openflow





    Creado por Edgars P., actualizado por última vez por Druvis Timma el jul 10, 2024 5 min de lectura

    Summary
    Properties
    ARP Modes
        Disabled
        Enabled
        Proxy ARP
        Reply Only
        Local Proxy Arp
    Gratuitous ARP

Summary

Sub-menu: /ip arp

Even though IP packets are addressed using IP addresses, hardware addresses must be used to transport data from one host to another. Address Resolution Protocol is used to map OSI level 3 IP addresses to OSI level 2 MAC addresses. A router has a table of currently used ARP entries. Normally the table is built dynamically, but to increase network security, it can be partially or completely built statically by adding static entries.
Properties

This section describes the ARP table configuration options.
address (IP; Default: )	IP address to be mapped
interface (string; Default: )	Interface name the IP address is assigned to
mac-address (MAC; Default: 00:00:00:00:00:00)	MAC address to be mapped to
published (yes | no; Default: no)	Static proxy-arp entry for individual IP addresses. When an ARP query is received for the specific IP address, the device will respond with its own MAC address. No need to set proxy-arp on the interface itself for all the MAC addresses to be proxied. The interface will respond to an ARP request only when the device has an active route towards the destination


Read-only properties:
complete (yes | no)	Complete flag is included in ARP entries when the ARP status is permanent, reachable, stale, probe, or delay
dhcp (yes | no)	Whether the ARP entry is added by DHCP server
disabled (yes | no)	Whether the ARP entry is disabled
dynamic (yes | no)	Whether the entry is dynamically created
invalid (yes | no)	Whether the entry is not valid
status (delay | failed | incomplete | permanent | probe | reachable | stale )	

Shows the ARP entry state:

    delay - neighbor entry validation is currently delayed
    failed - ARP resolution has failed, the system was not able to obtain the MAC address for the given IP address
    incomplete - system does not have the MAC address information for the IP address, it has not yet been resolved
    permanent - ARP entry is considered permanent and will not be removed from the table, even if it is not actively being used. This is set for manually configured ARP entries
    probe - neighbor is being probed
    reachable - ARP resolution is successful, and the MAC address associated with the IP address is know, the entry is valid until the reachability timeout expires
    stale - entry is still valid, but it is aged. This means that the system has not recently communicated with the device associated with the IP address.

The default maximum number of ARP entries depends on the installed amount of RAM. It can be adjusted with the command "/ip settings set max-neighbor-entries=x", see more details on IPv4 Settings.
ARP Modes

It is possible to set several ARP modes on the interface configuration.

    disabled - the interface will not use ARP
    enabled - the interface will use ARP
    local-proxy-arp -  the router performs proxy ARP on the interface and sends replies to the same interface
    proxy-arp - the router performs proxy ARP on the interface and sends replies to other interfaces
    reply-only - the interface will only reply to requests originated from matching IP address/MAC address combinations which are entered as static entries in the IP/ARP table. No dynamic entries will be automatically stored in the IP/ARP table. Therefore for communications to be successful, a valid static entry must already exist.

Disabled

If the ARP feature is turned off on the interface, i.e., arp=disabled is used, ARP requests from clients are not answered by the router. Therefore, a static ARP entry should be added to the clients as well. For example, the router's IP and MAC addresses should be added to the Windows workstations using the arp command:
C:\> arp -s 10.5.8.254  00-aa-00-62-c6-09
Enabled

This mode is enabled by default on all interfaces. ARPs will be discovered automatically and new dynamic entries will be added to the ARP table.
Proxy ARP

A router with a properly configured proxy ARP feature acts as a transparent ARP proxy between different networks.

This behavior can be useful, for example, if you want to assign dial-in (ppp, pppoe, pptp) clients' IP addresses from the same address space as used on the connected LAN.

Proxy ARP can be enabled on each interface individually with the command arp=proxy-arp:

Setup proxy ARP:
 [admin@MikroTik] /interface ethernet> set 1 arp=proxy-arp

 [admin@MikroTik] /interface ethernet> print

 Flags: X - disabled, R - running
   #    NAME                 MTU   MAC-ADDRESS         ARP
   0  R ether1              1500  00:30:4F:0B:7B:C1 enabled
   1  R ether2              1500  00:30:4F:06:62:12 proxy-arp
Reply Only

If ARP property is set to reply-only on the interface, then the router only replies to ARP requests. Neighbor MAC addresses will be resolved only using statically configured entries from the "/ip arp" menu, but there will be no need to add the router's MAC address to other hosts' ARP tables like in case if ARP is disabled.
Local Proxy Arp

If the ARP property is set to local-proxy-arp on an interface, then the router performs proxy ARP to/from this interface only. i.e. for traffic that comes in and goes out of the same interface. In a normal LAN, the default behavior is for two network hosts to communicate directly with each other, without involving the router.

With local-proxy-arp enabled, the router will respond to all client hosts with the router's own interface MAC address instead of the other host's MAC address.

E.g. If Host A (192.168.88.2/24) queries for the MAC address of Host B (192.168.88.3/24), the router would respond with its own MAC address. In other words, if local-proxy-arp is enabled, the router would assume responsibility for forwarding traffic between Host A 192.168.88.2 and Host B 192.168.88.3. All the ARP cache entries on Hosts A and B will reference the router's MAC address. In this case, the router is performing local-proxy-arp for the entire subnet 192.168.88.0/24.

An example for RouterOS local-proxy-arp could be a bridge setup with a DHCP server and isolated bridge ports where hosts from the same subnet can reach each other only at Layer3 through bridge IP.
/interface bridge
add arp=local-proxy-arp name=bridge1
/interface bridge port
add bridge=bridge1 horizon=1 interface=ether2
add bridge=bridge1 horizon=1 interface=ether3
add bridge=bridge1 horizon=1 interface=ether4
Gratuitous ARP

It is possible to create Gratuitous ARP requests in RouterOS. To do so you must use the Traffic-Generator tool, below is an example of how to generate a Gratuitous ARP request to update the ARP table on a remote device:
/tool traffic-generator inject interface=ether2 \
data="ffffffffffff4c5e0c14ef78080600010800060400014c5e0c14ef780a057a01ffffffffffff0a057a01000000000000000000000000000000000000"

You must change the MAC address (4c5e0c14ef78) and the IP address (0a057a01) to your router's address. The IP address and the MAC address must be from the device that requests an ARP table update. You also need to specify through which interface (ether2) you want to send the Gratuitous ARP request. Make sure that the receiving device supports Gratuitous ARP requests.




    Creado por Deniss M., actualizado por última vez por Normunds R. el ene 23, 2025 8 min de lectura

    Summary
    Services
        DDNS
        Update time
        Backup
        Back to Home
        File share
        Relay service
    Properties
        Advanced
        Cloud backup

Summary

MikroTik offers multiple services for your RouterBOARD devices that are connected to the Internet. These services are meant to ease the inconveniences when configuring, setting up, controlling, maintaining, or monitoring your device. A more detailed list of available services that IP/Cloud can provide can be found below.
Services

Be aware that if the router has multiple public IP addresses and/or multiple internet gateways, the exact IP used for communicating with MikroTik's Cloud server may not be as expected! 

IP/Cloud requires a paid perpetual license for Cloud Hosted Router (CHR). 
Cloud services are not supported on x86 systems.
DDNS

DDNS or Dynamic DNS is a service that updates the IPv4 address for A records and the IPv6 address for AAAA records periodically. Such a service is very useful when your ISP has provided a dynamic IP address that changes periodically, but you always need an address that you can use to connect to your device remotely. Below you can find operation details that are relevant to the IP/Cloud's DDNS service:

    Checks for outgoing IP address change: every 60 seconds
    Waits for the MikroTik's Cloud server's response: 15 seconds
    DDNS record TTL: 60 seconds
    Sends encrypted packets to cloud2.mikrotik.com using UDP/15252 port

Since RouterOS v6.43 if your device is able to reach cloud2.mikrotik.com using IPv6, then a DNS AAAA record is going to be created for your public IPv6 address. If your device is only able to reach cloud2.mikrotik.com using IPv4, then only a DNS A record is going to be created for your public IPv4 address. cloud.mikrotik.com is used for older RouterOS versions prior 6.44

To enable the DDNS service:
[admin@MikroTik] /ip cloud set ddns-enabled=yes
[admin@MikroTik] /ip cloud print
         ddns-enabled: yes
 ddns-update-interval: none
          update-time: yes
       public-address: 159.148.147.196
  public-address-ipv6: 2a02:610:7501:1000::2
             dns-name: 529c0491d41c.sn.mynetname.net
               status: updated

When the service is enabled, a DNS name will be stored on MikroTik's Cloud server permanently and this DNS name will resolve to the last IP that your RouterOS instance has sent to MikroTik's Cloud server. 

To disable the DDNS service: 
/ip cloud set ddns-enabled=auto

Before 7.17, the default value for ddns-enabled was "no". In versions after 7.17 and including, if you want to disable DDNS, make sure to disable the Back To Home feature first, if it was enabled, then set "ddns-enabled=auto"

As soon as you disable the service, your device sends a command to MikroTik's Cloud server to remove the stored DNS name. 

To manually trigger a DNS update: 
[admin@MikroTik] > /ip cloud force-update

To actually connect to the device using the DNS name provided by the cloud server, a user must configure the router's firewall to permit such access from the WAN port. (Default MikroTik configuration does not permit access to services such as WebFig, WinBox, etc. from the WAN port).
Update time

Correct time on a device is important, it causes issues with the system's logs, breaks HTTPS connectivity to the device, tunnel connectivity, and other issues. To have your system's clock updated, you can use NTP or SNTP, though it requires you to specify an IP address for the NTP Server. In most cases, NTP/SNTP is not required in order to simply have a correct time set on the device, for simplicity you can use the IP Cloud's update time service. Below you can find operation details that are relevant to the IP/Cloud's update time service:

    Approximate time (accuracy of several seconds, depends on UDP packet latency)
    Updates time after a reboot and during every DDNS update (when router's WAN IP address changes or after the force-update command is used)
    Sends encrypted packets to cloud2.mikrotik.com using UDP/15252 port
    Detects time-zone depending on the router's public IP address and our commercial database

To enable the time update service:
[admin@MikroTik] > /ip cloud set update-time=yes 

To enable automatic time zone detection: 
[admin@MikroTik] > /system clock set time-zone-autodetect=yes 

 If /ip cloud update-time is set to auto, then the device's clock will be updated with MikroTik's Cloud server time (if no NTP or SNTP client is enabled). 
Backup

It is possible to store your device's backup on MikroTik's Cloud server. The backup service allows you to upload an encrypted backup file, download it and apply the backup file to your device as long as your device is able to reach MikroTik's Cloud server. Below you can find operation details that are relevant to the IP/Cloud's backup service:

    1 free backup slot for each device
    Allowed backup size: 15MB
    Sends encrypted packets to cloud2.mikrotik.com using UDP/15252 and TCP/15252 port

To create a new backup and upload it the MikroTik's Cloud server:
[admin@MikroTik] > /system backup cloud upload-file action=create-and-upload password=test123!!!
[admin@MikroTik] > /system backup cloud print 
 0 name="cloud-20180921-162649" size=13.2KiB ros-version="6.44beta9" date=sep/21/2018 16:26:49 status="ok" secret-download-key="AbCdEfGhIjKlM1234567890" 

The create-and-upload action command will create a new system's backup file, encrypt the backup file with AES using the provided password and upload it. For upload action command the password property has no effect since the upload action command uploads only already created system's backup files. 

To download the uploaded backup file and save it to the device's memory: 
[admin@MikroTik] > /system backup cloud download-file action=download number=0
### OR
[admin@MikroTik] > /system backup cloud download-file action=download secret-download-key=AbCdEfGhIjKlM1234567890

Warning: The secret-download-key is a unique identifier that can be used to download your encrypted backup to your other devices. Since you can download your encrypted backup from any location and any device by using the secret-download-key, then you should try to keep this identifier a secret. The downloaded backup is still encrypted using AES, nevertheless, make sure you are using a strong password! 

To remove the uploaded backup: 
/system backup cloud remove-file number=0

To replace an existing file with a new backup file, use the following command:
/system/backup/cloud/upload-file action=create-and-upload replace=_your_previously_created_backup_file_ password=test123!!!

To upload an existing backup file (created previously): 
[admin@MikroTik] > /system backup save encryption=aes-sha256 name=old_backup password=test123!!!
[admin@MikroTik] > /system backup cloud upload-file action=upload src-file=old_backup.backup
[admin@MikroTik] > /system backup cloud print 
 0 name="cloud-20180921-164044" size=13.2KiB ros-version="6.44beta9" date=sep/21/2018 16:40:44 status="ok" secret-download-key="AbCdEfGhIjKlM1234567890"

Make sure that the backup was encrypted using AES, otherwise, the IP/Cloud will reject the backup upload. Since there is only 1 free backup slot per device, then you need to remove the existing backup before uploading a new one. 

Warning: When importing a backup all MAC addresses are set to the MAC addresses that the device was using. This is useful when you are replacing a device that has failed, but this might not be desired when applying the same backup on multiple devices since it will set the same MAC addresses on multiple devices, which can cause connectivity issues. You can always use the reset-mac-address command on each interface to set the original MAC address back. 
Back to Home

For more info about Back to Home (BTH) service, see the separate documentation page. 
File share

For more info about File Share service, see the separate documentation page. 
Relay service

Back to home and File Share both partially rely on the MikroTik cloud relay service. All transmissions through the relay service are end-to-end encrypted, relay is purely to faclilitate connection and is designed to never require decryption of user data or metadata. See respective manuals for details on how each service uses the relay. 
Properties

Sub-menu: /ip cloud
ddns-enabled (yes | auto; Default: auto)	

If set to yes, then the device will send an encrypted message to MikroTik's Cloud server. The server will then decrypt the message and verify that the sender is an authentic MikroTik device. If all is OK, then MikroTik's Cloud server will create a DDNS record for this device and send a response to the device. Every minute the IP/Cloud service on the router will check if the WAN IP address matches the one sent to MikroTik's Cloud server and will send an encrypted update to the cloud server if the IP address changes.

If set to auto, ddns will only be enabled if Back To Home is enabled.

prior to the 7.17 versions, the default value was "no".


ddns-update-interval (time, minimum 60 seconds; Default: none)	If set DDNS will attempt to connect IP Cloud servers at the set interval. If set to none it will continue to internally check IP address update and connect to IP Cloud servers as needed. Useful if the IP address used is not on the router itself and thus, cannot be checked as a value internal to the router.
update-time (yes | no; Default: yes)	If set to yes then router clock will be set to time, provided by the cloud server IF there is no NTP or SNTP client enabled. If set to no, then IP/Cloud service will never update the device's clock. If update-time is set to yes, Clock will be updated even when ddns-enabled is set to no.
public-address (read-only: address)	Shows the device's IPv4 address that was sent to the cloud server. This field is visible only after at least one IP Cloud request was successfully completed.
public-address-ivp6 (read-only: address)	Shows the device's IPv6 address that was sent to the cloud server. This field is visible only after at least one IP Cloud request was successfully completed.
warning (read-only: string)	Shows a warning message if the IP address sent by the device differs from the IP address in the UDP packet header as visible by MikroTik's Cloud server. Typically this happens if the device is behind NAT. Example: "DDNS server received a request from IP 123.123.123.123 but your local IP was 192.168.88.23; DDNS service might not work"
dns-name (read-only: name)	Shows the DNS name assigned to the device. Name consists of 12 characters serial number appended by .sn.mynetname.net. This field is visible only after at least one ddns-request is successfully completed.
status (read-only: string)	Contains text string that describes the current dns-service state. The messages are self explanatory

    updating...
    updated
    Error: no Internet connection
    Error: request timed out
    Error: REJECTED. Contact MikroTik support
    Error: internal error - should not happen. One possible cause is if the router runs out of memory

Advanced

Sub-menu: /ip cloud advanced
use-local-address (yes | no; Default: no)	By default, the DNS name will be assigned to the detected public address (from the UDP packet header). If you wish to send your "local" or "internal" IP address, then set this to yes
Cloud backup

Sub-menu: /system backup cloud

Below you can find commands and properties that are relevant to the specific command, other properties will not have any effect. 

    download-file

action (download)	Downloads an uploaded backup file from MikroTik's Cloud server.
number (integer)	Specifies the backup slot on MikroTik's Cloud server, the free backup slot is always going to be in the 0th slot.
secret-download-key (string)	Unique identifier that can be used to download your uploaded backup file. When downloading the uploaded backup file you do not have to be using the same device, from which the backup was uploaded from. Useful when deploying a backup on a new device.

    remove-file

number (integer)	Deletes the backup file in the specified backup slot, the free backup slot is always going to be in the 0th slot.

    upload-file

action (create-and-upload)	Uploads a backup file to MikroTik's Cloud server.

    create-and-upload - creates a new backup file with the specified password and uploads it
    upload - uploads a created system's backup file.

name (string)	Specifies the backup's name that will show up in the uploaded backups list. This is NOT the source backup's name, this name is only used for visual representation.
src-file (file)	Backup's file name to upload that was created using /system backup. This property only has an effect when the action is set to upload.
password (string)	Create, encrypt and upload a backup file with the specified password. This property only has an effect when the action is set to create-and-upload.



    Creado por Normunds R., actualizado por última vez por Jānis Bērziņš el nov 28, 2024 9 min de lectura

    Overview
        Enabling BTH using the app
        Sharing the BTH connection with another phone user
        Sharing the BTH tunnel with a computer via the WireGuard(TM) app
        Configuring BTH manually in RouterOS (optional, if no smartphone is available to you)
        Removing and disabling connections
    Property reference
        IP Cloud
        Back to Home users

Overview

Sub-menu: /ip cloud
Packages required: routeros
RouterOS version required: v7.12 and newer
Hardware requirements: ARM/ARM64/TILE architecture devices

Back To Home is a convenience feature, that configures your device for secure VPN access from anywhere in the world to your router and your network, even if your router does not have a public IP address, is behind NAT or Firewall.

Configuration is done with MikroTik Back to Home app (Android, iPhone).

If the VPN server (your home router) has a public IP address, the VPN app will create a direct VPN connection between the phone and the router. However, if the router is not directly reachable from the internet, the connection will be made through the MikroTik relay servers. The connection is always end-to-end encrypted, the relay server or any other device does not have access to the encryption keys, in essence, the relay only helps your device to reach the router. The connection will appear as going out from your router, not from the relay. In case of going through relay, speed could be limited.

This feature is a convenient option to access your home network or view content available in your home country, from locations, where some content is not available. It is not meant for anonymity, it is for simple one click access to your home network. For more granular security controls, we recommend to manually configure and secure a VPN connection using the advanced RouterOS options.
Enabling BTH using the app

To set up Back to Home, you should have a smartphone with the BTH app and should be inside your home, connected to your routers WiFi network. 

    Connect to router's Wi-Fi using your phone;
    Open the Back to Home application (Android, iPhone);
    Tap "Create new";
    Enter your local router IP address (most likely 192.168.88.1), username, and password of your router, tap "Connect";
    Give tunnel a name, then tap"Create tunnel";
    Your phone will ask for permission to add new VPN settings, approve it with your phone pin; 
    Setup is done. You can now disconnect from router's Wi-Fi and connect to any other network, like LTE/5G or simply leave your house now;
    Tap the Connect button to toggle connection of the selected tunnel.


Tap "Create new"
	

Provide your router credentials
	

Connection established
	

Allow VPN to be added
	

If device is not supported, error is shown
Sharing the BTH connection with another phone user

It is possible to create Guest tunnels for your friends and family. You can even specify if you want these people to access your local network as well, or if they should be restricted to only use the internet via your router. Once you create shared tunnels, you can send Invitation links via any chat application in your phone, or show a QR code to your friend in person (in both these cases, the friend will have to also install the BTH app). If you want to connect to your router via the WireGuard(TM) app from another phone or from a computer, it is possible as well. Just select the share WireGuard(TM) config file, and open this file in the WireGuard(TM) app. 
Manage shares	Connect to your tunnel first	Once connected, Create shares	Provide a name and access level	Share sheet opens	Send the invite link via WhatsApp, Signal etc.

To share your tunnel with somebody: 

    As the owner, connect to your BTH tunnel
    Click the "..." icon next to your tunnel and click "Manage shares"
    Enter the administration password for the router, since you will be modifying the router config
    Tap "Create" in the Shares manager
    Enter your friends name in the "Tunnel name", since a new tunnel will be made for them
    Specify expiry date of this new Guest tunnel
    Specify if the user will need to access your intenal network of your home. Do not check this if they only want to use this tunnel for internet access
    Once "Create tunnel" has been pressed, phone Share Sheet opens. Select method how to send the invite link 
    Once the other person clicks on this link, he will either be directed to install the BTH app, or the BTH app will open and will allow to set up this new Guest tunnel in their phone

Sharing the BTH tunnel with a computer via the WireGuard(TM) app

Since there is no BTH app for PCs, you can use WireGuard(TM) app to connect to the shared tunnel. You can even share your connection with yourself, by "inviting" your computer to connect. 

Let's make a new share, this time for yourself, for using from the PC. 
Create	Specify name and access level	You have two shares now 	Click "..." to send invite	Pick "Share WireGuard config  file"	AirDrop to your macOS or e-mail the file

Install the WireGuard app in your computer and click "Import Tunnel from file" 

Configuring BTH manually in RouterOS (optional, if no smartphone is available to you)


Important notice

It is important to note, NOTHING has to be configured in RouterOS to use Back to Home. Simply use the BTH app (see above section) to enable it. The whole point of Back to Home is to avoid using Winbox or command line. Below instructions are only for debugging or seasoned administrators. 

    Connect to router  
    Enable DDNS Cloud service: `/ip/cloud/set ddns-enabled=yes`
    Enable Back To Home: `/ip/cloud/set back-to-home-vpn=enabled`
    Print tunnel configuration: `/ip/cloud/print`
    Scan QR Code (`vpn-wireguard-client-config-qrcode`) or Copy config (`vpn-wireguard-client-config`) and enter in preferred WireGuard® client. Only one client at a time will be available to use this config.

    After configuring Back To Home - an additional peer entry is automatically made, which can be seen by running the command /ip cloud print. This is intended for the VPN to work in the case that the device does not have access to a public IP address and opts to establish the connection by using MikroTIk's relay server.
    In the case your device has access to a public IP address, the generated peer entry is ignored:

    [Peer]
    PublicKey = //////////////////////////////////////////8=
    AllowedIPs = 0.0.0.0/32
    Endpoint = example.com:12345
    PersistentKeepalive = 15 

Removing and disabling connections

In the smartphone app, the VPN configuration is added to the System VPN settings. In this regard, the Back to Home app only acts as a wizard. It supplies needed config to the operating system (this is why iPhone will warn you about altering system configuration).

To remove the created connection, go into the smartphone settings app and remove the VPN connections from there. 

In the MikroTik router side, you should manually delete the added Peers in the Wireguard menu. Note that "revoke-and-disable" button can't be used to "Pause" the use of the Back to Home feature. Once you revoke-and-disable in RouterOS, all Peers will be disassociated from the Cloud / Relay servers, and you will have to re-create the connection from the Smartphone app. Therefore, once you have used the option "revoke-and-disable" in RouterOS IP Cloud menu, you need to also delete the Peers from the Wireguard menu, as they can't be re-used. 
Property reference
IP Cloud

Sub-menu: /ip/cloud/

Back to Home shares the menu with IP Cloud. Back to Home parameters:
back-to-home-vpn (enabled | revoked-and-disabled; Default: revoked-and-disabled)	

Enables or revokes and disables the Back to Home service. ddns-enabled has to be set to yes, for BTH to function.
vpn-dns-name (read-only: string)	Shows the DNS name assigned to the device. Name consists of product serial number appended by .vpn.mynetname.net. This field is visible only after at least one ddns-request is successfully completed.
vpn-port (read-only: integer)
	Port used by BTH VPN.
vpn-status (read-only: string)	Contains text string that describes the current BTH state.
vpn-relay-rtts (read-only; "region (ip4: time(ms), ip6: time (ms)")	Round trip time in milliseconds for each available relay, values are shown both for IPv4 and IPv6.
vpn-relay-ipv4-status (read-only: string)	Status on connection to relay and detailed information about relay
vpn-relay-ipv6-status (read-only: string)	Status on connection to relay and detailed information about relay
vpn-relay-codes (read-only: string)	Available VPN relay codes, which can be referenced in vpn-prefer-relay-code. All available relays will be shown here.
vpn-relay-addressess (read-only: string)	IPv4 address of the relay
vpn-relay-addressess-ipv6 (read-only: string)	IPv6 address of the relay
vpn-private-key (read-only: string)	Private key for BTH
vpn-public-key (read-only: string)	Public key for BTH
vpn-peer-private-key (read-only: string)	Peer private key
vpn-peer-public-key (read-only: string)	Peer public key
vpn-prefer-relay-code (string;)	You can enter relay code that will be preferred for BTH connection, if not set, relay with smallest RTT will be chosen.
vpn-interface (read-only: string)	Name of the created interface for Back to Home WireGuard® tunnel.
vpn-wireguard-client-config (read-only: string)	

Configuration that can be entered in your preferred WireGuard® client. Only one client at a time will be available to use this config.
vpn-wireguard-client-config-qrcode (read-only)	

Scannable QR Code for your preferred WireGuard® client. Only one client at a time will be available to use this config.

When using vpn-wireguard-client-config or vpn-wireguard-client-config-qrcode, both options are equal, you only need to import one of these into your WireGuard client device.
Back to Home users

Sub-menu: /ip/cloud/back-to-home-users/

Since RouterOS 7.14 there is a new back to home specific user manager available in the menu /ip/cloud/back-to-home-users> where you can see all the users that are added by the Back to Home mobile app, change their firewall preference and also add new ones.

[boss@mikrotik-ax] /ip/cloud/back-to-home-users> print detail 
Flags: X - disabled; A - active 

 0  A name="user1" slot=3 expires=never client-address=192.168.216.3/32,fc00:0:0:216::3/128 allow-lan=no 
      private-key="OHqR2BZXJp0N6//3JzzoJhBJVb0rrSxV0dxQL/2UdXY=" public-key="Na7oEq9XLdeK8ouCUX+tC4FIM51vEnZ7mLiFqG9xiUQ=" 

[boss@mikrotik-ax] /ip/cloud/back-to-home-users>

When adding users in this menu, you can view their Wireguard config and QR code with this command /interface/wireguard/peers/show-client-config user1

Allow-lan=no will add the users into a firewall address list, that only allows internet access, but blocks the user from accessing your internal network. Note that expiry date can't be changed, once a user has been added. 
name (string)	

Informative name of BTH user

expires (string; never | date: "YYYY-MM-DD HH:MM:SS";

Default: never)
	

Expiration time and date for user, cannot be changed once user is created
client-addresss (string: IPv4 | IPv6)	

Client address, if not specified one will be made automatically
allow-lan (string: yes | no; Default: no)	

Will add the user into a firewall address list, that only allows internet access, but blocks the user from accessing your internal network
private-key (string;)	

Private key for user, if not set manually, it will be generated by the system
public-key (string;)	

Public key for user, if not set manually, it will be generated by the system






    Creado por Normunds R., actualizado por última vez por Jānis Bērziņš el may 26, 2025 5 min de lectura

File share function allows you to use your routers external storage to share files with anyone on the internet. Simply attach a USB, nVME or any supported drive to your device, and then add whole directory paths to the fileshare menu. The router will use the MikroTik cloud service to issue a HTTPS certificate and a domain name for your router. The URL which you can then distribute to anyone will be shown in the file-share menu. You can also enable ability for anyone to upload files into your router. The URL is randomly generated, so while it is available to anyone who knows the link, if you keep it safe, only people with the link will be able to use it. 
Adding shares

First, attach your USB drive and determine the file path of the directory you want to share: 
[user@RouterOS] > file/print
 # NAME                                                                           TYPE             SIZE LAST-MODIFIED
 0 web                                                                            directory             2025-01-23 09:29:42
 1 usb1                                                                           disk                  2025-01-22 09:45:57
 2 pub                                                                            directory             2025-01-23 09:24:41
 3 skins                                                                          directory             2024-12-10 08:19:27
 4 pub/index.html                                                                 .html file        670 2025-01-23 09:24:41
 5 skins/default.json                                                             .json file        151 2024-07-15 10:20:11
 6 usb1/Secret Files                                                        	  directory             2024-03-18 09:01:41
 7 usb1/forum                                                                     directory             2025-01-22 10:58:20
 8 usb1/Secret Files/Home Video.srt                 							  .srt file         267 2020-06-01 11:29:14
 9 usb1/Secret Files/Home Video.mp4                 							  .mp4 file   1584.4MiB 2020-06-01 11:34:33
10 usb1/forum/cat.jpeg                                                            .jpeg file  4307.7KiB 2025-01-22 09:38:55
11 usb1/forum/cat1.jpeg                                                           .jpeg file   231.8KiB 2025-01-22 10:58:20
12 usb1/forum/cat2.jpeg                                                           .jpeg file   129.6KiB 2025-01-22 10:58:20
13 usb1/forum/cat3.jpeg                                                           .jpeg file   263.8KiB 2025-01-22 10:58:20
14 usb1/forum/cat4.jpeg                                                           .jpeg file   438.4KiB 2025-01-22 10:58:20
15 web/index.html                                                                 .html file       1473 2025-01-23 09:29:42

Now in the ip/cloud menu go to file share, and add a new share, specifying the expiration date and whether the other user will have permission to upload files to your router: 
[user@RouterOS] /ip/cloud/back-to-home-file> add allow-uploads=no expires=never path="usb1/Secret Files/"

Now you can issue the print command to see if the share link has been made and what the URL is to copy for sharing: 
[user@RouterOS] /ip/cloud/back-to-home-file> print
Columns: PATH, URL, DIRECT-URL, EXPIRES, DOWNLOADS
# PATH                      URL                                                        DIRECT-URL                                                    EXPIRES  DOWNLOADS
0 /usb1/Secret Files  https://acf017skgys.routingthecloud.net/s/4MPgHbEZCZYGVtp  https://acf017skgys.routingthecloud.net/s/4MPgHbEZCZYGVtp?dl  never            5
1 /usb1/Secrets      https://acf017skgys.routingthecloud.net/s/K8zkh1UjKuqtEQ0  https://acf017skgys.routingthecloud.net/s/K8zkh1UjKuqtEQ0?dl  never            2
[user@RouterOS] /ip/cloud/back-to-home-file>

Now, if you copy the "URL", you can share it with other people, regardless of where they are located, and regardless of whether your router has a public IP or not. 

When you send the URL to a friend, they can then see all the files in the shared directory and can download them. If you enabled uploads in the share creation process, they can also upload files into your router. Keep this URL safe, or specify "expires" date to avoid other people accessing these files. 

enable (Default)	

Enables the File Share function. The File Share service will be activated when the first share is added. If no shares are present, the File Share service remains disabled.
disabled (yes | no; Default: no)
	Disables the File share function.
allow-uploads (yes | no; Default: no)
	

Enables the option for anyone to upload files to your router.
expires (Default: never)
	

Share expires date. Format: ISO 8601 (2025-01-25 00:00:00)
Example: /ip/cloud/back-to-home-file set 0 expires="2025-01-25 07:15:00"
path	

Sets the path for the file to be shared.

Example: "/ip/cloud/back-to-home-file/add path=mypath/myfile"
WinBox GUI

To share the file, access the "File Shares" menu located under the IP → Cloud "Configuration" section.

To create a new share, set the "Path", "Expires" and "Auto uploads" options.

[admin@MikroTik] > ip/cloud/back-to-home-file/print detail 
Flags: X - disabled; I - invalid 
 0    path=/mypath/myfile allow-uploads=no expires=2025-01-25 07:15:00 key="*********" 
      url="https://*********.routingthecloud.net/s/*********" direct-url="https://*********.routingthecloud.net/s/*********" 
      downloads=0

Security warning

The URL is randomly generated, so while it is available to anyone who knows the link, if you keep it safe, only people with the link will be able to use it. 

File share uses HTTPS (TCP port 443), but if you have manually configured WebFig to also use HTTPS, File Share will then automatically work only though our cloud relay service, since there can not be two things using the same port in one device. By default www-ssl is not enabled, so File Share works directly by default, without using the relay for downloads. Enabling file share will not in any way affect your WebFig confguration and will not open it to the world.

In the case of the File Share feature, when a user wants to share a file with somebody, this is the order of operation, if your router is directly accessible from the internet (checked by the Relay server):

    Router locally generates private key and certificate
    Signing of certificate is performed on router using standard ACME protocol (using DNS-01 challenge with LetsEncrypt backend)
    DNS-01 challenge is sent to MikroTik cloud DNS server, by temporarily adding a DNS TXT record (standard procedure)
    DNS name resolves to router
    Secure 443 port is opened with private certificate

Relay service

If device is not directly accessible from the internet, it will choose to use the MikroTik hosted Relay service. 

    Router checks its reachability from internet
    If relayed connection is needed, then DNS is updated to relay IP
    Router picks closest relay based on latency
    If router uses the relay, then connection is kept open with relay. yyyyyy.routingthecloud.net resolves to relay. When client makes connection via relay, then TLS Client Hello is parsed to get destination router and whole HTTPS request is forwarded directly to router.
    Relay has no way of decrypting your data, because certificate with private key is on the router only







    Creado por GG, actualizado por última vez por Edgars P. el jun 19, 2025 40 min de lectura

    DHCP Client
        Summary
        DHCP Options
        Properties
        Configuration Examples
            Simple DHCP client
            Lease script example
            Using received Option 43 to set the ACS URL
            Resolve default gateway when 'router' (option3) is from a different subnet
    DHCPv6 Client
        Summary
        Properties
        Script
        IAID
        Configuration Examples
            Simple DHCPv6 client
            Use received prefix for local RA
    DHCP Server
        Summary
        DHCP Server Properties
        Leases
            Menu specific commands
            Store Configuration
            Rate limiting
        Network
        RADIUS Support
        Alerts
        DHCP Options
            DHCP Option Sets
            Example
        Option matcher
            Properties
            Option matcher examples
        Configuration Examples
            Setup
            Manual configuration
    DHCPv6 Server
        Summary
        General
        DHCPv6 Server Properties
        Bindings
            Rate limiting
        RADIUS Support
        Configuration Example
            Enabling IPv6 Prefix delegation
            Enabling IPv6 Address delegation
    DHCP Relay
        Summary
        Properties
        Configuration Example
        DHCP Relay with VRF (introduced in 7.15)

DHCP Client
Summary
/ip dhcp-client

The DHCP (Dynamic Host Configuration Protocol) is used for the easy distribution of IP addresses in a network. The MikroTik RouterOS implementation includes both server and client parts and is compliant with RFC 2131.

The MikroTik RouterOS DHCP client may be enabled on any Ethernet-like interface at a time. The client will accept an address, netmask, default gateway, and two DNS server addresses. The received IP address will be added to the interface with the respective netmask. The default gateway will be added to the routing table as a dynamic entry. Should the DHCP client be disabled or not renew an address, the dynamic default route will be removed. If there is already a default route installed prior to the DHCP client obtaining one, the route obtained by the DHCP client would be shown as invalid.

RouterOS DHCP client asks for the following options:

    option 1 - Subnet Mask,
    option 3 - Gateway Addresses,
    option 6 - DNS Server Addresses,
    option 33 - Static Routes,
    option 42 - NTP Server Addresses,
    option 43 - Vendor Specific Information,
    option 121 - Classless Static Routes,
    option 138 - CAPWAP Access Controller Addresses.

DHCP Options

DHCP client has the possibility to set up options that are sent to the DHCP server. For example, hostname and MAC address. The syntax is the same as for DHCP server options.

Currently, there are three variables that can be used in options:

    HOSTNAME;
    CLIENT_MAC - client interface MAC address;
    CLIENT_DUID - client DIUD of the router, same as used for the DHCPv6 client. In conformance with RFC4361

DHCP client default options include these default Options:
clientid_duid	61	0xff$(CLIENT_DUID)
clientid	61	0x01$(CLIENT_MAC)
hostname	12	$(HOSTNAME)
Properties
add-default-route (yes | no | special-classless; Default: yes)	Whether to install default route in routing table received from DHCP server. By default, the RouterOS client complies with RFC and ignores option 3 if classless option 121 is received. To force the client not to ignore option 3 set special-classless. This parameter is available in v6rc12+

    yes - adds classless route if received, if not then add default route (old behavior)
    special-classless - adds both classless routes if received and a default route (MS style)

allow-reconfigure (yes | no; Default: no)	Allows to receive Reconfigure (forcerenew) message from DHCP server. For changes in existing dhcp-client, renew the lease.
check-gateway (none | arp | bgd | ping; Default: none)	Method on how to check route gateway reachability.
client-id (string; Default: )	Corresponds to the settings suggested by the network administrator or ISP. If not specified, the client's MAC address will be sent
comment (string; Default: )	Short description of the client
default-route-tables (table:distance; Default: main)	List of routing tables to which default route must be added. Table name can be proceeded with ":x" where x would be the distance for the route to be installed with.
default-route-distance (integer:0..255; Default: )	Default route distance.
disabled (yes | no; Default: yes)	Whether client is disabled.
dscp (integer:0..63; Default: 0)	Sets the DSCP (Differentiated Services Code Point) value for outgoing DHCP client packets. This value is part of the IP header and is used to indicate the desired Quality of Service (QoS) level for network traffic.
host-name (string; Default: )	The hostname of the client is sent to a DHCP server. If not specified, the client's system identity will be used.
interface (string; Default: )	The interface on which the DHCP client will be running.
script (script; Default: )	Execute script when DHCP client obtains a new lease or loses an existing one, received gateway address or DNS server list is changed.
Variables that are accessible for the event script:

    bound - 1 - lease is added/changed; 0 - lease is removed
    server-address - server address
    lease-address - lease address provided by a server
    interface - name of the interface on which the client is configured
    gateway-address - gateway address provided by a server
    vendor-specific - stores value of option 43 received from DHCP server
    lease-options - an array of received options

Example >>
use-peer-dns (yes | no; Default: yes)	Whether to accept the DNS settings advertised by DHCP Server. (Will override the settings put in the /ip dns submenu.
use-peer-ntp (yes | no; Default: yes)	Whether to accept the NTP settings advertised by DHCP Server. (Will override the settings put in the /system ntp client submenu)
vlan-priority (integer:0..7; Default: 0)	If the DHCP client is running on a VLAN interface (/interface/vlan), you can specify the Priority Code Point (PCP) value. PCP is a 3-bit field in the VLAN header used to mark the priority of packets within a VLAN, allowing traffic to be prioritized accordingly. This setting applies only to VLAN interfaces and affects the priority of outgoing DHCP client packets.

Read-only properties
address (IP/Netmask)	IP address and netmask, which is assigned to DHCP Client from the Server
dhcp-server (IP)	The IP address of the DHCP server.
expires-after (time)	A time when the lease expires (specified by the DHCP server).
gateway (IP)	The IP address of the gateway which is assigned by the DHCP server
invalid (yes | no)	Shows whether a configuration is invalid.
netmask (IP)	
primary-dns (IP)	The IP address of the first DNS resolver, which was assigned by the DHCP server
primary-ntp (IP)	The IP address of the primary NTP server, assigned by the DHCP server
secondary-dns (IP)	The IP address of the second DNS resolver, assigned by the DHCP server
secondary-ntp (IP)	The IP address of the secondary NTP server, assigned by the DHCP server
status (bound | error | rebinding... | requesting... | searching... | stopped)	Shows the status of the DHCP Client
reconfigure-key (string)	Reconfiguration authentication key
reconfigure-last-counter (time)	Count of recieved Recongure (forcerenew) messages

Menu specific commands
release (numbers)	Release current binding and restart the DHCP client
renew (numbers)	Renew current leases. If the renewal operation was not successful, the client tries to reinitialize the lease (i.e. it starts the lease request procedure (rebind) as if it had not received an IP address yet)
Configuration Examples
Simple DHCP client

Add a DHCP client on the ether1 interface:
/ip dhcp-client add interface=ether1 disabled=no

After the interface is added, you can use the "print" or "print detail" command to see what parameters the DHCP client acquired:
[admin@MikroTik] ip dhcp-client> print detail
Flags: X - disabled, I - invalid 
 0   interface=ether1 add-default-route=yes use-peer-dns=yes use-peer-ntp=yes
     status=bound address=192.168.0.65/24 gateway=192.168.0.1
     dhcp-server=192.168.0.1 primary-dns=192.168.0.1 primary-ntp=192.168.0.1
     expires-after=9m44s 
[admin@MikroTik] ip dhcp-client>

If the interface used by the DHCP client is part of the VRF configuration, then the default route and other received routes from the DHCP server will be added to the VRF routing table.

DHCP client status can be checked with:
/ip dhcp-client print detail 
Lease script example

It is possible to execute a script when a DHCP client obtains a new lease or loses an existing one. This is an example script that automatically adds a default route with routing-table=WAN1 and removes it when the lease expires or is removed.

Be aware that some variables might be reserved in specific menus and cannot be used there. More info find here.


/ip dhcp-client
add add-default-route=no dhcp-options=hostname,clientid disabled=no interface=ether2 script="{\r\
    \n    :local rmark \"WAN1\"\r\
    \n    :local count [/ip route print count-only where comment=\"WAN1\"]\r\
    \n    :if (\$bound=1) do={\r\
    \n        :if (\$count = 0) do={\r\
    \n            /ip route add gateway=\$\"gateway-address\" comment=\"WAN1\" routing-table=\$rmark\r\
    \n        } else={\r\
    \n            :if (\$count = 1) do={\r\
    \n                :local test [/ip route find where comment=\"WAN1\"]\r\
    \n                :if ([/ip route get \$test gateway] != \$\"gateway-address\") do={\r\
    \n                    /ip route set \$test gateway=\$\"gateway-address\"\r\
    \n                }\r\
    \n            } else={\r\
    \n                :error \"Multiple routes found\"\r\
    \n            }\r\
    \n        }\r\
    \n    } else={\r\
    \n        /ip route remove [find comment=\"WAN1\"]\r\
    \n    }\r\
    \n}\r\
    \n"
Using received Option 43 to set the ACS URL

It is possible to set Automatic Configuration Server (ACS) URL in the TR069 client settings, when a DHCP client lease is bound, if the option sent from the DHCP server is configured to send it. Here's an example:
:if ($bound=1) do={
/tr069-client/set acs-url=$"vendor-specific"
}
Resolve default gateway when 'router' (option3) is from a different subnet

In some cases, administrators tend to set the 'router' option which cannot be resolved with offered IP's subnet. For example, the DHCP server offers 192.168.88.100/24 to the client, and option 3 is set to 172.16.1.1. This will result in an unresolved default route:
 #      DST-ADDRESS        PREF-SRC        GATEWAY            DISTANCE
 0  DS  0.0.0.0/0                          172.16.1.1              1
 1 ADC  192.168.88.0/24    192.168.88.100  ether1 

To fix this we need to add /32 route to resolve the gateway over ether1, which can be done by the running script below each time the DHCP client gets an address
/system script add name="dhcpL" source={ /ip address add address=($"lease-address" . "/32") network=$"gateway-address" interface=$interface }

Now we can further extend the script, to check if the address already exists, and remove the old one if changes are needed
/system script add name="dhcpL" source={ 
  /ip address {
    :local ipId [find where comment="dhcpL address"]
    :if ($ipId != "") do={
      :if (!([get $ipId address] = ($"lease-address" . "/32") && [get $ipId network]=$"gateway-address" )) do={
        remove $ipId;
        add address=($"lease-address" . "/32") network=$"gateway-address" \
          interface=$interface comment="dhcpL address"
      }
    } else={
      add address=($"lease-address" . "/32") network=$"gateway-address" \
        interface=$interface comment="dhcpL address"
    }
  }
}
DHCPv6 Client
Summary

Sub-menu: /ipv6 dhcp-client

DHCP-client in RouterOS is capable of being a DHCPv6-client and DHCP-PD client. So it is able to get a prefix from the DHCP-PD server as well as the DHCPv6 stateful address from the DHCPv6 server.
Properties
add-default-route (yes | no; Default: no)	Whether to add default IPv6 route after a client connects.
allow-reconfigure (yes | no; Default: no)t	Allows to receive Reconfigure (forcerenew) message from DHCP server.
default-route-tables (table:distance; Default: main)	List of routing tables to which default route must be added. Table name can be proceeded with ":x" where x would be the distance for the route to be installed with.
comment (string; Default: )	Short description of the client
disabled (yes | no; Default: no)	
interface (string; Default: )	The interface on which the DHCPv6 client will be running.
pool-name (string; Default: )	Name of the IPv6 pool in which received IPv6 prefix will be added
pool-prefix-length (string; Default: )	Prefix length parameter that will be set for IPv6 pool in which received IPv6 prefix is added. Prefix length must be greater or equal as the length of received prefix, otherwise, prefix-length will be set to received prefix length + 8 bits.
prefix-address-lists (string; Default: )	Names of the firewall address lists to which received prefix will be added.
prefix-hint (string; Default: )	Include a preferred prefix length.
request (prefix, address; Default: )	to choose if the DHCPv6 request will ask for the address or the IPv6 prefix, or both.
script (string; Default: )	Run this script on the DHCP-client status change. Available variables:

    pd-valid - if the prefix is acquired by the client;
    pd-prefix - the prefix acquired by the client if any;
    na-valid - if the address is acquired by the client;
    na-address - the address acquired by the client if any.
    options - array of received options (only ROSv7)

use-peer-dns (yes | no; Default: yes)	Whether to accept the DNS settings advertised by the IPv6 DHCP Server.
custom-duid (hex string; Default: )	Allow to specify custom DUID.
use-interface-duid (yes | no; Default: no)	According to RFC DHCPv6 client generate DUID based on the router first interface MAC address, not the interface on which client is configured. With this option enabled you will override this requirement and MAC address from "interface" specified on client will be used.
validate-server-duid (yes | no; Default: yes)	Allow to ignore incorrectly formed DUID provided by DHCPv6 server. Still checks that minimal DUID length is correct.
custom-iapd-id (hex string; Default: )	Allow to specify custom IAPD ID.
custom-iana-id (hex string; Default: )	Allow to specify custom IANA ID.

Read-only properties
duid (string)	Auto-generated DUID that is sent to the server. DUID is generated using one of the MAC addresses available on the router.
request (list)	specifies what was requested - prefix, address, or both.
dynamic (yes | no)	
expires-after (time)	A time when the IPv6 prefix expires (specified by the DHCPv6 server).
invalid (yes | no)	Shows whether a configuration is invalid.
prefix (IPv6 prefix)	Shows received IPv6 prefix from DHCPv6-PD server
status (stopped | searching | requesting... | bound | renewing | rebinding | error | stopping)	Shows the status of DHCPv6 Client:

    stopped - dhcpv6 client is stopped
    searching - sending "solicit" and trying to get "advertise"
    requesting - sent "request" waiting for "reply"
    bound - received "reply". Prefix assigned.
    renewing - sent "renew", waiting for "reply"
    rebinding - sent "rebind", waiting for "reply"
    error - reply was not received in time or some other error occurred.
    stopping - sent "release"

reconfigure-key (string)	Reconfiguration authentication key
reconfigure-last-counter (integer)	Count of recieved forcerenew messages

Menu specific commands
release (numbers)	Release current binding and restart DHCPv6 client
renew (numbers)	Renew current leases. If the renewal operation was not successful, the client tries to reinitialize the lease (i.e. it starts the lease request procedure (rebind) as if it had not received an IP address yet)
Script

It is possible to add a script that will be executed when a prefix or an address is acquired and applied or expires and is removed using the DHCP client. There are separated sets of variables that will have the value set by the client depending on prefix or address status change as the client can acquire both and each of them can have a different effect on the router configuration.

Available variables for dhcp-client

    pd-valid - value - 1 or 0 - if prefix is acquired and it is applied or not
    pd-prefix - value ipv6/num (ipv6 prefix with mask) - the prefix inself
    na-valid - value - 1 or 0 - if address is acquired and it is applied or not
    na-address - value - ipv6 address - the address

IAID

To determine what IAID will be used, convert the internal ID of an interface on which the DHCP client is running from hex to decimal.

For example, the DHCP client is running on interface PPPoE-out1. To get internal ID use the following command:
[admin@t36] /interface> :put [find name="pppoe-out1"] 
*15


Now convert hex value 15 to decimal and you get IAID=21
Configuration Examples
Simple DHCPv6 client

This simple example demonstrates how to enable dhcp client to receive IPv6 prefix and add it to the pool.
/ipv6 dhcp-client add request=prefix pool-name=test-ipv6 pool-prefix-length=64 interface=ether13 


Detailed print should show status of the client and we can verify if prefix is received
[admin@x86-test] /ipv6 dhcp-client> print detail 
Flags: D - dynamic, X - disabled, I - invalid
 0 interface=bypass pool-name="test-ipv6" pool-prefix-length=64 status=bound 
prefix=2001:db8:7501:ff04::/62 expires-after=2d23h11m53s request=prefix


Notice that server gave us prefix 2a02:610:7501:ff04::/62 . And it should be also added to ipv6 pools
[admin@MikroTik] /ipv6 pool> print 
Flags: D - dynamic 
# NAME PREFIX REQUEST PREFIX-LENGTH
0 D test-ipv6 2001:db8:7501:ff04::/62 prefix 64

It works! Now you can use this pool, for example, for pppoe clients.
Use received prefix for local RA

Consider following setup:

    ISP is routing prefix 2001:DB8::/62 to the router R1
    Router R1 runs DHCPv6 server to delegate /64 prefixes to the customer routers CE1 CE2
    DHCP client on routers CE1 and CE2 receives delegated /64 prefix from the DHCP server (R1).
    Client routers uses received prefix to set up RA on the local interface


Configuration


R1
/ipv6 route 
add gateway=fe80::1:1%to-ISP 

/ipv6 pool 
add name=myPool prefix=2001:db8::/62 prefix-length=64 

/ipv6 dhcp-server
 add prefix-pool=myPool disabled=no interface=to-CE-routers lease-time=3m name=server1



CE1
/ipv6 dhcp-client
add interface=to-R1 request=prefix pool-name=my-ipv6

/ipv6 address
add address=::1/64 from-pool=my-ipv6 interface=to-clients advertise=yes


CE2
/ipv6 dhcp-client
 add interface=to-R1 request=prefix pool-name=my-ipv6 
/ipv6 address add address=::1/64 from-pool=my-ipv6 interface=to-clients advertise=yes



Check the status

After configuration is complete we can verify that each CE router received its own prefix

On server:
[admin@R1] /ipv6 dhcp-server binding> print
 Flags: X - disabled, D - dynamic 
# ADDRESS DUID IAID SERVER STATUS
 1 D 2001:db8:1::/64 0019d1393536 566 server1 bound 
2 D 2001:db8:2::/64 0019d1393535 565 server1 bound


On client:
[admin@CE1] /ipv6 dhcp-client> print 
Flags: D - dynamic, X - disabled, I - invalid 
# INTERFACE STATUS REQUEST PREFIX 
0 to-R1 bound prefix 2001:db8:1::/64 

[admin@CE1] /ipv6 dhcp-client> /ipv6 pool print 
Flags: D - dynamic 
# NAME PREFIX PREFIX-LENGTH
0 D my-ipv6 2001:db8:1::/64 64


We can also see that IPv6 address was automatically added from the prefix pool:
[admin@CE1] /ipv6 address> print 
Flags: X - disabled, I - invalid, D - dynamic, G - global, L - link-local 
# ADDRESS FROM-POOL INTERFACE ADVERTISE 0 G 2001:db8:1::1/64 to-clients yes 
..


And pool usage shows that 'Address' is allocating the pool
[admin@CE1] /ipv6 pool used> print
 POOL PREFIX OWNER INFO 
my-ipv6 2001:db8:1::/64 Address to-clients
DHCP Server
Summary

The DHCP (Dynamic Host Configuration Protocol) is used for the easy distribution of IP addresses in a network. The MikroTik RouterOS implementation includes both server and client parts and is compliant with RFC 2131.

The router supports an individual server for each Ethernet-like interface. The MikroTik RouterOS DHCP server supports the basic functions of giving each requesting client an IP address/netmask lease, default gateway, domain name, DNS-server(s) and WINS-server(s) (for Windows clients) information (set up in the DHCP networks submenu)

In order for the DHCP server to work, IP pools must also be configured (do not include the DHCP server's own IP address into the pool range) and the DHCP networks.

It is also possible to hand out leases for DHCP clients using the RADIUS server; the supported parameters for a RADIUS server are as follows:


Access-Request:

    NAS-Identifier - router identity
    NAS-IP-Address - IP address of the router itself
    NAS-Port - the ID of the interface where the DHCP server is configured. This value is the same as the IF-MIB::ifIndex
    NAS-Port-Id - the name of the interface where the DHCP server is configured
    NAS-Port-Type - Ethernet
    Calling-Station-Id - client identifier (active-client-id)
    Framed-IP-Address - IP address of the client (active-address)
    Called-Station-Id - the name of DHCP server
    User-Name - MAC address of the client (active-mac-address)
    Password - " "

Access-Accept:

    Framed-IP-Address - IP address that will be assigned to a client
    Framed-Pool - IP pool from which to assign an IP address to a client
    Rate-Limit - Datarate limitation for DHCP clients. Format is: rx-rate[/tx-rate] [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold] [rx-burst-time[/tx-burst-time][priority] [rx-rate-min[/tx-rate-min]]]]. All rates should be numbers with optional 'k' (1,000s) or 'M' (1,000,000s). If tx-rate is not specified, rx-rate is as tx-rate too. Same goes for tx-burst-rate and tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and tx-burst-threshold are not specified (but burst-rate is specified), rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time and tx-burst-time are not specified, 1s is used as default. Priority takes values 1..8, where 1 implies the highest priority, but 8 - the lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and tx-rate values are used. The rx-rate-min and tx-rate-min values can not exceed rx-rate and tx-rate values.
    Ascend-Data-Rate - TX/RX data rate limitation if multiple attributes are provided, first limits tx data rate, second - RX data rate. If used together with Ascend-Xmit-Rate, specifies RX rate. 0 if unlimited
    Ascend-Xmit-Rate - tx data rate limitation. It may be used to specify the TX limit only instead of sending two sequential Ascend-Data-Rate attributes (in that case Ascend-Data-Rate will specify the receive rate). 0 if unlimited
    Session-Timeout - max lease time (lease-time)

DHCP server requires a real interface to receive raw ethernet packets. If the interface is a Bridge interface, then the Bridge must have a real interface attached as a port to that bridge which will receive the raw ethernet packets. It cannot function correctly on a dummy (empty bridge) interface.
DHCP Server Properties
add-arp (yes | no; Default: no)	Whether to add dynamic ARP entry. If set to no either ARP mode should be enabled on that interface or static ARP entries should be administratively defined in /ip arp submenu.
address-pool (string | static-only; Default: static-only)	IP pool, from which to take IP addresses for the clients. If set to static-only, then only the clients that have a static lease (added in the lease submenu) will be allowed.
allow-dual-stack-queue (yes | no; Default: yes)	Creates a single simple queue entry for both IPv4 and IPv6 addresses, and uses the MAC address and DUID for identification. Requires IPv6 DHCP Server to have this option enabled as well to work properly.
always-broadcast (yes | no; Default: no)	

Changes whether to force broadcast DHCP replies:

    no - replies are sent based on the client's broadcast flag. If the server sends three consecutive offers, the third and forth offer will be sent as a broadcast;
    yes - replies are always broadcasted even when the client has not specified the broadcast flag.

authoritative (after-10sec-delay | after-2sec-delay | yes | no; Default: yes)	Option changes the way how a server responds to DHCP requests:

    yes - replies to clients' requests for an address that is not available from this server, DHCP server will send a negative acknowledgment (DHCPNAK);
    no - DHCP server ignores clients' requests for addresses that are not available from this server;

    after-10sec-delay - requests with "secs < 10" will be processed as in "no" setting case and requests with "secs >= 10" will be processed as in "yes" case;

    after-2sec-delay - requests with "secs < 2" will be processed as in "no" setting case and requests with "secs >= 2" will be processed as in "yes" case;


If all requests with "secs < x" should be ignored, then delay-threshold=x setting should be used.
bootp-lease-time (forever | lease-time | time; Default: forever)	Accepts two predefined options or time value:

    forever - lease never expires
    lease-time - use time from lease-time parameter

bootp-support (none | static | dynamic; Default: static)	Support for BOOTP clients:

    none - do not respond to BOOTP requests
    static - offer only static leases to BOOTP clients
    dynamic - offer static and dynamic leases for BOOTP clients

client-mac-limit (integer | unlimited; Default: unlimited)	Specifies whether to limit a specific number of clients per single MAC address or leave unlimited. Note that this setting should not be used in relay setups.
conflict-detection (yes | no; Default: yes)	Allows disabling/enabling conflict detection. If the option is enabled, then whenever the server tries to assign a lease it will send ICMP and ARP messages to detect whether such an address in the network already exists. If any of the above get a reply address is considered already used. 
delay-threshold (time | none; Default: none)	If the sec's field in the DHCP packet is smaller than the delay threshold, then this packet is ignored. If set to none - there is no threshold (all DHCP packets are processed)
dhcp-option-set (name | none; Default: none)	Use a custom set of DHCP options defined in the option sets menu.
insert-queue-before (bottom | first | name; Default: first)	Specify where to place dynamic simple queue entries for static DHCP leases with a rate-limit parameter set.
interface (string; Default: )	The interface on which the DHCP server will be running.
lease-script (string; Default: "")	A script that will be executed after a lease is assigned or de-assigned. Internal "global" variables that can be used in the script:

    leaseBound - set to "1" if bound, otherwise set to "0"
    leaseServerName - DHCP server name
    leaseActMAC - active mac address
    leaseActIP - active IP address
    lease-hostname - client hostname
    lease-options - an array of received options

lease-time (time; Default: 30m)	The time that a client may use the assigned address. The client will try to renew this address after half of this time and will request a new address after the time limit expires.
name (string; Default: )	Reference name
parent-queue (string | none; Default: none)	A dynamically created queue for this lease will be configured as a child queue of the specified parent queue.
relay (IP; Default: 0.0.0.0)	The IP address of the relay this DHCP server should process requests from:

    0.0.0.0 - the DHCP server will be used only for direct requests from clients (no DHCP relay allowed)
    255.255.255.255 - the DHCP server should be used for any incoming request from a DHCP relay except for those, which are processed by another DHCP server that exists in the /ip dhcp-server submenu.

server-address (IP; Default: 0.0.0.0)	The IP address of the server to use in the next step of the client's bootstrap process (For example, to assign a specific server address in case several addresses are assigned to the interface)
use-framed-as-classless (yes | no; Default: yes)	Forward RADIUS Framed-Route as a DHCP Classless-Static-Route to DHCP-client. Whenever both Framed-Route and Classless-Static-Route are received Classless-Static-Route is preferred.
use-radius (yes | no | accounting; Default: no)	Whether to use RADIUS server:

    no - do not use RADIUS;
    yes - use RADIUS for accounting and lease;
    accounting - use RADIUS for accounting only.

use-reconfigure (yes | no; Default: no)
	Allow the server to send Reconfigure (forcerenew) messages to clients, prompting them to renew configuration without waiting for their lease to expire.
Leases

Sub-menu: /ip dhcp-server lease

DHCP server lease submenu is used to monitor and manage server leases. The issued leases are shown here as dynamic entries. You can also add static leases to issue a specific IP address to a particular client (identified by MAC address).

Generally, the DHCP lease is allocated as follows:

    an unused lease is in the "waiting" state
    if a client asks for an IP address, the server chooses one
    if the client receives a statically assigned address, the lease becomes offered, and then bound with the respective lease time
    if the client receives a dynamic address (taken from an IP address pool), the router sends a ping packet and waits for an answer for 0.5 seconds. During this time, the lease is marked testing
    in the case where the address does not respond, the lease becomes offered and then bound with the respective lease time
    in other cases, the lease becomes busy for the lease time (there is a command to retest all busy addresses), and the client's request remains unanswered (the client will try again shortly)

A client may free the leased address. The dynamic lease is removed, and the allocated address is returned to the address pool. But the static lease becomes busy until the client reacquires the address.

IP addresses assigned statically are not probed!


address (IP; Default: 0.0.0.0)	Specify IP address (or ip pool) for static lease. If set to 0.0.0.0 - a pool from the DHCP server will be used
address-list (string; Default: none)	Address list to which address will be added if the lease is bound.
allow-dual-stack-queue (yes | no; Default: yes)	Creates a single simple queue entry for both IPv4 and IPv6 addresses, and uses the MAC address and DUID for identification. Requires IPv6 DHCP Server to have this option enabled as well to work properly.
always-broadcast (yes | no; Default: no)	

Changes whether to force broadcast DHCP replies:

    no - replies are sent based on the client's broadcast flag. If the server sends three consecutive offers, the third and forth offer will be sent as a broadcast;
    yes - replies are always broadcasted even when the client has not specified the broadcast flag.

block-access (yes | no; Default: no)	Block access for this client
client-id (string; Default: none)	If specified, must match the DHCP 'client identifier' option of the request
dhcp-option (string; Default: none)	Add additional DHCP options from option list.
dhcp-option-set (string; Default: none)	Add an additional set of DHCP options.
insert-queue-before (bottom | first | name; Default: first)	Specify where to place dynamic simple queue entries for static DHCP leases with rate-limit parameter set.
lease-time (time; Default: 0s)	Time that the client may use the address. If set to 0s lease will never expire.
mac-address (MAC; Default: 00:00:00:00:00:00)	If specified, must match the MAC address of the client
parent-queue (string | none; Default: none)	A dynamically created queue for this lease will be configured as a child queue of the specified parent queue.
queue-type (default, ethernet-default, multi-queue-ethernet-default, pcq-download-default, synchronous-default, default-small, hotspot-default, only-hardware-queue, pcq-upload-default, wireless-default)	Queue type that can be assigned to the specific lease
rate-limit (integer[/integer] [integer[/integer] [integer[/integer] [integer[/integer]]]];; Default: )	Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static. Format is: rx-rate[/tx-rate] [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold] [rx-burst-time[/tx-burst-time]]]]. All rates should be numbers with optional 'k' (1,000s) or 'M' (1,000,000s). If tx-rate is not specified, rx-rate is as tx-rate too. Same goes for tx-burst-rate and tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and tx-burst-threshold are not specified (but burst-rate is specified), rx-rate and tx-rate is used as burst thresholds. If both rx-burst-time and tx-burst-time are not specified, 1s is used as default.
routes ([dst-address/mask] [gateway] [distance]; Default: none)	

Routes that appear on the server when the client is connected. It is possible to specify multiple routes separated by commas. This setting will be ignored for OpenVPN.
server (string)	Server name which serves this client
use-src-mac (yes | no; Default: no)	When this option is set server uses the source MAC address instead of the received CHADDR to assign the address.
Menu specific commands
check-status (id)	Check the status of a given busy (status is conflict or declined) dynamic lease, and free it in case of no response
make-static (id)	Convert a dynamic lease to a static one
send-reconfigure (id)	Send Reconfigure (forcerenew) message
Store Configuration

Sub-menu: /ip dhcp-server config

Store Leases On Disk: The configuration of how often the DHCP leases will be stored on disk. If they would be saved on a disk on every lease change, a lot of disk writes would happen which is very bad for Compact Flash (especially, if lease times are very short). To minimize writes on disk, all changes are saved on disk every store-leases-disk seconds. Additionally, leases are always stored on disk on graceful shutdown and reboot.

Manual changes to leases - addition/removal of a static lease, removal of a dynamic lease will cause changes to be pushed for this lease to storage.

Accounting: The accounting parameter in the DHCP server configuration enables or disables accounting for DHCP leases. When accounting is enabled, the DHCP server logs information about IP address assignments and lease renewals. This information can be useful for tracking and monitoring network usage, analyzing traffic patterns, or generating reports on IP address allocations.

Interim-update: The interim-update parameter determines whether the DHCP server sends periodic updates to the accounting server during a lease. These updates provide information about the lease duration, usage, and other relevant details. Enabling interim updates allows for more accurate tracking of lease activity.

Radius-password: The radius-password parameter is used to set the password for the RADIUS (Remote Authentication Dial-In User Service) server. RADIUS is a networking protocol commonly used for providing centralized authentication, authorization, and accounting for network access. When configuring the DHCP server to communicate with a RADIUS server for authentication or accounting purposes, you need to specify the correct password to establish a secure connection. This parameter ensures that the DHCP server can authenticate with the RADIUS server using the specified password.
Rate limiting

It is possible to set the bandwidth to a specific IPv4 address by using DHCPv4 leases. This can be done by setting a rate limit on the DHCPv4 lease itself, by doing this a dynamic simple queue rule will be added for the IPv4 address that corresponds to the DHCPv4 lease. By using the rate-limit parameter you can conveniently limit a user's bandwidth.

For any queues to work properly, the traffic must not be FastTracked, make sure your Firewall does not FastTrack traffic that you want to limit.


First, make the DHCPv4 lease static, otherwise, it will not be possible to set a rate limit to a DHCPv4 lease:
[admin@MikroTik] > /ip dhcp-server lease print 
Flags: X - disabled, R - radius, D - dynamic, B - blocked 
 #   ADDRESS               MAC-ADDRESS       HOST-NAME               SERVER               RATE-LIMIT               STATUS 
 0 D 192.168.88.254        6C:3B:6B:7C:41:3E MikroTik                DHCPv4_Server                                 bound 

[admin@MikroTik] > /ip dhcp-server lease make-static 0

[admin@MikroTik] > /ip dhcp-server lease print 
Flags: X - disabled, R - radius, D - dynamic, B - blocked 
 #   ADDRESS               MAC-ADDRESS       HOST-NAME               SERVER               RATE-LIMIT               STATUS 
 0   192.168.88.254        6C:3B:6B:7C:41:3E MikroTik                DHCPv4_Server                                 bound


Then you can set a rate to a DHCPv4 lease that will create a new dynamic simple queue entry:
[admin@MikroTik] > /ip dhcp-server lease set 0 rate-limit=10M/10M

[admin@MikroTik] > /queue simple print 
Flags: X - disabled, I - invalid, D - dynamic 
 0  D name="dhcp-ds<6C:3B:6B:7C:41:3E>" target=192.168.88.254/32 parent=none packet-marks="" priority=8/8 queue=default-small/default-small limit-at=10M/10M max-limit=10M/10M burst-limit=0/0 burst-threshold=0/0 burst-time=0s/0s 
      bucket-size=0.1/0.1


By default allow-dual-stack-queue is enabled, this will add a single dynamic simple queue entry for both DHCPv6 binding and DHCPv4 lease, without this option enabled separate dynamic simple queue entries will be added for IPv6 and IPv4.

If allow-dual-stack-queue is enabled, then a single dynamic simple queue entry will be created containing both IPv4 and IPv6 addresses:
[admin@MikroTik] > /queue simple print 
Flags: X - disabled, I - invalid, D - dynamic 
 0  D name="dhcp-ds<6C:3B:6B:7C:41:3E>" target=192.168.88.254/32,fdb4:4de7:a3f8:418c::/66 parent=none packet-marks="" priority=8/8 queue=default-small/default-small limit-at=10M/10M max-limit=10M/10M burst-limit=0/0 burst-threshold=0/0 
      burst-time=0s/0s bucket-size=0.1/0.1 
Network

Sub-menu: /ip dhcp-server network

Properties
address (IP/netmask; Default: )	the network DHCP server(s) will lease addresses from
boot-file-name (string; Default: )	Boot filename
caps-manager (string; Default: )	A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
dhcp-option (string; Default: )	Add additional DHCP options from the option list.
dhcp-option-set (string; Default: )	Add an additional set of DHCP options.
dns-none (yes | no; Default: no)	

If set, then DHCP Server will not pass DNS servers configured on the router to the DHCP clients.
dns-server (string; Default: )	

DNS servers that will be passed to DHCP clients. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers

By default, if there are no DNS servers configured, then the router dynamic DNS Servers from IP>DNS will be passed to DHCP clients, if there are no dynamic DNS server configured, the router static DNS servers from IP>DNS will be passed to DHCP clients.
domain (string; Default: )	The DHCP client will use this as the 'DNS domain' setting for the network adapter.
gateway (IP; Default: 0.0.0.0)	The default gateway to be used by DHCP Client.
netmask (integer: 0..32; Default: 0)	The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
next-server (IP; Default: )	The IP address of the next server to use in bootstrap.
ntp-server (IP; Default: )	the DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
wins-server (IP; Default: )	The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
RADIUS Support

Since RouterOS v6.43 it is possible to use RADIUS to assign a rate limit per lease, to do so you need to pass the Mikrotik-Rate-Limit attribute from your RADIUS Server for your lease. To achieve this you first need to set your DHCPv4 Server to use RADIUS for assigning leases. Below is an example of how to set it up:
/radius
add address=10.0.0.1 secret=VERYsecret123 service=dhcp
/ip dhcp-server
set dhcp1 use-radius=yes

After that, you need to tell your RADIUS Server to pass the Mikrotik-Rate-Limit attribute. In case you are using FreeRADIUS with MySQL, then you need to add appropriate entries into radcheck and radreply tables for a MAC address, that is being used for your DHCPv4 Client. Below is an example for table entries:
INSERT INTO `radcheck` (`username`, `attribute`, `op`, `value`) VALUES
('00:0C:42:00:D4:64', 'Auth-Type', ':=', 'Accept'),

INSERT INTO `radreply` (`username`, `attribute`, `op`, `value`) VALUES
('00:0C:42:00:D4:64', 'Framed-IP-Address', '=', '192.168.88.254'),
('00:0C:42:00:D4:64', 'Mikrotik-Rate-Limit', '=', '10M'),
Alerts

To find any rogue DHCP servers as soon as they appear in your network, the DHCP Alert tool can be used. It will monitor the interface for all DHCP replies and check if this reply comes from a valid DHCP server. If a reply from an unknown DHCP server is detected, an alert gets triggered:
[admin@MikroTik] ip dhcp-server alert>/log print
00:34:23 dhcp,critical,error,warning,info,debug dhcp alert on Public:
    discovered unknown dhcp server, mac 00:02:29:60:36:E7, ip 10.5.8.236
[admin@MikroTik] ip dhcp-server alert>

When the system alerts about a rogue DHCP server, it can execute a custom script.

As DHCP replies can be unicast, the rogue DHCP detector may not receive any offer to other DHCP clients at all. To deal with this, the rogue DHCP detector acts as a DHCP client as well - it sends out DHCP discover requests once a minute.

The DHCP alert is not recommended on devices that are configured as DHCP clients. Since the alert itself generates DHCP discovery packets, it can affect the operation of the DHCP client itself. Use this feature only on devices that are DHCP servers or using a static IP address.

Sub-menu: /ip dhcp-server alert

Properties
alert-timeout (none | time; Default: 1h)	Time after which the alert will be forgotten. If after that time the same server is detected, a new alert will be generated. If set to none timeout will never expire.
interface (string; Default: )	Interface, on which to run rogue DHCP server finder.
on-alert (string; Default: )	Script to run, when an unknown DHCP server is detected.
valid-server (string; Default: )	List of MAC addresses of valid DHCP servers.

Read-only properties
unknown-server (string)	List of MAC addresses of detected unknown DHCP servers. The server is removed from this list after alert-timeout

Menu specific commands
reset-alert (id)	Clear all alerts on an interface
DHCP Options

Sub-menu: /ip dhcp-server option

With the help of the DHCP Option list, it is possible to define additional custom options for DHCP Server to advertise. Option precedence is as follows:

    radius,
    lease,
    server,
    network.

This is the order in which the client option request will be filled in.

According to the DHCP protocol, a parameter is returned to the DHCP client only if it requests this parameter, specifying the respective code in the DHCP request Parameter-List (code 55) attribute. If the code is not included in the Parameter-List attribute, the DHCP server will not send it to the DHCP client, but since RouterOS v7.1rc5 it is possible to force the DHCP option from the server-side even if the DHCP-client does not request such parameter:
ip/dhcp-server/option/set force=yes

Properties
code (integer:1..254; Default: )	dhcp option code. All codes are available at http://www.iana.org/assignments/bootp-dhcp-parameters
name (string; Default: )	Descriptive name of the option
value (string; Default: )	Parameter's value. Available data types for options are:

        'test' -> ASCII to Hex 0x74657374
        '10.10.10.10' -> Unicode IP to Hex 0x0a0a0a0a
        s'10.10.10.10' -> ASCII to hex 0x31302e31302e31302e3130
        s'160' -> ASCII to hex 0x313630
        '10' -> Decimal to Hex 0x0a
        0x0a0a -> No conversion
        $(VARIABLE) -> hardcoded values

RouterOS has predefined variables that can be used:

    HOSTNAME - client hostname
    RADIUS_MT_STR1 - from radius MT attr nr. 24
    RADIUS_MT_STR2 - from radius MT attr nr. 25
    REMOTE_ID - agent remote-id
    NETWORK_GATEWAY - the first gateway from '/ip dhcp-server network', note that this option won't work if used from lease


Now it is also possible to combine data types into one, for example: "0x01'vards'$(HOSTNAME)"

For example if HOSTNAME is 'kvm', then raw value will be 0x0176617264736b766d.
raw-value (HEX string )	Read-only field which shows raw DHCP option value (the format actually sent out)
DHCP Option Sets

Sub-menu: /ip dhcp-server option sets

This menu allows combining multiple options in option sets, which later can be used to override the default DHCP server option set.
Example

Classless Route

A classless route adds a specified route in the clients routing table. In our example, it will add

    dst-address=160.0.0.0/24 gateway=10.1.101.1
    dst-address=0.0.0.0/0 gateway=10.1.101.1


According to RFC 3442: The first part is the netmask ("18" = netmask /24). Second part is significant part of destination network ("A00000" = 160.0.0). Third part is IP address of gateway ("0A016501" = 10.1.101.1). Then There are parts of the default route, destination netmask (0x00 = 0.0.0.0/0) followed by default route (0x0A016501 = 10.1.101.1)
/ip dhcp-server option
add code=121 name=classless value=0x18A000000A016501000A016501
/ip dhcp-server network
set 0 dhcp-option=classless

Result:
[admin@MikroTik] /ip route> print
Flags: X - disabled, A - active, D - dynamic, C - connect, S - static, r - rip, b - bgp, o - ospf,
m - mme, B - blackhole, U - unreachable, P - prohibit
 #      DST-ADDRESS        PREF-SRC        GATEWAY            DISTANCE
 0 ADS  0.0.0.0/0                          10.1.101.1         0
 1 ADS  160.0.0.0/24                       10.1.101.1         0


A much more robust way would be to use built-in variables, the previous example can be rewritten as:
/ip dhcp-server option 
add name=classless code=121 value="0x18A00000\$(NETWORK_GATEWAY)0x00\$(NETWORK_GATEWAY)"


Auto proxy config
/ip dhcp-server option 
  add code=252 name=auto-proxy-config value="'https://autoconfig.something.lv/wpad.dat'"
Option matcher

The Option matcher allows to identify DHCP clients by any of DHCP options and assign IP address from specific IP pool.

It is possible to perform exact (provided value should match exactly ) or  substring matching (will look for value match anywhere in the option string — it can match values at the start, middle, or end).

Substring matching is useful in cases where value can change depending on the end device, for example, if the class-identifier sent by the device contains not only vendor information, but also exact MAC or other additional information.

It's possible to define two substring matches for the same option, for example, one that matches "ABC" and another one that matches "ABCDE", if there is a DHCP option with the value of "ABCDEF", both entries would match it, but the matcher that will get applied will be selected randomly.


Clients with a static lease will continue to receive their static address, even when matched by the option matcher.


Properties
address-pool (string | static-only; Default: static-only)	IP pool, from which to take IP addresses for the clients. If set to static-only, then only clients that have a static lease (added in the lease submenu) will be allowed.
code (integer:1..254; Default: )	DHCP option code. All codes are available at http://www.iana.org/assignments/bootp-dhcp-parameters
comment (string; Default: )	Short description of option matcher.
disabled (yes | no; Default: no)	Whether an item is disabled
matching-type (exact | substring; Default: )	

Matching method:

    exact - option should match exactly to value;
    substring - value can match anywhere in the option string — at the start, middle, or end.

name (string; Default: )	Descriptive name for option matcher.
option-set (name | none; Default: none)	A custom set of DHCP options defined in the Option Sets menu.
server (string | all; Default: )	Server name which serves option matcher.
value (string; Default: )	

A value that will be searched for in option.

Available data types for value are:

    string;
    HEX.

Option matcher examples

Match dhcp1 server clients by exact Vendor class identifier (DHCP option 60) and assign address from the pool1:
/ip dhcp-server matcher
add address-pool=pool1 code=60 matching-type=exact name=test1 server=dhcp1 value=android-dhcp-11

Match clients on all DHCP servers by exact Client Id (DHCP option 61) configured as hex value and assign address from the pool2:
/ip dhcp-server matcher
add address-pool=pool2 code=61 matching-type=exact name=test2 server=all value=0x016c3b6bed8364

Match dhcp2 server clients partially by Hostname (DHCP option 12) and assign address from the pool3:
/ip dhcp-server matcher
add address-pool=pool3 code=12 matching-type=substring name=test3 server=dhcp2 value=MikroTik


Configuration Examples
Setup

To simply configure DHCP server you can use a setup command.

First, you configure an IP address on the interface:
[admin@MikroTik] > /ip address add address=192.168.88.1/24 interface=ether3 disabled=no

Then you use setup a command which will automatically ask necessary parameters:
[admin@MikroTik] > /ip dhcp-server setup 
Select interface to run DHCP server on 

dhcp server interface: ether3
Select network for DHCP addresses 

dhcp address space: 192.168.88.0/24
Select gateway for given network 

gateway for dhcp network: 192.168.88.1
Select pool of ip addresses given out by DHCP server 

addresses to give out: 192.168.88.2-192.168.88.254
Select DNS servers 

dns servers: 10.155.126.1,10.155.0.1,                               
Select lease time 

lease time: 10m


That is all. You have configured an active DHCP server.
Manual configuration

To configure the DHCP server manually to respond to local requests you have to configure the following:

    An IP pool for addresses to be given out, make sure that your gateway/DHCP server address is not part of the pool.

/ip pool add name=dhcp_pool0 ranges=192.168.88.2-192.168.88.254

    A network indicating subnets that DHCP-server will lease addresses from, among other information, like a gateway, DNS-server, NTP-server, DHCP options, etc.

/ip dhcp-server network add address=192.168.88.0/24 dns-server=192.168.88.1 gateway=192.168.88.1

    In our case, the device itself is serving as the gateway, so we'll add the address to the bridge interface:

/ip address add address=192.168.88.1/24 interface=bridge1 network=192.168.88.0

    And finally, add DHCP Server, here we will add the previously created address pool, and specify on which interface the DHCP server should work on

/ip dhcp-server add address-pool=dhcp_pool0 disabled=no interface=bridge1 name=dhcp1
DHCPv6 Server
Summary

Standards: RFC 3315, RFC 3633

Single DUID is used for client and server identification, only IAID will vary between clients corresponding to their assigned interface.

Client binding creates a dynamic pool with a timeout set to binding's expiration time (note that now dynamic pools can have a timeout), which will be updated every time binding gets renewed.

When a client is bound to a prefix, the DHCP server adds routing information to know how to reach the assigned prefix.
General

Sub-menu: /ipv6 dhcp-server

This sub-menu lists and allows to configure DHCP-PD servers.
DHCPv6 Server Properties
address-pool (enum | static-only; Default: static-only)	IPv6 pool, from which to take IPv6 address for the clients, pool prefix-length must be specified as /128.
prefix-pool (enum | static-only; Default: static-only)	IPv6 pool, from which to take IPv6 prefxies for the clients.
allow-dual-stack-queue (yes | no; Default: yes)	Creates a single simple queue entry for both IPv4 and IPv6 addresses, and uses the MAC address and DUID for identification. Requires IPv6 DHCP Server to have this option enabled as well to work properly.
address-lists (string; Default:)	Comma seperated list of address-lists. Address or prefix issued by the server will be added to these lists.
binding-script (string; Default: )	A script that will be executed after binding is assigned or de-assigned. Internal "global" variables that can be used in the script:

    bindingBound - set to "1" if bound, otherwise set to "0"
    bindingServerName - dhcp server name
    bindingDUID - DUID
    bindingAddress - active address
    bindingPrefix - active prefix

dhcp-option (string; Default: none)	Add additional DHCP options from option list.
insert-queue-before (bottom | first | name; Default: first)	Specify where to place dynamic simple queue entries for static DHCP leases with a rate-limit parameter set.
parent-queue (string | none; Default: none)	A dynamically created queue for this lease will be configured as a child queue of the specified parent queue.
preference (integer [0..255]; Default: 255)	Defines server priority level in client selection when multiple servers respond.
disabled (yes | no; Default: no)	Whether DHCP-PD server participates in the prefix assignment process.
interface (string; Default: )	The interface on which server will be running.
lease-time (time; Default: 3d)	The time that a client may use the assigned address. The client will try to renew this address after half of this time and will request a new address after the time limit expires.

rapid-commit (yes | no; Default: yes)
	Enables a two-message exchange (Solicit and Reply) for quicker client configuration by skipping the standard four-message process.

route-distance (integer [0..255]; Default:1)
	Specify distance to set for dynamically installed routes towards DHCPv6 clients.
use-radius (yes | no | accounting; Default: no)	Whether to use RADIUS server:

    no - do not use RADIUS;
    yes - use RADIUS for accounting and lease;
    accounting - use RADIUS for accounting only.

use-reconfigure (yes | no; Default: no)
	Allow the server to send Reconfigure messages to clients, prompting them to renew or update their configuration without waiting for their lease to expire.
name (string; Default: )	Reference name
address-list (string; Default: none)	Address list to which address will be added if the lease is bound.
ignore-ia-na-bindings (yes | no; Default: no)	Do not reply to DHCPv6 address requests and process only prefixes. Without this setting even if server does not have address-pool configured, it has to respond to client that there is no address available for the client. That can lead up to the situation when DHCPv6 client requests address and prefix in a loop.

Read-only Properties
dynamic (yes | no)	
invalid (yes | no)	
Bindings

Sub-menu: /ipv6 dhcp-server binding

DUID is used only for dynamic bindings, so if it changes then the client will receive a different prefix than previously.
address (IPv6 prefix; Default: )	IPv6 prefix that will be assigned to the client
allow-dual-stack-queue (yes | no; Default: yes)	Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification. Requires IPv4 DHCP Server to have this option enabled as well to work properly.
comment (string; Default: )	Short description of an item.
disabled (yes | no; Default: no)	Whether an item is disabled
dhcp-option (string; Default: )	Add additional DHCP options from the option list.
dhcp-option-set (string; Default: )	Add an additional set of DHCP options.
life-time (time; Default: 3d)	The time period after which binding expires.
duid (hex string; Default: )	DUID value. Should be specified only in hexadecimal format.
iaid (integer [0..4294967295]; Default: )	Identity Association Identifier, part of the Client ID.
prefix-pool (string; Default: )	Prefix pool that is being advertised to the DHCPv6 Client.
rate-limit (integer[/integer] [integer[/integer] [integer[/integer] [integer[/integer]]]]; Default: )	Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static. Format is: rx-rate[/tx-rate] [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold] [rx-burst-time[/tx-burst-time]]]]. All rates should be numbers with optional 'k' (1,000s) or 'M' (1,000,000s). If tx-rate is not specified, rx-rate is as tx-rate too. Same goes for tx-burst-rate and tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and tx-burst-threshold are not specified (but burst-rate is specified), rx-rate and tx-rate is used as burst thresholds. If both rx-burst-time and tx-burst-time are not specified, 1s is used as default.
server (string | all; Default: all)	Name of the server. If set to all, then binding applies to all created DHCP-PD servers.

Read-only properties
dynamic (yes | no)	Whether an item is dynamically created.
expires-after (time)	The time period after which binding expires.
last-seen (time)	Time period since the client was last seen.
status (waiting | offered | bound)	Three status values are possible:

    waiting - Shown for static bindings if it is not used. For dynamic bindings this status is shown if it was used previously, the server will wait 10 minutes to allow an old client to get this binding, otherwise binding will be cleared and prefix will be offered to other clients.
    offered - if solicit message was received, and the server responded with advertise a message, but the request was not received. During this state client have 2 minutes to get this binding, otherwise, it is freed or changed status to waiting for static bindings.
    bound - currently bound.

reconfigure-key (string)	Reconfiguration authentication key
reconfigure-last-sent (integer)	Count of sent Reconfigure (forcerenew) messages
reconfigure-status 	

For example, dynamically assigned /62 prefix
[admin@RB493G] /ipv6 dhcp-server binding> print detail
 Flags: X - disabled, D - dynamic 
0 D address=2a02:610:7501:ff00::/62 duid="1605fcb400241d1781f7" iaid=0
 server=local-dhcp life-time=3d status=bound expires-after=2d23h40m10s 
last-seen=19m50s 
1 D address=2a02:610:7501:ff04::/62 duid="0019d1393535" iaid=2 
server=local-dhcp life-time=3d status=bound expires-after=2d23h43m47s 
last-seen=16m13s

Menu specific commands
make-static ()	Set dynamic binding as static.
send-reconfigure (id)	Send Reconfigure (forcerenew) message
Rate limiting

It is possible to set the bandwidth to a specific IPv6 address by using DHCPv6 bindings. This can be done by setting a rate limit on the DHCPv6 binding itself, by doing this a dynamic simple queue rule will be added for the IPv6 address that corresponds to the DHCPv6 binding. By using the rate-limit the parameter you can conveniently limit a user's bandwidth.

For any queues to work properly, the traffic must not be FastTracked, make sure your Firewall does not FastTrack traffic that you want to limit.

First, make the DHCPv6 binding static, otherwise, it will not be possible to set a rate limit to a DHCPv6 binding:
[admin@MikroTik] > /ipv6 dhcp-server binding print 
Flags: X - disabled, D - dynamic 
# ADDRESS DUID SERVER STATUS 
0 D fdb4:4de7:a3f8:418c::/66 0x6c3b6b7c413e DHCPv6_Server bound

[admin@MikroTik] > /ipv6 dhcp-server binding make-static 0

[admin@MikroTik] > /ipv6 dhcp-server binding print
Flags: X - disabled, D - dynamic 
# ADDRESS DUID SERVER STATUS 
0 fdb4:4de7:a3f8:418c::/66 0x6c3b6b7c413e DHCPv6_Server bound 

Then you need can set a rate to a DHCPv6 binding that will create a new dynamic simple queue entry:
[admin@MikroTik] > /ipv6 dhcp-server binding set 0 rate-limit=10M/10 
[admin@MikroTik] > /queue simple print 
Flags: X - disabled, I - invalid, D - dynamic 
0 D name="dhcp<6c3b6b7c413e fdb4:4de7:a3f8:418c::/66>" target=fdb4:4de7:a3f8:418c::/66 parent=none packet-marks="" priority=8/8 queue=default
-small/default-small limit-at=10M/10M max-limit=10M/10M burst-limit=0/0 
burst-threshold=0/0 burst-time=0s/0s bucket-size=0.1/0.1

By default allow-dual-stack-queue is enabled, this will add a single dynamic simple queue entry for both DHCPv6 binding and DHCPv4 lease, without this option enabled separate dynamic simple queue entries will be added for IPv6 and IPv4.

If allow-dual-stack-queue is enabled, then a single dynamic simple queue entry will be created containing both IPv4 and IPv6 addresses:
[admin@MikroTik] > /queue simple print 
Flags: X - disabled, I - invalid, D - dynamic
 0 D name="dhcp-ds<6C:3B:6B:7C:41:3E>" target=192.168.1.200/32,fdb4:4de7:a3f8:418c::/66 parent=none packet-marks="" priority=8/8 queue=default
-small/default-small limit-at=10M/10M max-limit=10M/10M 
burst-limit=0/0 burst-threshold=0/0 burst-time=0s/0s bucket-size=0.1/0.1
RADIUS Support

Since RouterOS v6.43 it is possible to use RADIUS to assign a rate-limit per DHCPv6 binding, to do so you need to pass the Mikrotik-Rate-Limit attribute from your RADIUS Server for your DHCPv6 binding. To achieve this you first need to set your DHCPv6 Server to use RADIUS for assigning bindings. Below is an example of how to set it up:
/radius 
add address=10.0.0.1 secret=VERYsecret123 service=dhcp 
/ipv6 dhcp-server 
set dhcp1 use-radius=yes

After that, you need to tell your RADIUS Server to pass the Mikrotik-Rate-Limit attribute. In case you are using FreeRADIUS with MySQL, then you need to add appropriate entries into radcheck and radreply tables for a MAC address, that is being used for your DHCPv6 Client. Below is an example for table entries:
INSERT INTO `radcheck` (`username`, `attribute`, `op`, `value`) VALUES 
('000c4200d464', 'Auth-Type', ':=', 'Accept'),
 INSERT INTO `radreply` (`username`, `attribute`, `op`, `value`) VALUES 
('000c4200d464', 'Delegated-IPv6-Prefix', '=', 'fdb4:4de7:a3f8:418c::/66'), 
('000c4200d464', 'Mikrotik-Rate-Limit', '=', '10M');

By default allow-dual-stack-queue is enabled and will add a single dynamic queue entry if the MAC address from the IPv4 lease (or DUID, if the DHCPv4 Client supports Node-specific Client Identifiers from RFC4361), but DUID from DHCPv6 Client is not always based on the MAC address from the interface on which the DHCPv6 client is running on, DUID is generated on a per-device basis. For this reason, a single dynamic queue entry might not be created, separate dynamic queue entries might be created instead.
Configuration Example
Enabling IPv6 Prefix delegation

Let's consider that we already have a running DHCP server.

To enable IPv6 prefix delegation, first, we need to create an address pool:
/ipv6 pool add name=myPool prefix=2001:db8:7501::/60 prefix-length=62

Notice that prefix-length is 62 bits, which means that clients will receive /62 prefixes from the /60 pool.

The next step is to enable DHCP-PD:
/ipv6 dhcp-server add name=myServer prefix-pool=myPool interface=local

To test our server we will set up wide-dhcpv6 on an ubuntu machine:

    install wide-dhcpv6-client
    edit "/etc/wide-dhcpv6/dhcp6c.conf" as above

You can use also RouterOS as a DHCP-PD client.
interface eth2{
send ia-pd 0;
};

id-assoc pd {
prefix-interface eth3{
sla-id 1;
sla-len 2;
};
};

    Run DHCP-PD client:

sudo dhcp6c -d -D -f eth2

    Verify that prefix was added to the:

mrz@bumba:/media/aaa$ ip -6 addr
 .. 
2: eth3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qlen 1000
 inet6 2001:db8:7501:1:200:ff:fe00:0/64 scope global
 valid_lft forever preferred_lft forever
 inet6 fe80::224:1dff:fe17:81f7/64 scope link
 valid_lft forever preferred_lft forever

    You can make binding to specific client static so that it always receives the same prefix:

[admin@RB493G] /ipv6 dhcp-server binding> print 
Flags: X - disabled, D - dynamic 
# ADDRESS DU IAID SER.. STATUS 0 D 2001:db8:7501:1::/62 16 0 loc.. bound 
[admin@RB493G] /ipv6 dhcp-server binding> make-static 0

    DHCP-PD also installs a route to assigned prefix into IPv6 routing table:

[admin@RB493G] /ipv6 route> print
 Flags: X - disabled, A - active, D - dynamic, C - connect, S - static, r - rip, o - ospf, b - bgp, U - unreachable
 # DST-ADDRESS GATEWAY DISTANCE 
... 
2 ADS 2001:db8:7501:1::/62 fe80::224:1dff:fe17:8... 1
Enabling IPv6 Address delegation

Address delegation on DHCPv6 server side works almost in the exact same way as when you configure prefix server. Only difference is that you must specify in configuration address-pool instead of prefix-pool and the pool used for this server must be defined to use /128 prefix-length. Of course, you can create server which only assigns static addresses and skip using the pool.
[admin@MikroTik] > ipv6/pool/print detail 
Flags: D - dynamic 
 0   name="myAddressPool" prefix=2001:db8:7501::/120 prefix-length=128 
[admin@MikroTik] > /ipv6/dhcp-server/print detail                                 
Flags: D - dynamic; X - disabled, I - invalid 
 0    name="myDHCP" interface=ether2 prefix-pool=static-only 
      address-pool=myAddressPool lease-time=3d rapid-commit=yes use-radius=no 
      preference=255 dhcp-option="" route-distance=1 use-reconfigure=no 
      address-lists="" duid="0x00030001b813f4840556" 

This configuration is already enough to work with DHCPv6 clients such as, for example, RouterOS client.
[admin@MikroTik] > ipv6/dhcp-client/print detail 
Flags: D - dynamic; X - disabled, I - invalid 
 0    interface=ether2 status=bound duid="0x00030001b123f48407f0" 
      dhcp-server-v6=fe80::ba69:f4af:fe14:558 request=address 
      add-default-route=no use-peer-dns=yes allow-reconfigure=no 
      dhcp-options="" pool-name="" pool-prefix-length=64 prefix-hint=::/0 
      prefix-address-lists="" dhcp-options="" 
      address=2001:db8:7501::, 2d23h59m51s

However, usually end-devices as computers do not know if their network is managed by DHCP server or not. That is why DHCPv6 server configuration is combined with SLAAC functionality. You can even avoid using SLAAC in order to advertise prefix for local network device, all you need to do is advertise "managed-address-configuration" option to your network devices.
[admin@MikroTik] > ipv6/nd/print detail 
Flags: X - disabled, I - invalid; * - default 
 0    interface=ether2 ra-interval=3m20s-10m ra-delay=3s mtu=unspecified 
      reachable-time=unspecified retransmit-interval=unspecified 
      ra-lifetime=30m ra-preference=medium hop-limit=unspecified 
      advertise-mac-address=yes advertise-dns=yes 
      managed-address-configuration=yes other-configuration=no
[admin@MikroTik] > ipv6/nd/prefix/print detail 
Flags: X - disabled, I - invalid; D - dynamic 
 0    prefix=::/64 6to4-interface=none interface=ether2 on-link=yes 
      autonomous=yes valid-lifetime=4w2d preferred-lifetime=1w 

Now, for example, your computer which will be connected to router ether2 interface will receive advertisement message from RouterOS ND configuration stating that this network is using "managed-address-configuration" which normally on end user devices will enable DHCPv6 client requesting IPv6 address.

Full configuration backup from the server with several comments is provided here.
#Address pool to be used for 'bridge', must have prefix-length 128
/ipv6 pool
add name=myLocalLan prefix=2001:db8::/100 prefix-length=128
#DHCPv6 server with spcified 'address' pool
/ipv6 dhcp-server
add address-pool=myLocalLan interface=bridge name=myLocalServer prefix-pool=""
#We must 'advertise' that this is managed network so LAN devices use DHCPv6 clients
#RFC 4861, RFC 4862, RFC 8415 'M - Managed address configuration'
/ipv6 nd
add interface=bridge managed-address-configuration=yes
#We must enable advertising on our 'bridge' interface
#We can even add interface without specified prefix, because we here need only
#to advertise 'option' that tells this is managed network
/ipv6 nd prefix
add interface=bridge
DHCP Relay
Summary

Sub-menu: /ip dhcp-relay

The purpose of the DHCP relay is to act as a proxy between DHCP clients and the DHCP server. It is useful in networks where the DHCP server is not on the same broadcast domain as the DHCP client.

DHCP relay does not choose the particular DHCP server in the DHCP-server list, it just sends the incoming request to all the listed servers.
Properties
add-relay-info (yes | no; Default: no)	Adds DHCP relay agent information if enabled according to RFC 3046. Agent Circuit ID Sub-option contains mac address of an interface, Agent Remote ID Sub-option contains MAC address of the client from which request was received.
delay-threshold (time | none; Default: none)	If secs field in DHCP packet is smaller than delay-threshold, then this packet is ignored
dhcp-server (string; Default: )	List of DHCP servers' IP addresses which should the DHCP requests be forwarded to
interface (string; Default: )	Interface name the DHCP relay will be working on.
local-address (IP; Default: 0.0.0.0)	The unique IP address of this DHCP relay needed for DHCP server to distinguish relays. If set to 0.0.0.0 - the IP address will be chosen automatically from addresses that are assigned to an interface a relay is running
relay-info-remote-id (string; Default: )	specified string will be used to construct Option 82 instead of client's MAC address. Option 82 consist of: interface from which packets was received + client mac address or relay-info-remote-id
name (string; Default: )	Descriptive name for the relay

local-address-as-src-ip(yes | no; Default: no)
	Use local address as source address for Discover/Request packets sent to the DHCP server
Configuration Example

Let us consider that you have several IP networks 'behind' other routers, but you want to keep all DHCP servers on a single router. To do this, you need a DHCP relay on your network which will relay DHCP requests from clients to the DHCP server.

This example will show you how to configure a DHCP server and a DHCP relay that serves 2 IP networks - 192.168.1.0/24 and 192.168.2.0/24 that are behind a router DHCP-Relay.

IP Address Configuration

IP addresses of DHCP-Server:
[admin@DHCP-Server] ip address> print
Flags: X - disabled, I - invalid, D - dynamic
 #   ADDRESS            NETWORK         BROADCAST       INTERFACE
 0   192.168.0.1/24     192.168.0.0     192.168.0.255   To-DHCP-Relay
 1   10.1.0.2/24	10.1.0.0	10.1.0.255	Public
[admin@DHCP-Server] ip address>

IP addresses of DHCP-Relay:
[admin@DHCP-Relay] ip address> print
Flags: X - disabled, I - invalid, D - dynamic
 #   ADDRESS            NETWORK         BROADCAST       INTERFACE
 0   192.168.0.2/24     192.168.0.0     192.168.0.255   To-DHCP-Server
 1   192.168.1.1/24     192.168.1.0     192.168.1.255   Local1
 2   192.168.2.1/24     192.168.2.0     192.168.2.255   Local2
[admin@DHCP-Relay] ip address>


DHCP Server Setup

To setup 2 DHCP Servers on the DHCP-Server router add 2 pools. For networks 192.168.1.0/24 and 192.168.2.0:
/ip pool add name=Local1-Pool ranges=192.168.1.11-192.168.1.100
/ip pool add name=Local2-Pool ranges=192.168.2.11-192.168.2.100
[admin@DHCP-Server] ip pool> print
 # NAME                                         RANGES
 0 Local1-Pool                                  192.168.1.11-192.168.1.100
 1 Local2-Pool                                  192.168.2.11-192.168.2.100
[admin@DHCP-Server] ip pool>


Create DHCP Servers:
/ip dhcp-server add interface=To-DHCP-Relay relay=192.168.1.1 \
   address-pool=Local1-Pool name=DHCP-1 disabled=no
/ip dhcp-server add interface=To-DHCP-Relay relay=192.168.2.1 \
   address-pool=Local2-Pool name=DHCP-2 disabled=no
[admin@DHCP-Server] ip dhcp-server> print
Flags: X - disabled, I - invalid
 #   NAME         INTERFACE     RELAY           ADDRESS-POOL LEASE-TIME ADD-ARP
 0   DHCP-1       To-DHCP-Relay 192.168.1.1     Local1-Pool  3d00:00:00
 1   DHCP-2       To-DHCP-Relay 192.168.2.1     Local2-Pool  3d00:00:00
[admin@DHCP-Server] ip dhcp-server>


Configure respective networks:
/ip dhcp-server network add address=192.168.1.0/24 gateway=192.168.1.1 \
   dns-server=159.148.60.20
/ip dhcp-server network add address=192.168.2.0/24 gateway=192.168.2.1 \
   dns-server 159.148.60.20
[admin@DHCP-Server] ip dhcp-server network> print
 # ADDRESS            GATEWAY         DNS-SERVER      WINS-SERVER     DOMAIN
 0 192.168.1.0/24     192.168.1.1     159.148.60.20
 1 192.168.2.0/24     192.168.2.1     159.148.60.20
[admin@DHCP-Server] ip dhcp-server network>


DHCP Relay Config

Configuration of DHCP-Server is done. Now let's configure DHCP-Relay:
/ip dhcp-relay add name=Local1-Relay interface=Local1 \
   dhcp-server=192.168.0.1 local-address=192.168.1.1 disabled=no
/ip dhcp-relay add name=Local2-Relay interface=Local2 \
   dhcp-server=192.168.0.1 local-address=192.168.2.1 disabled=no
[admin@DHCP-Relay] ip dhcp-relay> print
Flags: X - disabled, I - invalid
 #   NAME                        INTERFACE      DHCP-SERVER     LOCAL-ADDRESS
 0   Local1-Relay                Local1         192.168.0.1     192.168.1.1
 1   Local2-Relay                Local2         192.168.0.1     192.168.2.1
[admin@DHCP-Relay] ip dhcp-relay>
DHCP Relay with VRF (introduced in 7.15)

Let's take the previous setup but we'll consider that the interface to the DHCP server and interfaces to DHCP clients are added in VRF:
/ip vrf
add interfaces=To-DHCP-Server name=vrf_server
add interfaces=Local2 name=vrf2
add interfaces=Local1 name=vrf1

In the DHCP-relay configuration dhcp-server-vrf should be added:
/ip dhcp-relay/set dhcp-server-vrf=vrf_server numbers=0,1

Due to VRF configuration there are several routing-tables - we should add additional routes:
/ip route
add disabled=no distance=1 dst-address=192.168.0.0/24 gateway=To-DHCP-Server@vrf_server pref-src="" routing-table=vrf1 scope=10 suppress-hw-offload=no \
    target-scope=10
add disabled=no distance=1 dst-address=192.168.0.0/24 gateway=To-DHCP-Server@vrf_server pref-src="" routing-table=vrf2 scope=10 suppress-hw-offload=no \
    target-scope=10
add disabled=no dst-address=192.168.1.0/24 gateway=Local1@vrf1 routing-table=vrf_server suppress-hw-offload=no
add disabled=no distance=1 dst-address=192.168.2.0/24 gateway=Local2@vrf2 pref-src="" routing-table=vrf_server scope=30 suppress-hw-offload=no \
    target-scope=10

To achieve successful DHCP-server - DHCP-relay communication we should add NAT rules:
/ip firewall nat
add action=dst-nat chain=dstnat dst-address=192.168.2.1 dst-port=67 in-interface=To-DHCP-Server protocol=udp src-address=192.168.0.1 to-addresses=\
    192.168.0.2
add action=dst-nat chain=dstnat dst-address=192.168.1.1 dst-port=67 in-interface=To-DHCP-Server protocol=udp src-address=192.168.0.1 to-addresses=\
    192.168.0.2
	
	

    Creado por Artūrs C., actualizado por última vez por Matīss O. el may 29, 2025 11 min de lectura

    Introduction
        DNS configuration
        DNS Cache
        DNS Static
    DNS over HTTPS (DoH)
        Known compatible/incompatible DoH services
    Adlist 
        Whitelist for Adlist
        Configuration examples:
            URL based adlist:
            Locally hosted adlist:
    Forwarders
        Forwarder configuration
        Configuration example
    mDNS

Introduction

Domain Name System (DNS) usually refers to the Phonebook of the Internet. In other words, DNS is a database that links strings (known as hostnames), such as www.mikrotik.com to a specific IP address, such as 159.148.147.196.

A MikroTik router with a DNS feature enabled can be set as a DNS cache for any DNS-compliant client. Moreover, the MikroTik router can be specified as a primary DNS server under its DHCP server settings. When the remote requests are enabled, the MikroTik router responds to TCP and UDP DNS requests on port 53.

When both static and dynamic servers are set, static server entries are preferred, however, it does not indicate that a static server will always be used (for example, previously query was received from a dynamic server, but static was added later, then a dynamic entry will be preferred).

When DNS server allow-remote-requests are used make sure that you limit access to your server over TCP and UDP protocol port 53 only for known hosts.

There are several options on how you can manage DNS functionality on your LAN - use public DNS, use the router as a cache, or do not interfere with DNS configuration. Let us take as an example the following setup: Internet service provider (ISP) → Gateway (GW) → Local area network (LAN). The GW is RouterOS based device with the default configuration:

    You do not configure any DNS servers on the "GW" DHCP server network configuration - the device will forward the DNS server IP address configuration received from `ISP` to `LAN` devices;
    You configure DNS servers on the "GW" DHCP server network configuration - the device will give configured DNS servers to `LAN` devices (also "/ip dns set allow-remote-requests=yes" must be enabled);
    "dns-none" configured under DNS servers on "GW" DHCP server network configuration - the device will not forward any of the dynamic DNS servers to `LAN` devices;

DNS configuration

DNS facility is used to provide domain name resolution for the router itself as well as for the clients connected to it.
allow-remote-requests (yes | no; Default: no)	Specifies whether to allow router usage as a DNS cache for remote clients. Otherwise, only the router itself will use DNS configuration.
address-list-extra-time (time; Default: 0s)	Extra time added to TTL when creating address list entry.
cache-max-ttl (time; Default: 1w)	Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-TTL time. Shorter TTLs received from DNS servers are respected.
cache-size (integer[64..4294967295]; Default: 2048)	Specifies the size of the DNS cache in KiB.
max-concurrent-queries (integer; Default: 100)	Specifies how many concurrent queries are allowed.
max-concurrent-tcp-sessions (integer; Default: 20)	Specifies how many concurrent TCP sessions are allowed.
max-udp-packet-size (integer [50..65507]; Default: 4096)	Maximum size of allowed UDP packet.
mdns-repeat-ifaces (list of interfaces; Default: )	Once an interface in this list receives an mDNS packet, it will forward it to all other interfaces in this list. Only supports IPv4.
query-server-timeout (time; Default: 2s)	Specifies how long to wait for a query response from a server.
query-total-timeout (time; Default: 10s)	Specifies how long to wait for query response in total. Note that this setting must be configured taking into account "query-server-timeout" and the number of used DNS servers.
servers (list of IPv4/IPv6 addresses; Default: )	List of DNS server IPv4/IPv6 addresses
cache-used (integer)	Shows the currently used cache size in KiB
dynamic-server (IPv4/IPv6 list)	List of dynamically added DNS servers from different services, for example, DHCP.

doh-max-concurrent-queries (integer; Default: 50)
	Specifies how many DoH concurrent queries are allowed.

doh-max-server-connections (integer; Default: 5)
	Specifies how many concurrent connections to the DoH server are allowed.

doh-timeout (time; Default: 5s)
	Specifies how long to wait for query response from the DoH server.

use-doh-server (string; Default: )
	Specified which DoH server must be used for DNS queries. DoH functionality overrides "servers" usage if specified. The server must be specified with an "https://" prefix. Supports only one DoH server.

verify-doh-cert  (yes | no; Default: no)
	

Specifies whether to validate the DoH server, when one is being used. Will use the "/certificate" list in order to verify server validity.


[admin@MikroTik] > ip dns print         
                      servers: 
              dynamic-servers: 10.155.0.1
               use-doh-server: 
              verify-doh-cert: no
   doh-max-server-connections: 5
   doh-max-concurrent-queries: 50
                  doh-timeout: 5s
        allow-remote-requests: yes
          max-udp-packet-size: 4096
         query-server-timeout: 2s
          query-total-timeout: 10s
       max-concurrent-queries: 100
  max-concurrent-tcp-sessions: 20
                   cache-size: 2048KiB
                cache-max-ttl: 1d
                   cache-used: 48KiB

Dynamic DNS servers are obtained from different facilities available in RouterOS, for example, DHCP client, VPN client, IPv6 Router Advertisements, etc. 

Servers are processed in a queue order - static servers as an ordered list, dynamic servers as an ordered list. When DNS cache has to send a request to the server, it tries servers one by one until one of them responds. After that this server is used for all types of DNS requests. Same server is used for any types of DNS requests, for example, A and AAAA types. If you use only dynamic servers, then the DNS returned results can change after reboot, because servers can be loaded into IP/DNS settings in a different order due to a different speeds on how they are received from facilities mentioned above.

If at some point the server which was being used becomes unavailable and can not provide DNS answers, then the DNS cache restarts the DNS server lookup process and goes through the list of specified servers once more.
DNS Cache

This menu provides two lists with DNS records stored on the server:

    "/ip dns cache": this menu provides a list with cache DNS entries that RouterOS cache can reply with to client requests ;
    "/ip dns cache all": This menu provides a complete list with all cached DNS records stored including also, for example, PTR records.

You can empty the DNS cache with the command: "/ip dns cache flush".
DNS Static

The MikroTik RouterOS DNS cache has an additional embedded DNS server feature that allows you to configure multiple types of DNS entries that can be used by the DNS clients using the router as their DNS server. This feature can also be used to provide false DNS information to your network clients. For example, resolving any DNS request for a certain set of domains (or for the whole Internet) to your own page.
[admin@MikroTik] /ip dns static add name=www.mikrotik.com address=10.0.0.1

The server is also capable of resolving DNS requests based on basic regular expressions so that multiple requests can be matched with the same entry. In case an entry does not conform with DNS naming standards, it is considered a regular expression. The list is ordered and checked from top to bottom. Regular expressions are checked first, then the plain records.

Use regex to match DNS requests:
[admin@MikroTik] /ip dns static add regexp="[*mikrotik*]" address=10.0.0.2

If DNS static entries list matches the requested domain name, then the router will assume that this router is responsible for any type of DNS request for the particular name. For example, if there is only an "A" record in the list, but the router receives an "AAAA" request, then it will reply with an "A" record from the static list and will query the upstream server for the "AAAA" record. If a record exists, then the reply will be forwarded, if not, then the router will reply with an "ok" DNS reply without any records in it. If you want to override domain name records from the upstream server with unusable records, then you can, for example, add a static entry for the particular domain name and specify a dummy IPv6 address for it "::ffff".

List all of the configured DNS entries as an ordered list:
[admin@MikroTik] /ip/dns/static/print 
Columns: NAME, REGEXP, ADDRESS, TTL
# NAME             REGEXP       ADDRESS   TTL
0 www.mikrotik.com               10.0.0.1  1d 
1                  [*mikrotik*]  10.0.0.2  1d
address (IPv4/IPv6)	The address that will be used for "A" or "AAAA" type records.
cname (string)	Alias name for a domain name.
forward-to	The IP address of a domain name server to which a particular DNS request must be forwarded.
mx-exchange (string)	The domain name of the MX server.
name (string)	Domain name.
srv-port (integer; Default: 0)	The TCP or UDP port on which the service is to be found.
srv-target	The canonical hostname of the machine providing the service ends in a dot.
text (string)	Textual information about the domain name.
type (A | AAAA | CNAME | FWD | MX | NS | NXDOMAIN | SRV | TXT ; Default: A)	Type of the DNS record.
address-list (string)	Name of the Firewall address list to which address must be dynamically added when some request matches the entry. Entry will be removed from the address list when TTL expires.
comment (string)	Comment about the domain name record.

disabled (yes | no; Default: yes)
	Whether the DNS record is active.

match-subdomain (yes | no; Default: no)
	Whether the record will match requests for subdomains.

mx-preference (integer; Default: 0)
	Preference of the particular MX record.

ns (string)
	Name of the authoritative domain name server for the particular record.

regexp (regex)
	Regular expression against which domain names should be verified.

srv-priority (integer; Default: 0)
	

Priority of the particular SRV record.

srv-weight (integer; Default: 0)
	

Weight of the particular SRV record.

ttl (time; Default: 24h)
	

Maximum time-to-live for cached records.

For each static A and AAAA record, in cache automatically is added a PTR record.

Regexp is case-sensitive, but DNS requests are not case sensitive, RouterOS converts DNS names to lowercase before matching any static entries. You should write regex only with lowercase letters. Regular expression matching is significantly slower than plain text entries, so it is advised to minimize the number of regular expression rules and optimize the expressions themselves.

Be careful when you configure regex through mixed user interfaces - CLI and GUI. Adding the entry itself might require escape characters when added from CLI. It is recommended to add an entry and the execute print command in order to verify that regex was not changed during addition.
DNS over HTTPS (DoH)

RouterOS support DNS over HTTPS (DoH). DoH uses HTTPS protocol to send and receive DNS requests for better data integrity. The main goal is to provide privacy by eliminating "man-in-the-middle" attacks (MITM). 

Video: DoH setup

It is strongly recommended to import the root CA certificate of the DoH server you have chosen to use for increased security. We strongly suggest not using third-party download links for certificate fetching. Use the Certificate Authority's own website.

There are various ways to find out what root CA certificate is necessary. The easiest way is by using your WEB browser, navigating to the DoH site, and checking the security of the website. You can download the certificate straight from the browser or fetch the certificate from a trusted source. 


Download the certificate, upload it to your router and import it: 
/certificate import file-name=CertificateFileName

Configure the DoH server: 
/ip dns set use-doh-server=DoH_Server_Query_URL verify-doh-cert=yes

Only one DoH server is supported.

Note that you need at least one regular DNS server configured for the router to resolve the DoH hostname itself. If you do not have any dynamical or static DNS server configured, add a static DNS entry for the DoH server domain name like this: 
/ip dns set servers=1.1.1.1

If you do not have any dynamical or static DNS server configured, add a static DNS entry for the DoH server domain name like this: 
/ip dns static add address=IP_Address name=Domain_Name

If DoH server is being used (DoH DNS name can be resolved) then it will be the only DNS service working at the time and standard DNS servers from IP/DNS servers list will not be used.

If /certificate/settings/set crl-use is set to yes, RouterOS will check CRL for each certificate in a certificate chain, therefore, an entire certificate chain should be installed into a device - starting from Root CA, intermediate CA (if there are such), and certificate that is used for specific service.

For example, Google DoH, Cloudflare, and OpenDNS full chain contain three certificates,  NextDNS has four certificates.
Known compatible/incompatible DoH services

Compatible DoH services:

    Cloudflare

    Google

    NextDNS

    OpenDNS

Incompatible DoH services:

    Mullvad
    Yandex
    UncensoredDNS
    Quad9 (due to their migration to HTTP2 which is not currently supported in RouterOS)

Adlist 

Adlist is an integral component of network-level ad blocking, comprising a curated collection of domain names known for serving advertisements. This feature operates by utilizing Domain Name System (DNS) resolution to intercept A and AAAA requests to these domains. When a client device queries a DNS server for a domain listed on the adlist, the DNS resolution process is altered. Instead of returning the actual IP address of the ad-serving domain, the DNS server responds with the IP address 0.0.0.0. This effectively null-routes the request, as 0.0.0.0 is a non-routable meta-address used to denote an invalid, unknown, or non-applicable target. By redirecting ad-related requests in this manner, the adlist feature ensures that advertisement content is not loaded, enhancing network performance and improving the user experience by reducing unwanted ad traffic.

Video: Adlist setup

Before configuring, increase the DNS cache as it's used to store adlist entries. If limit is reached and error in DNS,error topic is printed "adlist read: max cache size reached"

Adlist is stored on device's internal memory. Ensure that there is enough free space to save the desired adlist.


url	Used to specify the URL of an adlist.
ssl-verify	Specifies whether to validate the SSL certificate of the Adlist URL server.   Will use the "/certificate" list to verify server validity.
match-count	

Count of matched DNS name requests.
name-count	Count of DNS names imported from the Adlist.
file	Used to specify a local file path from which to read adlist data.
pause	

Temporarily pause the use of all adlist.
reload	

Checks for updates for all lists, if updates are found, the list is updated, removing or adding entries as needed, the lists are not redownloaded in whole when issuing a reload, instead only necessary updates are done.

It's not mandatory to use reload to update the lists, Adlist checks for new updates once every four hours.


Whitelist for Adlist

To exempt certain domains from Adlist, you need to create a static DNS FWD entry, for example, /ip/dns/static/add name=bar.test type=FWD, if such entry is present, the query will be forwarded to the next DNS, either dynamic or one configured under "/ip/dns/set servers=" , FWD entries are supported by DoH as well.
Configuration examples:
URL based adlist:
/ip/dns/adlist add url=https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts ssl-verify=no

To see how many domain names are present and matched, you can run:
/ip/dns/adlist/print 
Flags: X - disabled 
0 url="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts" ssl-verify=no match-count=122 name-count=164769
Locally hosted adlist:

To create your adlist, you can create a Txt file with the domains. Example:

0.0.0.0 example1.com
0.0.0.0 eu1.example.com
0.0.0.0 ex.com
0.0.0.0 com.example.com

You can create the txt file on your PC, but it is also possible to create it in RouterOS, with following commands

"/file/add name=host.txt", and then you can run "file/edit host.txt contents" after adding entries, press "ctrl o" to save the entries.

To add file to adlist :
/ip/dns/adlist/add file=host.txt

You can verify that file is formatted correctly with "/ip/dns/adlist/print" ,the results will show how many hostnames you have added, the hostname format must match the format given in previous example.
/ip/dns/adlist/print 
Flags: X - disabled 
 0   file=host.txt match-count=0 name-count=4 


Forwarders

DNS Forwarders allows a user to configure a named DNS forwarder that can be used for static FWD entries as forward-to value.

For each Forwarder is possible to configure multiple regular upstream and DoH servers. Configured forwarder servers will be used by round-robin algorithm - for each query, next server will be used to resolve DNS name.
Forwarder configuration

In /ip/dns/forwaders section, forwarders can added, modified or removed. 
name (string; Default: )	Forwarder name.
dns-servers (string; Default: )	An IP address or DNS name of a domain name server. Can contain multiple records, for example, dns-servers=1.1.1.1,8.8.8.8,local.dns
doh-servers (string; Default: )	A URL of DoH server. Can contain multiple records.
verify-doh-cert (yes | no; Default: yes)	Specifies whether to validate the DoH server, when one is being used. Will use the "/certificate" list in order to verify server validity.
Configuration example

Configure/add a forwarder: 


/ip dns forwarders
add dns-servers=1.1.1.1,local.dns doh-servers=https://dns.google/dns-query name=forwarder1


Configure/add a statis DNS FWD entry:
/ip dns static
add forward-to=forwarder1 name=mikrotik.com type=FWD

Now each time when a router will receive request to resolve mikrotik.com, request using round-robin algorithm will be forwarded to 1.1.1.1, local.dns or Google DoH server.


mDNS

RouterOS supports Multicast DNS (mDNS) for local network service discovery. By default, mDNS operates within a single subnet. The mDNS repeater feature allows to extend mDNS functionality across different interfaces or VLANs using the "mdns-repeat-ifaces" property.

Impact of using mDNS Repeater:

    Cross-Subnet Service Discovery: Devices on different subnets or VLANs can discover each other, enhancing the ability to find services (e.g., printers, file sharing);
    Increased Network Traffic: mDNS repeater may increase multicast traffic, which could lead to congestion, especially in larger networks with many devices.

The mDNS repeater is commonly used with devices such as:

    Apple Ecosystem (AirPrint, AirPlay);
    Smart Home Devices (Thread, IoT);
    Chromecast and Media Streaming;
    Avahi (Linux/Unix).

To enable the mDNS repeater between interfaces, allowing devices connected to these interfaces to discover each other using mDNS, use the following command:
/ip dns set mdns-repeat-ifaces=<interface1>,<interface2>

mDNS repeater requires multicast-capable interfaces (e.g., Ethernet, VLAN, bridge). Tunnel interfaces such as WireGuard are not supported.




    Creado por Artūrs C., actualizado por última vez el jun 30, 2021 3 min de lectura

    Introduction
        Property Description
    Access List
    Active Connections
        Example
    Application Examples

Introduction

SOCKS (Socket Secure) is a proxy server that allows TCP-based application data to relay across the firewall, even if the firewall would block the packets. The SOCKS protocol is independent of application protocols, so it can be used for many services, e.g, WWW, FTP, TELNET, and others.

At first, an application client connects to the SOCKS proxy server, then the proxy server looks in its access list to see whether the client is permitted to access the remote application resource or not, if it is permitted, the proxy server relies on the packet to the application server and creates a connection between the application server and client.

Remember to configure your application client to use SOCKS!.

You should secure the SOCKS proxy using its access list and/or firewall to disallow access from outside. Failing to secure the proxy server may introduce security issues to your network, and may provide a way for spammers to send junk mail through the router.
Property Description

connection-idle-timeout (time; default: 2m)
	time after which idle connections are terminated
enabled (yes | no; default: no)	whether to enable or no the SOCKS proxy
max-connections (integer: 1..500; default: 200) 	maxumum number of simultaneous connections
port (integer: 1..65535; default: 1080)	TCP port on which the SOCKS server listens for connections
Access List
/ip socks access

In the SOCKS access list, you can add rules which will control access to the SOCKS server. This list is similar to firewall lists.
action (allow | deny; default: allow)	

allow - allow packets, matching this rule, to be forwarded for further processing

deny - deny access for packets, matching this rule
dst-address (IP address/netmask)	destination (server's) address
dst-port (port)	destination TCP port
src-address (IP address/netmask)	source (client's) address for a packet
src-port (port) 	source TCP port
Active Connections

The Active Connection list shows all established TCP connections, which are maintained through the SOCKS proxy server.
/ip socks connections
dst-address (read-only: IP address) 	destination (application server) IP address
rx (read-only: integer)	bytes received
src-address (read-only: IP address)	source (application client) IP address
tx (read-only: integer)	bytes sent
type (read-only: in | out | unknown) - connection type	

in - incoming connection

out - outgoing connection

unknown - connection has just been initiated
Example

To see current TCP connections:
[admin@MikroTik] ip socks connections> print
 # SRC-ADDRESS                DST-ADDRESS                TX         RX
 0 192.168.0.2:3242           159.148.147.196:80         4847       2880
 1 192.168.0.2:3243           159.148.147.196:80         3408       2127
 2 192.168.0.2:3246           159.148.95.16:80           10172      25207
 3 192.168.0.2:3248           194.8.18.26:80             474        1629
 4 192.168.0.2:3249           159.148.95.16:80           6477       18695
 5 192.168.0.2:3250           159.148.95.16:80           4137       27568
 6 192.168.0.2:3251           159.148.95.16:80           1712       14296
 7 192.168.0.2:3258           80.91.34.241:80            314        208
 8 192.168.0.2:3259           80.91.34.241:80            934        524
 9 192.168.0.2:3260           80.91.34.241:80            930        524
10 192.168.0.2:3261           80.91.34.241:80            312        158
11 192.168.0.2:3262           80.91.34.241:80            312        158
[admin@MikroTik] ip socks connections>
Application Examples

FTP service through SOCKS server

Let us consider that we have a network 192.168.0.0/24 which is masqueraded, using a router with a public IP 10.1.0.104/24 and a private IP 192.168.0.1/24. Somewhere in the network is an FTP server with IP address 10.5.8.8. We want to allow access to this FTP server for a client in our local network with IP address 192.168.0.2/24.

We have already masqueraded our local network:
[admin@MikroTik] ip firewall nat> print
Flags: X - disabled, I - invalid, D - dynamic
 0   chain=srcnat action=masquerade src-address=192.168.0.0/24
[admin@MikroTik] ip firewall nat>

And access to public FTP servers is denied in the firewall:
[admin@MikroTik] ip firewall filter> print
Flags: X - disabled, I - invalid, D - dynamic
 0   chain=forward action=drop src-address=192.168.0.0/24 dst-port=21 protocol=tcp
[admin@MikroTik] ip firewall filter>

We have to enable the SOCKS server:
[admin@MikroTik] ip socks> set enabled=yes
[admin@MikroTik] ip socks> print
                    enabled: yes
                       port: 1080
    connection-idle-timeout: 2m
            max-connections: 200
[admin@MikroTik] ip socks>

Add access to a client with an IP address 192.168.0.2/32 to SOCKS access list, allow data transfer from FTP server to client (allow destination ports from 1024 to 65535 for any IP address), and drop everything else:
[admin@MikroTik] ip socks access> add src-address=192.168.0.2 dst-port=21 \
\... action=allow
[admin@MikroTik] ip socks access> add dst-port=1024-65535 action=allow
[admin@MikroTik] ip socks access> add action=deny
[admin@MikroTik] ip socks access> print
Flags: X - disabled
 0   src-address=192.168.0.2 dst-port=21 action=allow
 1   dst-port=1024-65535 action=allow
 2   action=deny
[admin@MikroTik] ip socks access>

That's all - the SOCKS server is configured. To see active connections and data transmitted and received:
[admin@MikroTik] ip socks connections> print
 # SRC-ADDRESS                DST-ADDRESS                TX         RX
 0 192.168.0.2:1238           10.5.8.8:21                1163       4625
 1 192.168.0.2:1258           10.5.8.8:3423              0          3231744
[admin@MikroTik] ip socks connections>

In order to use the SOCKS proxy server, you have to specify its IP address and port in your FTP client. In this case, IP address would be 192.168.0.1 (local IP address of the router/SOCKS server) and TCP port 1080.