

    Creado por Oskars K., actualizado por última vez por GG el mar 06, 2024 1 min de lectura

Summary

The application is available for both Android and iOS operating systems. It is a good way to configure a new device, as it provides a simple and user-friendly setup screen for the most basic settings of your new router. It also features an advanced menu, for the more experienced user.
Downloading app

MikroTik application is available to download on App Store and Google Play, please see our web page Software section for direct download links or scan the QR code.

Use the MikroTik smartphone app to configure your router in the field, or to apply the most basic initial settings for your MikroTik home access point.
Quick start with the application

    Scan QR code and choose your preferred OS;

    Install and connect to your wireless network;

    Open application, by default, the IP address and username will be already entered;

    Click Connect to establish a connection to;

    Choose Quick setup, and the application will guide you through all basic configuration settings in a couple of easy steps.







    Creado por Normunds R., actualizado por última vez por GG el mar 06, 2024 6 min de lectura

        Summary
        Modes
        HomeAP
            Wireless
            Internet
            Local Network
            VPN
            System
        FAQ

Summary

Quickset is a simple configuration wizard page that prepares your router in a few clicks. It is the first screen a user sees, when opening the default IP address 192.168.88.1 in a web browser.

Quickset is available for all devices that have some sort of default configuration from factory. Devices that do not have configuration must be configured by hand. The most popular and recommended mode is the HomeAP (or HomeAP dual, depending on the device). This Quickset mode provides the simplest of terminology and the most common options for the home user.
Modes

Depending on the router model, different Quickset modes might be available from the Quickset dropdown menu:

    CAP: Controlled Access Point, an AP device, that will be managed by a centralized CAPsMAN server. Only use if you have already set up a CAPsMAN server.
    CPE: Client device, which will connect to an Access Point (AP) device. Provides option to scan for AP devices in your area.
    HomeAP: The default Access Point config page for most home users. Provides fewer options and simplified terminology.
    HomeAP dual: Dual band devices (2GHz/5GHz). The default Access Point config page for most home users. Provides fewer options and simplified terminology.
    Home Mesh: Made for making bigger WiFi networks. Enables the CAPsMAN server in the router, and places the local WiFi interfaces under CAPsMAN control. Just boot other MikroTik WiFi APs with the reset button pressed, and they will join this HomeMesh network (see their Quick guide for details)
    PTP Bridge AP: When you need to transparently interconnect two remote locations together in the same network, set one device to this mode, and the other device to the next (PTP Bridge CPE) mode.
    PTP Bridge CPE: When you need to transparently interconnect two remote locations together in the same network, set one device to this mode, and the other device to the previous (PTP Bridge AP) mode.
    WISP AP: Similar to the HomeAP mode, but provides more advanced options and uses industry standard terminology, like SSID and WPA.

HomeAP

This is the mode you should use if you would like to quickly configure a home access point.
Wireless

Set up your wireless network in this section:

    Network Name: How will your smartphone see your network? Set any name you like here. In HomeAP dual, you can set the 2GHz (legacy) and 5GHz (modern) networks to same, or different names (see FAQ). Use any name you like, in any format.
    Frequency: Normally you can leave "Auto", in this way, the router will scan the environment, and select the least occupied frequency channel (it will do this once). Use a custom selection if you need to experiment.
    Band: Normally leave this to defaults (2GHz b/g/n and 5GHz A/N/AC).
    Use Access List (ACL): Enable this if you would like to restrict who can connect to your AP, based on the user's MAC (hardware) address. To use this option, first you need to allow these clients to connect, and then use the below button "Copy to ACL". This will copy the selected client to the access list. After you have built an Access list (ACL), you can enable this option to forbid anyone else to attempt connections to your device. Normally you can leave this alone, as the Wireless password already provides the needed restrictions.
    WiFi Password: The most important option here. Sets a secure password that also encrypts your wireless communications, which will be needed to connect to wireless network.
    WPS accept: Use this button to grant access to a specific device that supports the WPS connection mode. Useful for printers and other peripherals where typing a password is difficult. First start WPS mode in your client device, then once click the WPS button here to allow said device. Button works for a few seconds and operates on a per-client basis.
    Guest network: Useful for house guests who don't need to know your main WiFi password. Set a separate password for them in this option. Important! Guest users will not be able to access other devices in your LAN and other guest devices. This mode enabled Bridge filters to prevent this.
    Wireless clients: This table shows the currently connected client devices (their MAC address, if they are in your Access List, their last used IP address, how long are they connected, their signal level in dBm and in a bar graph).

Internet

    Port: Select which port is connected to the ISP (internet) modem. Usually Eth1.
    Address Acquisition: Select how the ISP is giving you the IP address. Ask your service provider about this and the other options (IP address, Netmask, Gateway).
    MAC address: Normally should not be changed, unless your ISP has locked you to a specific MAC address, and you have changed the router to a new one.
    Firewall router: This enables a secure firewall for your router and your network. Always make sure this box is selected, so that no access is possible to your devices from the internet port.
    MAC server / MAC Winbox: Allows connection with the [Winbox utility https://mt.lv/winbox] from the LAN port side in MAC address mode. Useful for debugging and recovery, when IP mode is not available. Advanced use only.
    Discovery: Allows the device to be identified by model name from other RouterOS devices.

Local Network

    IP address: Mostly can stay at the default 192.168.88.1 unless your router is behind another router. To avoid IP conflict, change to 192.168.89.1 or similar
    Netmask: In most situations can leave 255.255.255.0
    Bridge all LAN ports: Allows your devices to communicate to each other, even if, say, your TV is connected via Ethernet LAN cable, but your PC is connected via WiFi.
    DHCP server: Normally, you would want automatic IP address configuration in your home network, so leave the DHCP settings ON and on their defaults.
    NAT: Turn this off ONLY if your ISP has provided a public IP address for both the router and also the local network. If not, leave NAT on.
    UPnP: This option enables automatic port forwarding ("opening ports to the local network" as some call it) for supported programs and devices, like your NAS disks and peer-to-peer utilities. Use with care, as this option can sometimes expose internal devices to the internet without your knowledge. Enable only if specifically needed.

VPN

If you want to access your local network (and your router) from the internet, use a secure VPN tunnel. This option gives you a domain name where to connect to, and enables PPTP and L2TP/IPsec (the second one is recommended). The username is 'vpn' and you can specify your own password. All you need to do is enable it here, and then provide the address, username and password in your laptop or phone, and when connected to the VPN, you will have a securely encrypted connection to your home network. Also, useful when travelling - you will be able to browse the internet through a secure line, as if connecting from your home. This also helps to avoid geographical restrictions that are set up in some countries.
System

    Check for updates: Always make sure your device is up-to-date with this button. Checks if an updated RouterOS release is available, and installs it.
    Password: Sets the password for the device config page itself. Make sure nobody can access your router config page and change the settings.

FAQ

Q: How is Quickset different from the Webfig tab, where a bunch of new menus appear?

A: QuickSet is for new users who only need their device up and running in no time. It provides the most commonly used options in one place. If you need more options, do not use any Quickset settings at all, click on "Webfig" to open the advanced configuration interface. The full functionality is unlocked.

Q: Can I use Quickset and Webfig together? While settings that are not conflicting can be configured this way, it is not recommended to mix up these menus.

A: If you are going to use Quickset, use only Quickset and vice versa. What is difference between Router and Bridge mode? Bridge mode adds all interfaces to the bridge, allowing to forward Layer2 packets (acts as a hub/switch). In Router mode, packets are forwarded in Layer3 by using IP addresses and IP routes (acts as a router).

Q: In HomeAP mode, should the 2GHz and 5GHz network names be the same, or different?

A: If you prefer that all your client devices, like TV, phones, game consoles, would automatically select the best preferred network, set the names identically. If you would like to force a client device to use the faster 5GHz 802.11ac connection, set the names unique.

Q: Can I create an AP without security settings - no password or connect to such AP while using QuickSet?

A: QuickSet uses WPA2 pre-shared key by default. It means that the minimal password length is 8 symbols and the device can only connect to WPA2 secured AP or serve as AP itself. For configurations with no security settings, you need to configure them manually using WinBox, Webfig, or console.

QuickSet interface:




    Creado por Māris B., actualizado por última vez por Druvis Timma el sept 25, 2024 5 min de lectura

    Overview
    Authentication
        JSON format
    HTTP Methods
        GET
        PATCH
        PUT
        DELETE
        POST
            Proplist
            Query
            Timeout
    Errors

Overview

Watch our video about this feature.

The term "REST API" generally refers to an API accessed via HTTP protocol at a predefined set of resource-oriented URLs.
Starting from RouterOS v7.1beta4, it is implemented as a JSON wrapper interface of the console API. It allows to create, read, update and delete resources and call arbitrary console commands.

To start using REST API, the www-ssl or www (starting with RouterOS v7.9) service must be configured and running. When the www-ssl service (HTTPS access) is enabled, the REST service can be accessed by connecting to https://<routers_IP>/rest. When www service (HTTP access) is enabled the REST service can be accessed by connecting to http://<routers_IP>/rest.

We do not advise enabling HTTP access (www service). The main risk is that authentication credentials can be read with passive eavesdropping. You can use it only when performing tests (not in a production environment) and when you are certain that nobody can listen in (inspect your traffic)!

The easiest way to start is to use cURL, wget, or any other HTTP client even RouterOS fetch tool.
$ curl -k -u admin: https://10.155.101.214/rest/system/resource
[{"architecture-name":"tile","board-name":"CCR1016-12S-1S+",
"build-time":"Dec/04/2020 14:19:51","cpu":"tilegx","cpu-count":"16",
"cpu-frequency":"1200","cpu-load":"1","free-hdd-space":"83439616",
"free-memory":"1503133696","platform":"MikroTik",
"total-hdd-space":"134217728","total-memory":"2046820352",
"uptime":"2d20h12m20s","version":"7.1beta4 (development)"}]

Watch how to set up REST api.
Authentication

Authentication to the REST API is performed via HTTP Basic Auth. Provide your Username and password are the same as for the console user (by default "admin" with no password).

You have to set up certificates to use secure HTTPS, if self-signed certs are used, then CA must be imported to the trusted root. However, for testing purposes, it is possible to connect insecurely (for cUrl use -k flag, for wget use --no-check-certificate).
JSON format

Server broadly follows ECMA-404 standard, with following notes:

    In JSON replies all object values are encoded as strings, even if the underlying data is a number or a boolean.
    The server also accepts numbers in octal format (begins with 0) and hexadecimal format (begins with 0x). If the numbers are sent in a string format, they are assumed to be in decimal format.
    Numbers with exponents are not supported.

HTTP Methods

Below is a table summarising supported HTTP methods
GET	Read	print	To get the records.
PATCH	Update/Modify	set	To update a single record.
PUT	Create	add	To create a new record.
DELETE	Delete	remove	To delete a single record.
POST	
	
	Universal method to get access to all console commands.
GET

This method allows getting the list of all records or a single record from the specified menu encoded in the URL.
For example, get all IP addresses (equivalent to the 'ip/address/print' command from the CLI):
$ curl -k -u admin: https://10.155.101.214/rest/ip/address
[{".id":"*1","actual-interface":"ether2","address":"10.0.0.111/24","disabled":"false",
"dynamic":"false","interface":"ether2","invalid":"false","network":"10.0.0.0"},
{".id":"*2","actual-interface":"ether3","address":"10.0.0.109/24","disabled":"true",
"dynamic":"false","interface":"ether3","invalid":"false","network":"10.0.0.0"}]

To return a single record, append the ID at the end of the URL:
$ curl -k -u admin: https://10.155.101.214/rest/ip/address/*1
{".id":"*1","actual-interface":"ether2","address":"10.0.0.111/24","disabled":"false",
"dynamic":"false","interface":"ether2","invalid":"false","network":"10.0.0.0"}

If table contains named parameters, then name instread of ID can be used, for example, get ether1:
$ curl -k -u admin: https://10.155.101.214/rest/interface/ether1

It is also possible to filter the output, for example, return only valid addresses that belong to the 10.155.101.0 network:
$ curl -k -u admin: "https://10.155.101.214/rest/ip/address?network=10.155.101.0&dynamic=true"
[{".id":"*8","actual-interface":"sfp12","address":"10.155.101.214/24","disabled":"false",
"dynamic":"true","interface":"sfp12","invalid":"false","network":"10.155.101.0"}]

Another example returns only addresses on the "dummy" interface and with the comment "test":
$ curl -k -u admin: 'https://10.155.101.214/rest/ip/address?comment=test&interface=dummy'
[{".id":"*3","actual-interface":"dummy","address":"192.168.99.2/24","comment":"test",
"disabled":"false","dynamic":"false","interface":"dummy","invalid":"false","network":"192.168.99.0"}]

If you want to return only specific properties, you can use the '.proplist', followed by the '=' and a list of comma-separated properties. For example, to show only the address and if it's disabled:
$ curl -k -u admin: https://10.155.101.214/rest/ip/address?.proplist=address,disabled
[{"address":"10.0.0.111/24","disabled":"false"},{"address":"10.0.0.109/24","disabled":"true"}]
PATCH

This method is used to update a single record. Set PATCH call body as a JSON object which contains fields and values of the properties to be updated. For example, add a comment:
$ curl -k -u admin: -X PATCH https://10.155.101.214/rest/ip/address/*3 \
  --data '{"comment": "test"}' -H "content-type: application/json"
{".id":"*3","actual-interface":"dummy","address":"192.168.99.2/24","comment":"test",
"disabled":"false","dynamic":"false","interface":"dummy","invalid":"false","network":"192.168.99.0"}

In case of a successful update, the server returns the updated object with all its parameters.
PUT

A method is used to create new records in the menu encoded in the URL. The body should be set as a JSON object containing parameters applied to the newly created record.

In case of success, the server returns the created object with all its parameters.

Only one resource can be created in a single request.

For example, add an IP address to a dummy interface:
$ curl -k -u admin: -X PUT https://10.155.101.214/rest/ip/address \
  --data '{"address": "192.168.111.111", "interface": "dummy"}' -H "content-type: application/json"
{".id":"*A","actual-interface":"dummy","address":"192.168.111.111/32","disabled":"false",
"dynamic":"false","interface":"dummy","invalid":"false","network":"192.168.111.111"}
DELETE

This method is used to delete the record with a specified ID from the menu encoded in the URL. If the deletion has been succeeded, the server responds with an empty response. For example, call to delete the record twice, on second call router will return 404 error:
$ curl -k -u admin: -X DELETE https://10.155.101.214/rest/ip/address/*9
$ curl -k -u admin: -X DELETE https://10.155.101.214/rest/ip/address/*9
{"error":404,"message":"Not Found"}
POST

All the API features are available through the POST method. The command word is encoded in the header and optional parameters are passed in the JSON object with the corresponding fields and values. For example, to change the password of the active user, send
POST https://router/rest/password
{"old-password":"old","new-password":"N3w", "confirm-new-password":"N3w"}

REST response is structured similar to API response: 

    If the response contains '!re' sentences (records), the JSON reply will contain a list of objects.
    If the '!done' sentence contains data, the JSON reply will contain an object with the data.
    If there are no records or data in the '!done' sentence, the response will hold an empty list.

There are two special keys: .proplist and .query, which are used with the print command word. Read more about APIs responses, prop lists, and queries in the API documentation.
Proplist

The '.proplist' key is used to create .proplist attribute word. The values can be a single string with comma-separated values:
POST https://router/rest/interface/print
{".proplist":"name,type"}

or a list of strings:
POST https://router/rest/interface/print
{".proplist":["name","type"]}

For example, return address and interface properties from the ip/address list:
$ curl -k -u admin: -X POST https://10.155.101.214/rest/ip/address/print\
  --data '{"_proplist": ["address","interface"]}' -H "content-type: application/json"
[{"address":"192.168.99.2/24","interface":"dummy"},
{"address":"172.16.5.1/24","interface":"sfpplus1"},
{"address":"172.16.6.1/24","interface":"sfp2"},
{"address":"172.16.7.1/24","interface":"sfp3"},
{"address":"10.155.101.214/24","interface":"sfp12"},
{"address":"192.168.111.111/32","interface":"dummy"}]
Query

The '.query' key is used to create a query stack. The value is a list of query words. For example this POST request :
POST https://router/rest/interface/print
{".query":["type=ether","type=vlan","#|!"]}

is equivalent to this API sentence
/interface/print
?type=ether
?type=vlan
?#|!

For example, let's combine 'query' and 'proplist', to return '.id', 'address', and 'interface' properties for all dynamic records and records with the network 192.168.111.111
$ curl -k -u admin: -X POST https://10.155.101.214/rest/ip/address/print \
  --data '{".proplist": [".id","address","interface"], ".query": ["network=192.168.111.111","dynamic=true","#|"]}'\
  -H "content-type: application/json"
[{".id":"*8","address":"10.155.101.214/24","interface":"sfp12"},
{".id":"*A","address":"192.168.111.111/32","interface":"dummy"}]
Timeout

If the command runs indefinitely, it will timeout and the connection will be closed with an error. The current timeout interval is 60 seconds. To avoid timeout errors, add a parameter that would sufficiently limit the command execution time.

Timeout is not affected by the parameters passed to the commands. If the command is set to run for an hour, it will terminate early and return an error message.

For example, let's see what we get when the ping command exceeds the timeout and how to prevent this by adding a count parameter:
$ curl -k -u admin: -X POST https://10.155.101.214/rest/ping \
  --data '{"address":"10.155.101.1"}' \
  -H "content-type: application/json"
{"detail":"Session closed","error":400,"message":"Bad Request"}

$ curl -k -u admin: -X POST https://10.155.101.214/rest/ping \
  --data '{"address":"10.155.101.1","count":"4"}' \
  -H "content-type: application/json"
[{"avg-rtt":"453us","host":"10.155.101.1","max-rtt":"453us","min-rtt":"453us","packet-loss":"0","received":"1","sent":"1","seq":"0","size":"56","time":"453us","ttl":"64"},
{"avg-rtt":"417us","host":"10.155.101.1","max-rtt":"453us","min-rtt":"382us","packet-loss":"0","received":"2","sent":"2","seq":"1","size":"56","time":"382us","ttl":"64"},
{"avg-rtt":"495us","host":"10.155.101.1","max-rtt":"650us","min-rtt":"382us","packet-loss":"0","received":"3","sent":"3","seq":"2","size":"56","time":"650us","ttl":"64"},
{"avg-rtt":"461us","host":"10.155.101.1","max-rtt":"650us","min-rtt":"359us","packet-loss":"0","received":"4","sent":"4","seq":"3","size":"56","time":"359us","ttl":"64"}]

Another example is a bandwidth test tool, which can be limited by providing run duration:
$ curl -k -u admin: -X POST 'https://10.155.101.214/rest/tool/bandwidth-test' \
  --data '{"address":"10.155.101.1","duration":"2s"}' \
  -H "content-type: application/json"
[{".section":"0","connection-count":"20","direction":"receive","lost-packets":"0",
"random-data":"false","rx-10-second-average":"0","rx-current":"0","rx-size":"1500",
"rx-total-average":"0",
"status":"connecting"},
{".section":"1","connection-count":"20","direction":"receive","duration":"1s",
"lost-packets":"0","random-data":"false","rx-10-second-average":"0","rx-current":"0",
"rx-size":"1500","rx-total-average":"0",
"status":"running"},
{".section":"2","connection-count":"20","direction":"receive","duration":"2s",
"lost-packets":"581175","random-data":"false","rx-10-second-average":"854372352",
"rx-current":"854372352","rx-size":"1500","rx-total-average":"854372352",
"status":"running"},
{".section":"3","connection-count":"20","direction":"receive","duration":"3s",
"lost-packets":"9014","random-data":"false","rx-10-second-average":"891979008",
"rx-current":"929585664","rx-size":"1500","rx-total-average":"891979008",
"status":"done testing"}]
Errors

The success or failure of the API calls is indicated in the HTTP status code. In case of failure (status code 400 or larger), the body of the response contains a JSON object with the error code, a description of the error, and optional error details. For example, trying to delete an interface will return
{"error":406,"message":"Not Acceptable","detail":"no such command or directory (remove)"}



    Creado por Artūrs C., actualizado por última vez por Edgars P. el jun 03, 2025 5 min de lectura

    Summary
    Configuration
    Secrets
    Peer discovery
    Configuration Examples
        Applications
        Run RoMON in WinBox by using CLI
        Connect to RoMON through WinBox GUI

Summary

RoMON stands for "Router Management Overlay Network". RoMON works by establishing an independent MAC layer peer discovery and data forwarding network. RoMON packets are encapsulated with EtherType 0x88bf and DST-MAC 01:80:c2:00:88:bf and its network operate independently of L2 or L3 forwarding configuration. When RoMON is enabled, any received RoMON packets will not be displayed by sniffer or torch tools.

Each router on the RoMON network is assigned its RoMON ID. RoMON ID can be selected from the port MAC address or specified by the user.

RoMON protocol does not provide encryption services. Encryption is provided at the "application" level, by e.g. using ssh or by using a secure WinBox.

RoMON packets can be forwarded through network switches or bridges, unless there are specific restrictions on multicast traffic. When using a MikroTik bridge with hardware offloading, these packets are treated like regular multicast packets and are flooded across the network.

Since RouterOS v7.17, if the RoMON service is enabled and the switch chip supports ACL rules, dynamic rules are automatically created to redirect these packets to the CPU, where the RoMON service operates. However, if the switch does not support ACL rules and configuration does not align, such as when CPU and RoMON untagged packets are not in the same VLAN, the RoMON service might not function as expected.
Configuration

In order for a device to participate in RoMON network, RoMON feature must be enabled and ports that participate in RoMON network must be specified.

Sub-menu: /tool/romon
enabled (yes | no; Default: no)	Disable or enable RoMON feature.
id (MAC address; Default: 00:00:00:00:00:00)	MAC address to use as ID of this router.
secrets (string; Default: )	List of global secrets used for RoMON message hashing.

When RoMON is enabled without specifying ID, the ID is automatically selected:
[admin@MikroTik] /tool/romon> print 
     enabled: yes              
          id: 00:00:00:00:00:00
     secrets:                  
  current-id: DC:2C:6E:9E:11:27

Ports that participate in RoMON network are configured in /tool/romon/port menu. Port list is a list of entries that match either a specific interface or interface-list. Each entry defines whether the matched interface is allowed or forbidden to participate in the RoMON network. If participation is allowed, the entry also specifies the port's cost.

Sub-menu: /tool/romon/port
comment (string; Default: )	Short description of the entry.
cost (integer: 0..4294967295; Default: 100)	

Changes the port's cost.
disabled (yes | no; Default: no)	Changes whether the entry is disabled.
interface (name; Default: )	Interface name or interface-list used for RoMON.
secrets (string; Default: )	List of individual port secrets used for RoMON message hashing.


A default entry with the interface-list "all" is preconfigured. This means that when the RoMON service is enabled, all interfaces are allowed to participate in the RoMON network by default. This default entry cannot be removed or enabled/disabled, but you can still modify its cost, set it to forbid participation, or configure secrets.
Secrets

RoMON protocol secrets are used for message authentication, integrity check and replay prevention by means of hashing message contents with MD5.

For each interface, if the interface-specific secret list is empty, a global secret list is used. When sending out, messages are hashed with the first secret in list if list is not empty and first is not "empty secret" (empty string = ""), otherwise, messages are sent unhashed. When received, unhashed messages are only accepted if a secret list is empty or contains "empty secret", hashed messages are accepted if they are hashed with any of the secrets in list.

This design allows for the incremental introduction and/or change of secrets in-network without RoMON service interruption and can happen over RoMON itself, e.g.:

     initially, all routers are without secrets;
     configure each router one by one with secrets="","mysecret" - this will make all routers still send unprotected frames, but they all will be ready to accept frames protected with secret "mysecret";
     configure each router one by one with secrets="mysecret","" - this will make all routers use secret "mysecret", but also still accept unprotected frames (from routers that have not yet been changed);
     configure each router with secrets="mysecret" - this will make all routers use secret "mysecret" and also only accept frames protected with "mysecret";

Changing of secret in a network should be performed in a similar fashion where for some time both secrets are in use in network.
Peer discovery

In order to discover all routers on RoMON network RoMON discover command must be used:
[admin@MikroTik] > /tool/romon/discover 
Flags: A - active
Columns: ADDRESS, COST, HOPS, PATH, L2MTU, IDENTITY, VERSION, BOARD
   ADDRESS            COS  H  PATH               L2MT  IDENTITY   VERSION    BOARD              
A  6C:3B:6B:48:0E:8B  200  1  6C:3B:6B:48:0E:8B  1500  hEX        6.47beta7  RB750Gr3           
A  6C:3B:6B:ED:83:69  200  1  6C:3B:6B:ED:83:69  1500  CCR1009    6.47beta7  CCR1009-7G-1C-1S+  
A  B8:69:F4:B3:1B:D2  200  1  B8:69:F4:B3:1B:D2  1500  4K11       6.47beta7  RB4011iGS+5HacQ2HnD
A  CC:2D:E0:26:22:4D  200  1  CC:2D:E0:26:22:4D  1500  CCR1036    6.47beta7  CCR1036-8G-2S+     
A  CC:2D:E0:8D:01:88  200  1  CC:2D:E0:8D:01:88  1500  CRS328     6.47beta7  CRS328-24P-4S+     
A  E4:8D:8C:1C:D3:0E  200  1  E4:8D:8C:1C:D3:0E  1500  MikroTik   6.47beta7  RB2011iLS          
A  E4:8D:8C:49:49:DB  200  1  E4:8D:8C:49:49:DB  1500  hAP        6.47beta7  RB962UiGS-5HacT2HnT

Configuration Examples

In order for a device to participate in the RoMON network, the RoMON feature must be enabled and ports that participate in the RoMON network must be specified.
/tool romon set enabled=yes secrets=testing

Ports that participate in the RoMON network are configured in the RoMON port menu. Port list is a list of entries that match either specific port or all ports and specifies if matching port(s) is forbidden to participate in the RoMON network and in case port is allowed to participate in RoMON network entry also specifies the port cost. Note that all specific port entries have higher priority than the wildcard entry with interface=all.

For example, the following list specifies that all ports participate in RoMON network with cost 100 and ether7 interface with cost 200:
[admin@MikroTik] > /tool/romon/port/print
Flags: * - default
Columns: INTERFACE, FORBID, COST
#     INTERF  FO  COS
0  *  all     no  100
1     ether7  no  200

By default, one wildcard entry with forbid=no and cost=100 is created.
Applications

Multiple applications can be run over the RoMON network.

In order to test the reachability of specific router on RoMON network RoMON ping command can be used:
[admin@MikroTik] > /tool/romon/ping id=6C:3B:6B:48:0E:8B count=5
  SEQ HOST                                    TIME  STATUS                                                    
    0 6C:3B:6B:48:0E:8B                       1ms                                                             
    1 6C:3B:6B:48:0E:8B                       0ms                                                             
    2 6C:3B:6B:48:0E:8B                       1ms                                                             
    3 6C:3B:6B:48:0E:8B                       0ms                                                             
    4 6C:3B:6B:48:0E:8B                       1ms                                                             
    sent=5 received=5 packet-loss=0% min-rtt=0ms avg-rtt=0ms max-rtt=1ms

In order to establish a secure terminal connection to router on RoMON network RoMON SSH command can be used:
[admin@MikroTik] > /tool/romon/ssh 6C:3B:6B:48:0E:8B
Run RoMON in WinBox by using CLI

In order to establish the RoMON session directly by using the command line on a computer, you must specify RoMON agents and desired routers addresses. RoMON agent must be saved on Managed routers list in WinBox in order to make a successful connection: 
winbox.exe --romon 192.168.88.1 6C:3B:6B:48:0E:8B admin ""
Connect to RoMON through WinBox GUI

Watch a video here.



    Creado por Normunds R., actualizado por última vez por GG el mar 06, 2024 8 min de lectura

    Overview
    Serial Console Connections
        Null Modem Without Handshake
        Null Modem With Loopback Handshake
        Null Modem With Partial Handshake
        Null Modem With Full Handshake
        Null Modem Compatibility
        RJ45 Type Serial Port
        RB M33G Additional Serial Header
        CCR Serial Header
    Serial Terminal Usage
    Special Login

Overview

The Serial Console and Serial Terminal are tools, used to communicate with devices and other systems that are interconnected via the serial port. The serial terminal may be used to monitor and configure many devices - including modems, network devices (including MikroTik routers), and any device that can be connected to a serial (asynchronous) port.

The Serial Console feature is for configuring direct-access configuration facilities (monitor/keyboard and serial port) that are mostly used for initial or recovery configuration. A special null-modem cable is needed to connect two hosts (like two PCs, or two routers; not modems). Note that a terminal emulation program (e.g., HyperTerminal on Windows or minicom on Linux) is required to access the serial console from another computer. Default settings of the router's serial port are 115200 bits/s (for x86 default is 9600 bits/s), 8 data bits, 1 stop bit, no parity, hardware (RTS/CTS) flow control. 

Several customers have described situations where the Serial Terminal (managing side) feature would be useful:

    on a mountaintop, where a MikroTik wireless installation sits next to equipment (including switches and Cisco routers) that can not be managed in-band (by telnet through an IP network)
    monitoring weather-reporting equipment through a serial port
    connection to a high-speed microwave modem that needed to be monitored and managed by a serial connection

With the serial-terminal feature of the MikroTik, up to 132 (and, maybe, even more) devices can be monitored and controlled.
Serial Console Connections

Serial communications between devices are done with RS232, it is one of the oldest and most widely spread communication methods in the computer world. It was used for communication with the modems or other peripheral devices DTE/DCE. In the modern world, the main use of serial communication is DTE/DTE communication (Data Terminal Equipment) e.g. using a null-modem cable. There are several types of null modem cables and some of them may not work with RouterBoards at all.
Null Modem Without Handshake

This cable does not utilize handshake pins at all:
2	3	

Rx ← Tx
3	2	Tx → Rx
5	5	GND

It allows data-only traffic on the cross-connected Rx/Tx lines. Hardware flow control is not possible with this type of cable. The only way to perform flow control is with software flow control using the XOFF and XON characters.
Null Modem With Loopback Handshake

The problem with the first cable is when connected to a device on which hardware flow control is enabled software may hang when checking modem signal lines. 

Null modem cable with loop back handshake fixes the problem, its main purpose is to fool well-defined software into thinking there is handshaking available:
2	3	

Rx ← Tx
3	2	Tx → Rx
5	5	

GND
1+4+6	-	DTR → CD + DSR
-	1+4+6	DTR → CD + DSR
7+8	-	RTS → CTS
-	7+8	RTS → CTS

Hardware flow control is not possible with this cable. Also if remote software does not send its own ready signal to DTR output communication will hang.
Null Modem With Partial Handshake

This cable can be used when flow control enabled without being incompatible with the original way flow control was used with DTE/DCE communication.

This type of cable is not recommended for use with RouterOS.
1	7+8	

RTS2 → CTS2 + CD1
2	3	Rx ← Tx
3	2	

Tx → Rx
4	6	DTR → DSR
5	5	GND
6	4	DSR ← DTR
7+8	1	RTS1 → CTS1 + CD2
Null Modem With Full Handshake

Used with special software and should not be used with RouterOS.
2	3	Rx ← Tx
3	2	

Tx → Rx
4	6	DTR → DSR
5	5	GND
6	4	DSR ← DTR
7	8	RTS → CTS
8	7	CTS ← RTS
Null Modem Compatibility

Summary tables below will allow you to choose the proper cable for your application.
RouterBoards
with limited port functionality	Y	Y	N*	N
RouterBoards
with full functionality	Y	Y	Y	N

* - may work only when hardware flow control is disabled
Software flow
control only	Y	Y*	Y**	Y**
Low-speed DTE/DCE compatible
hardware flow control	N	Y	Y*	N
High-speed DTE/DCE compatible
hardware flow control	N	Y	Y**	N
High speed
communication
using special software	N	N	Y*	Y

* - will work as an alternative

** - will work but not recommended
RJ45 Type Serial Port

This type of port is used on RouterBOARD 2011, 3011, 4011, CCR1072, CCR1036 r2, CCR2xxx and CRS series devices, sometimes called "Cisco style" serial port.

RJ45 to DB9 Cable Pinout:



RTS	1	8	8	5	CTS
DTR	2	7	6	6	DSR
TxD	3	6	2	3	RxD
Ground	4	5	5	7	Ground
Ground	5	4	5	7	Ground
RxD	6	3	3	2	TxD
DSR	7	2	4	20	DTR
CTS	8	1	7	4	RTS
RB M33G Additional Serial Header

For RBM33G additional serial header can be attached on GPIO pins U3_RXD, GND, U3_TXD, and 3V3
CCR Serial Header

The Cloud Core Router series devices have a serial header on the PCB board, called J402 or 100

Here is the pin-out of that connector:

Serial Terminal Usage

RouterOS allows to communicate with devices and other systems that are connected to the router via the serial port using a /system serial-terminal  command. All keyboard input will be forwarded to the serial port and all data from the port is output to the connected device.

First, you have to have a free serial port, if the device has only one serial port (like all RouterBoards, WRAP/ALIX boards, etc.) you will have to disable the system console on this serial port to be able to use it as Serial Terminal for connection to other equipment (switches, modems, etc):
/system console disable 0

Be sure to just disable the console rather than removing it, as RouterOS will recreate the console after the next reboot when you really remove it.

Note that there are some caveats you should be aware of! Take your time understanding those limits to avoid strange things to happen when connecting a device to a serial port on a RouterBoard:

    By re-configuring port Serial0 on a RouterBoard as seen above, you will lose your serial console access to RouterOS. This means, that if you cannot access your RouterBoard over the network anymore, you might even have to reset the whole configuration of it to gain access again.

    When rebooting a RouterBoard the boot loader (RouterBOOT) will always use the serial console (Serial0 on RouterBoards) to send out some startup messages and offer access to the RouterBOOT menu.

    Having text coming out of the serial port to the connected device might confuse your attached device. Furthermore, in the standard config, you can enter the RouterBOOT menu by pressing ANY key. So if your serial device sends any character to the serial port of your RouterBoard during boot time, the RouterBoard will enter the RouterBOOT menu and will NOT boot RouterOS unless you manually intervene!

    You can reconfigure RouterBOOT to enter the RouterBOOT menu only when a DEL character is received - use this to reduce the chance to get a router that's stuck when rebooting!

    Or if newer versions are used "Silent boot" feature can be used to suppress any output on the serial interface, including removal of booting sounds.

Next, you will have to configure your serial port according to the serial port settings of the connected device. Using the following command you will set your serial port to 19200 Baud 8N1. What settings you need to use depends on the device you connect:
/port set serial0 baud-rate=19200 data-bits=8 parity=none stop-bits=1

You can also try to let RouterOS guess the needed baud rate by setting
/port set serial0 baud-rate=auto

Now's the time to connect your device if not already done. Usually, you will have to use a null modem cable (the same thing as a cross-over-cable for Ethernet). Now we're ready to go:
/system serial-terminal serial0

This will give you access to the device you connected to port Serial0. Ctrl-A is the prefix key, which means that you will enter a small "menu". If you need to send the Ctrl-A character to a remote device, press Ctrl-A twice.

If you want to exit the connection to the serial device type Ctrl-A, then Q. This will return you to your RouterOS console.

Do not connect to devices at an incorrect speed and avoid dumping binary data.
Special Login

Special login can be used to access another device (like a switch, for example) that is connected through a serial cable by opening a telnet/ssh session that will get you directly on this device (without having to login to RouterOS first). 

For demonstration we will use two RouterBoards and one PC. 

Routers R1 and R2 are connected with serial cable and PC is connected to R1 via ethernet. Lets say we want to access router R2 via serial cable from our PC. To do this you have to set up serial interface proxy on R1. It can be done by feature called special-login.

By default console is bound to serial port. 

First task is to unbind console from serial simply by disabling entry in /system console menu:
[admin@MikroTik] /system console> print
Flags: X - disabled, U - used, F - free
 #   PORT                                                                    TERM
 0 X serial0                                                                 vt102

Next step is to add new user, in this case serial, and bind it to the serial port
[admin@MikroTik] > /user add name=serial group=full
[admin@MikroTik] > /special-login add user=serial port=serial0 disabled=no
[admin@MikroTik] > /special-login print
Flags: X - disabled
 #   USER                                                                    PORT
 0   serial                                                                  serial0

Now we are ready to access R2 from our PC.
maris@bumba:/$ ssh serial@10.1.101.146

[Ctrl-A is the prefix key]
R2 4.0beta4
R2 Login:

[admin@R2] >

To exit special login mode press Ctrl+A and Q
[admin@MikroTik] >
[Q - quit connection]      [B - send break]
[A - send Ctrl-A prefix]   [R - autoconfigure rate]


Connection to 10.1.101.146 closed.


After router reboot and serial cable attached router may stuck at Bootloader main menu

To fix this problem you need to allow access bootloader main menu from <any> key to <delete>:

    enter bootloader menu
    press 'k' for boot key options
    press '2' to change key to <delete>

What do you want to configure?                                                   
d - boot delay                                                                
k - boot key                                                                  
s - serial console                                                            
n - silent boot                                                              
o - boot device                                                               
u - cpu mode                                                                 
f - cpu frequency                                                             
r - reset booter configuration                                                 
e - format nand                                                               
g - upgrade firmware                                                         
i - board info                                                                
p - boot protocol                                                            
b - booter options                                                            
t - call debug code                                                           
l - erase license                                                             
x - exit setup                         
your choice: k - boot key

Select key which will enter setup on boot:
 * 1 - any key
   2 - <Delete> key only

your choice: 2




    Creado por Usuario desconocido (emils), actualizado por última vez por Matīss O. el ene 21, 2025 4 min de lectura

    SSH Server
        Properties
        Enabling PKI authentication
    SSH Client
        Simple log-in to remote host
        Log-in from certain IP address of the router
        Log-in using RSA public/private key
        Executing remote commands
    SSH exec
        Retrieve information

SSH Server

RouterOS has built in SSH (SSH v2) server that is enabled by default and is listening for incoming connections on port TCP/22. It is possible to change the port and disable the server under Services menu.
Properties

Sub-menu: /ip ssh
allow-none-crypto (yes|no; Default: no)	Whether to allow connection if cryptographic algorithms are set to none.
always-allow-password-login (yes | no; Default: no)	Whether to allow password login at the same time when public key authorization is configured for a user.
ciphers (3des-cbc | aes-cbc | aes-ctr | aes-gcm | auto | null; Default: auto)	

Allow to configure SSH ciphers.
forwarding-enabled (both | local | no | remote; Default: no)	Allows to control which SSH forwarding method to allow:

    no - SSH forwarding is disabled;
    local - Allow SSH clients to originate connections from the server(router), this setting controls also dynamic forwarding;
    remote - Allow SSH clients to listen on the server(router) and forward incoming connections;
    both - Allow both local and remote forwarding methods.

host-key-size (1024 | 1536 | 2048 | 4096 | 8192; Default: 2048)	RSA key size when host key is being regenerated.
host-key-type (ed25519 | rsa; Default: rsa)	Select host key type
strong-crypto (yes | no; Default: no)	Use stronger encryption, HMAC algorithms, use bigger DH primes and disallow weaker ones:

    use 256 and 192 bit encryption instead of 128 bits;
    disable null encryption;
    use sha256 for hashing instead of sha1;
    disable md5;
    use 2048bit prime for Diffie-Hellman exchange instead of 1024bit.

Commands
export-host-key (key-file-prefix)	

Export public and private RSA/Ed25519 to files. Command takes two parameters:

    key-file-prefix - used prefix for generated files, for example, prefix 'my' will generate files 'my_rsa', 'my_rsa.pub' etc.
    passphrase - private key passphrase

Host keys are exported in PKCS#8 format.
import-host-key (private-key-file)	
Import and replace private RSA/Ed25519 key from specified file. Command takes two parameters:

    private-key-file - name of the private RSA/Ed25519 key file
    passphrase - private key passphrase

Private key is supported in PEM or PKCS#8 format.
regenerate-host-key ()	Generated new and replace current set of private keys (RSA/Ed25519) on the router. Be aware that previously imported keys might stop working.

Exporting the SSH host key requires "sensitive" user policy.
Enabling PKI authentication

Example of importing public key for user admin

Generate SSH keys on the client device (the device you will connect from). Upload the public SSH key to the router and import it.
/user ssh-keys import public-key-file=id_rsa.pub user=admin
SSH Client

Sub-menu: /system ssh
Simple log-in to remote host

It is able to connect to remote host and initiate ssh session. IP address supports both IPv4 and IPv6.
/system ssh 192.168.88.1
/system ssh 2001:db8:add:1337::beef

In this case user name provided to remote host is one that has logged into the router. If other value is required, then user=<username> has to be used.
/system ssh 192.168.88.1 user=lala
/system ssh 2001:db8:add:1337::beef user=lala
Log-in from certain IP address of the router

For testing or security reasons it may be required to log in to other host using certain source address of the connection. In this case src-address=<ip address> argument has to be used. Note that IP address in this case supports both, IPv4 and IPv6.
/system ssh 192.168.88.1 src-address=192.168.89.2
/system ssh 2001:db8:add:1337::beef src-address=2001:db8:bad:1000::2

in this case, ssh client will try to bind to address specified and then initiate ssh connection to remote host.
Log-in using RSA public/private key

Example of importing private key for user admin

First, export currently generated SSH keys to a file:
/ip ssh export-host-key key-file-prefix=admin

Two files admin_rsa and admin_rsa.pub will be generated. The pub file needs to be trusted on the SSH server side (how to enable SSH PKI on RouterOS) The private key has to be added for the particular user.
/user ssh-keys private import user=admin private-key-file=admin_rsa

Only user with full rights on the router can change 'user' attribute value under /user ssh-keys private

After the public key is installed and trusted on the SSH server, a PKI SSH session can be created.
/system ssh 192.168.1.1

Watch how to:

Log in wih an RSA key.

Log in with ed25519.
Executing remote commands

To execute remote command it has to be supplied at the end of log-in line
/system ssh 192.168.88.1 "/ip address print"
/system ssh 192.168.88.1 command="/ip address print"
/system ssh 2001:db8:add:1337::beef "/ip address print"
/system ssh 2001:db8:add:1337::beef command="/ip address print"

If the server does not support pseudo-tty (ssh -T or ssh host command), like MikroTik ssh server, then it is not possible to send multiline commands via SSH

For example, sending command "/ip address \n add address=1.1.1.1/24" to MikroTik router will fail.

If you wish to execute remote commands via scripts or scheduler, use command ssh-exec.
SSH exec

Sub-menu: /system ssh-exec

Command ssh-exec is a non-interactive ssh command, thus allowing to execute commands remotely on a device via scripts and scheduler.
Retrieve information

The command will return two values:

    exit-code: returns 0 if the command execution succeeded
    output: returns the output of remotely executed command


Example: Code below will retrieve interface status of ether1 from device 10.10.10.1 and output the result to "Log"
:local Status ([/system ssh-exec address=10.10.10.1 user=remote command=":put ([/interface ethernet monitor [find where name=ether1] once as-value]->\"status\")" as-value]->"output")
:log info $Status

For security reasons you should not use plain text password with parameter "password" specified in the command line. To ensure safe execution of the command remotely, it is strongly recommended to use SSH PKI authentication for users on both sides.


The user group and script policy executing the command requires test permission



    Creado por Normunds R., actualizado por última vez por Matīss O. el ago 14, 2024 5 min de lectura

    Configuration Settings
        Writable Settings
        Read-only Settings
        Commands
    CWMP Session
    Parameters and Data Models
    Download RPC
        RouterOS Update (1 Firmware Upgrade Image)
        Configuration Change (3 Vendor Configuration File)
        Alter configuration
        Overwrite all configurations
        RouterOS default configuration change (X MIKROTIK Factory Configuration File)
    FactoryReset RPC
    Upload RPC
        Upload current configuration (1 Vendor Configuration File)
        Upload log file (2 Vendor Log File)
        Upload default configuration (X MIKROTIK Factory Configuration File)
    Security
    Tested ACSs
        Commercial
        Open Source

TR069-client implements CPE WAN Management Protocol (CWMP) for remote device management, which is standardized by the Broadband Forum (BBF). CWMP works over IP network using HTTP(S) to communicate with an Auto Configuration Server (ACS), which can monitor, configure attributes and update the firmware of a remote device. Typically used by ISPs to manage CPEs, but also can be used for Network Infrastructure Device management.

Requires tr069-client package.
Configuration Settings

Sub-menu: /tr069-client

TR069-client menu parameters:
Writable Settings

Client configuration settings.
enabled	enable/disable CWMP protocol
acs-url	

URL of ACS. Examples: "https://example.com:8080/path/", "https://192.168.1.100/"

If ACS is accessed using HTTPS, in a client must be imported Root CA to verify ACS server certificate.
username	HTTP authentication username (used by CPE to "login" into ACS)
password	HTTP authentication password (used by CPE to "login" into ACS)
periodic-inform-enabled	enable/disable CPE periodical session initiation. Timer is started after every successful session. When session is started by periodic interval then Inform RPC contains "2 PERIODIC" event. Maps to "Device.ManagementServer.PeriodicInformEnable" Parameter
periodic-inform-interval	timer interval of periodic inform. Maps to "Device.ManagementServer.PeriodicInformInterval"
client-certificate	certificate of client/CPE, which can be used by ACS for extra authentication
Read-only Settings

Read only parameters to monitor state of the client.
status	informative status of CWMP.

    disabled - protocol disabled,
    waiting-URL - protocol enabled, but ACS URL not configured,
    running - CWMP is configured correctly and will communicate with ACS on events

last-session-error	user-friendly error description indicating why the previous session didn't finish successfully
retry-count	consecutive unsuccessful session count. If > 0, then last-session-error should indicate error. Resets to 0 on a successful session, disabled protocol or reboot
Commands
reset-tr069-config	completely resets and forgets tr069-client configuration and state (without affecting other ROS configurations). Use when CWMP goes into unresponsive/hanged state and should be restored without re-installation of the RouterOS.
CWMP Session

CWMP client usually starts communication(Session) with ACS on different events - first boot, reboot, periodic interval, remote request, value change etc. In each session, CPE and ACS can call RPCs to be "executed" on the other side. CPE always starts with Inform RPC, which contains connection reason, device info and some Parameter values depending on configuration. When CPE has nothing more to say, then ACS executes its RPCs (which most of the time are Parameter management RPCs).
Parameters and Data Models

Parameters are simple name+value pairs and each vendor can decide which Parameters to support in its devices. A combination of all supported Parameters is called Data Model (DM). BBF defines three root Data Models(TR-098, TR-181:1, TR-181:2) on which vendors should base their supported Parameters. RouterOS Data Model is based on "TR-181 Issue 2 Amendment 11", which is the newest DM and recommended by BBF.

RouterOS TR069 client supported parameter reference document:

  	Fichero 	Modificado
	Archivo HTML current.html v7.13 - RouterOS TR069 client supported parameter reference document 	feb 28, 2024 by Confluence Helper

Download RPC
RouterOS Update (1 Firmware Upgrade Image)

CWMP standard defines that CPE's firmware can be updated using Download RPC with FileType="1 Firmware Upgrade Image" and single URL of a downloadable file (HTTP and HTTPS are supported). Standard also states that downloaded file can be any type and vendor specific process can be applied to finish firmware update. Because MikroTik's update is package based (and also for extra flexibility), an XML file is used to describe firmware upgrade/downgrade. For now, XML configuration supports providing multiple URLs of files, which will be downloaded and applied similarly as regular RouterOS update through firmware/package file upload.

An example of RouterOS bundle package and tr069-client package update (don't forget to also update tr069-client package). An XML file should be put on some HTTP server, which is accessible from CPE for download. Also, downloadable RouterOS package files should be accessible the same way (can be on any HTTP server). Using ACS execute Download RPC with URL pointing to XML file (e.g. "https://example.com/path/upgrade.xml") with contents:

<upgrade version="1" type="links">
   <config/>
   <links>
       <link>
          <url>https://example.com/routeros-mipsbe-X.Y.Z.npk</url>
       </link>
       <link>
          <url>https://example.com/tr069-client-X.Y.Z-mipsbe.npk</url>
       </link>
   </links>
</upgrade>

CPE will download XML, parse/validate its contents, download files from provided URLs and try to upgrade. The result will be reported with TransferComplete RPC.

Note

Always make firmware updates incremental - first, update locally tested device and make sure that CWMP communication is resumed with a new version and required ROS functionality works. Secondly, repeat steps by updating groups of CPEs incrementally. We do not recommend updating all remote devices at once.

Warning: Use HTTPS in production for firmware management
Configuration Change (3 Vendor Configuration File)

The same Download RPC can be used to perform complete configuration overwrite (as intended by standard) OR configuration alteration (when URL's filename extension is ".alter").
Alter configuration

RouterOS has a lot of configuration attributes and not everything can be ported to CWMP Parameters, that's why RouterOS provides a possibility to execute its powerful scripting language to configure any attribute. A configuration alteration (which is really a regular script execution) can be performed using Download RPC FileType="3 Vendor Configuration File" with downloadable file extension ".alter". This powerful feature can be used to configure any ROS attributes which are not available through CWMP Parameters.
Overwrite all configurations

Full ROS configuration overwrite can be performed using Download RPC FileType="3 Vendor Configuration File" with any URL file name (except with ".alter" extension).

Warning: Provided configuration file(script) must be "smart" enough to apply configuration correctly right after reboot. This is especially important when using uploaded configuration file with Upload RPC, because it only contains values export. Some things that should be added manually:

    delay at beginning, for interfaces to show up;
    hidden passwords for users;
    certificates.

RouterOS default configuration change (X MIKROTIK Factory Configuration File)

This vendor specific FileType allows the change of the RouterOS default configuration script that is executed when /system reset-configuration command is executed (or the other means when router configuration is being reset).

Note

If the default configuration script is changed it will not be displayed by /system default-configuration print as it is the case if that script is altered via Netinstall tool. That command will always show the default script set up by MikroTik

Warning: Use this with caution as the failure of uploaded script may render device inoperable and/or inaccessible by the ACS
FactoryReset RPC

This is CWMP standard RPC, which performs RouterOS configuration factory-reset. The reset process is performed in the same way as executing the command:

/system reset-configuration skip-backup=yes

Note that the default factory configuration can be different for each device (see [1]) and execution of this command removes all configurations and executes internally stored default-configuration script.

Best Practices Guide for preparing CPE with custom factory settings for TR069 https://wiki.mikrotik.com/wiki/Tr069-best-practices
Upload RPC
Upload current configuration (1 Vendor Configuration File)

The result of this is file uploaded to the ACS same as the output of /export command in the RouterOS
Upload log file (2 Vendor Log File)

The result of this is file uploaded to the ACS is similar to the output of /log print command in the RouterOS
Upload default configuration (X MIKROTIK Factory Configuration File)

The result of this is file uploaded to the ACS that has contents of the current set default configuration script that will be executed if /system reset-configuration command is executed. It may differ from one returned using /system default-configuration print.
Security

    HTTP should only be used when testing initial setup in the secured/private network because Man-in-the-middle attacker could read/change configuration parameters. In the production environment, HTTPS is a MUST.
    CWMP's incoming connection validation by design is safe because CPE will not communicate with any other device except previously configured ACS. Connection Request only signals CPE to start a new connection + new session with previously configured ACS.

Tested ACSs

Ordering is alphabetical. MikroTik does not imply any one vendor superiority of another. 
Commercial

We have tested and verified to be working the following commercial ACS solutions:

    AVSystem
    Axiros
    Friendly Tech

Open Source

    GenieACS

Note: these ACS systems below seem to be not maintained and thus is not suggested as useful options

    FreeACS
    LibreACS






    Creado por Normunds R., actualizado por última vez por Serhii T. el feb 07, 2025 6 min de lectura

    Introduction
    Connecting to a Router
    Enable HTTPS
    The "Terminal"
    Skins
        Designing skins
        Skin design examples
        Customizing skins
        Using skins

Introduction

WebFig is a web-based RouterOS utility that allows you to monitor, configure and troubleshoot the router. It is designed as an alternative of WinBox, both have similar layouts and both have access to almost any feature of RouterOS.

As Webfig is platform-independent, it can be used to configure a router directly from various devices without the need for software developed for specific platforms. In other words, there is no need to install additional software.

WebFig allows performing three basic actions:

    Configuration - view and edit current configuration;
    Monitoring - display the current status of the router, routing information, interface stats, logs, etc.;
    Troubleshooting - RouterOS has built-in many troubleshooting tools (like ping, traceroute, packet sniffers, traffic generators, etc.) and all of them can be used with WebFig

Connecting to a Router

As we already know from the First Time Configuration section, the device by default has username admin and no password configured. Simply open a Web browser and in the search bar type device IP address which by default is 192.168.88.1. Be sure your device has IP address from the same network, for example, 192.168.88.2 otherwise Layer3 communication will not work.


Enable HTTPS

For HTTPS to work properly, you need to specify a valid certificate that WebFig can use. You can use a certificate that is issued by a trusted Certificate Authority (CA) or you can create your own root CA and generate self-signed certificates. 

WebFig supports wildcard certificates. You can generate such a certificate by specifying a wildcard in the common-name property, for example, common-name=*.mikrotik.com.

To generate your own certificates and enable HTTPS access, you must configure the following:

Create your own root CA on your router and sign it
[admin@MikroTik] > certificate add name=local-cert common-name=local-cert key-usage=key-cert-sign,crl-sign 
[admin@MikroTik] > certificate sign local-cert 
  progress: done

In case you already have set up your own CA or you are using a service that signs certificates for you, then you need to create and sign the certificate remotely and import the certificate on the router later. In case you are importing a certificate, then make sure you mark the certificate as trusted.

Create a new certificate for WebFig (non-root certificate)
[admin@MikroTik] > certificate add name=webfig common-name=192.168.88.1
[admin@MikroTik] > certificate sign webfig 
  progress: done
[admin@MikroTik] > certificate print
Flags: K - private-key; A - authority; T - trusted
Columns:NAME        COMMON-NAME     FINGERPRINT                                                     
0  KAT  local-cert  local-cert      9b6363d033c4b2e6893c340675cfb8d1e330977526dba347a440fabffd983c5d
1  KAT  webfig      192.168.88.1    9f84ac2979bea65dccd02652056e5559bcdf866f8da5f924139d99453402bd02

Enable www-ssl and specify to use the newly created certificate for WebFig
[admin@MikroTik] > ip service
set www-ssl certificate=webfig disabled=no

You can now visit https://192.168.88.1 and securely configure your router.

By default, browsers will not trust self-signed certificates, you will need to add the certificate as trusted on the first time you visit the page in your browser. Another approach is to export the root CA certificate and import it as a trusted root certificate on your computer, this way all certificates signed by this router will be considered as valid and will make it easier to manage certificates in your network.

Most Internet browsers have their own certificate trust chain and work independently of the operating system's certificate trust chain, this means that you may have to add your own root CA's certificate as a trusted certificate in your browser settings since trusting the certificate in your operating system's settings might not have any effect when using your Internet browser.
The "Terminal"

The "Terminal" or Command Line Interface (CLI) in WebFig is located in the top right corner. It offers the same functionality as the "New Terminal" in the WinBox GUI.

Skins

WebFig Design Skin is a handy tool to make the interface more user-friendly. It is not a security tool. If the user has sufficient rights it is possible to access hidden features by other means.
Designing skins

If the user has sufficient permissions (the group has the policy "policy" and "sensitive" to edit permissions) Design Skin button becomes available. Pressing that toggle button will open interface editing options. 

To prevent the user from accessing the Design Skin menu, disable policy "policy" and "sensitive" under the user group configuration.

Possible operations are:

    Hide menu - this will hide all items from the menu and its submenus;
    Hide submenu - only certain submenu will be hidden;
    Hide tabs - if submenu details have several tabs, it is possible to hide them this way;
    Rename menus and items - make certain features more obvious or translate them into your language;
    Add a note to the item (in detail view) - to add comments on the field;
    Make item read-only (in detail view) - for user safety very sensitive fields can be made read only;
    Hide flags (in detail view) - while it is only possible to hide a flag in detail view, this flag will not be visible in list view and in detailed view;
    Add limits for the field - (in detail view) where it is the list of times that are comma or newline separated list of allowed values:
        number interval '..' example: 1..10 will allow values from 1 to 10 for fields with numbers, for example, MTU size.
        field prefix (Text fields, MAC address, set fields, combo-boxes). If it is required to limit prefix length $ should be added to the end. For example, limiting the wireless interface to "station" only, "Add limit" will contain "station$"

    Add Tab - will add a gray ribbon with an editable label that will separate the fields. Ribbon will be added before the field it is added to;
    Add Separator - will add a low height horizontal separator before the field it is added to.

Note: Number interval cannot be set to extend limitations set by RouterOS for that field

Note: Set fields are arguments that consist of a set of check-boxes, for example, setting up policies for user groups, RADIUS "Service"

Note: Limitations set for combo-boxes will also limit the values selectable from the dropdown
Skin design examples

If you need to limit the user for some services 

Add a limit to the RADIUS Service.

The result will be only those services, that are pointed in the "Limit" field.

Customizing skins

Here is an example of the "Status" page that can be used within the skin *.json file: status.json

The status content is structured as follows:
{"Status": {"Status": {}}}

Status records are displayed in numbered order, example:
"7": {
  "alias": (path to the record),
  "note": (optional; free form text that appears under the record),
  "name": (optional; alternative name for the record),
  "tab": (optional; name of the tab that this and following records belong to),
  "separator": 1 (optional; should a separating line be placed above his record)
},

Path (alias) Structure:

The path (e.g. alias: "IP:Firewall:Filter Rules:*17:Statistics:Packet Rate Graph" and corresponding URL: "router_IP/webfig/#IP:Firewall.Filter_Rules.17") consists of the following colon separated sections:

    Group (if any) → IP:
    Service or Name → Firewall:
    Container or Tab Name → Filter Rules:
    Asterisk (*) and Object ID → Found in the URL of the opened object (17)
    Tab Name in the form (if any) → Statistics
    Input Field Name → Packet Rate Graph

Using skins

To use skins you have to assign the skin to the group. When that is done, users of that group will automatically use the selected skin as their default when logging into WebFig or WinBox.
/user/group/set your_group_name skin=your_skin

If it is required to use created skin on another router you can copy files to the skins folder on the other router. On the new router, it is required to add copied skin to the user group to use it.





    Creado por Normunds R., actualizado por última vez por Mārtiņš S. el jun 17, 2025 12 min de lectura

    1Summary
    2Starting WinBox
        2.1Simple mode
            2.1.1Buttons/check-boxes and Other Fields
            2.1.2Menu Items
        2.2Advanced mode
            2.2.1Buttons/check-boxes and Other Fields
        2.3Command Line
        2.4IPv6 connectivity
        2.5Run WinBox on macOS
        2.6Run WinBox on Linux
    3Interface Overview
    4Work Area and Child Windows
        4.1Child window menu bar
        4.2Sorting out displayed items
        4.3Customizing list of displayed columns
            4.3.1Detail mode
            4.3.2Category view
        4.4Drag & Drop
        4.5Traffic monitoring
        4.6Item copy
    5Transferring Settings
    6WinBox Keyboard Shortcuts
    7Troubleshooting
        7.1WinBox cannot connect to the router's IP address, devices do not show up in the Neighbors list
        7.2I get an error '(port 20561) timed out' when connecting to routers mac address
        7.3I can't find my device in WinBox IPv4 Neighbors list or MAC connection fails with "ERROR could not connect to XX-XX-XX-XX-XX-XX"

Summary

A native WinBox beta version for Linux and macOS is now available on the MikroTik downloads page!


WinBox is a small utility that allows the administration of MikroTik RouterOS using a fast and simple GUI. It is a native Win32/Win64 binary but can be run on Linux and macOS (OSX) using Wine. All WinBox interface functions are as close as possible mirroring the console functions, that is why there are no WinBox sections in the manual. Some advanced and system critical configurations are not possible from the WinBox, like MAC address change on an interface.

From WinBox v3.14, the following security features are used:

    WinBox.exe is signed with an Extended Validation certificate, issued by SIA Mikrotīkls (MikroTik).
    WinBox uses ECSRP for key exchange and authentication (requires a new WinBox version).
    Both sides verify that the other side knows the password (no man in the middle attack is possible).
    WinBox in RoMON mode requires that the agent is the latest version to be able to connect to the latest version routers.
    WinBox uses AES128-CBC-SHA as an encryption algorithm (requires WinBox version 3.14 or above).

Starting WinBox

WinBox loader can be downloaded from the MikroTik download page. When WinBox.exe is downloaded, double click on it, and the WinBox loader window will pop up. There are two WinBox loader modes: simple which is enabled by default and advanced.
Simple mode

When you open WinBox loader for the first time simple mode layout will be used:

To connect to the router enter the IP or MAC address of the router, specify username and password (if any) and click on the Connect button. You can also enter the port number after the IP address, separating them with a colon, like this 192.168.88.1:9999. The port can be changed in the RouterOS services menu.

 It is recommended to use an IP address whenever possible. MAC session uses network broadcasts and is not 100% reliable.

You can also use neighbor discovery, to list available routers use the Neighbors tab:

From the list of discovered routers, you can click on the IP or MAC address column to connect to that router. If you click on IP address then IP will be used to connect, but if you click on MAC Address then the MAC address will be used to connect to the router.
Neighbor discovery will show also devices that are not compatible with WinBox, like Cisco routers or any other device that uses CDP (Cisco Discovery Protocol). If you will try to connect to a SwOS device, then the connection will be established through a web browser
Buttons/check-boxes and Other Fields

    Connect - Connect to the router
    Connect To RoMON - Connect to RoMON Agent
    Add/set - Save/Edit any of the saved router entries in the Managed tab.
    Open In New Window - Leaves loader open in the background and opens new windows for each device to which connection is made.
    Connect To: - destination IP or MAC address of the router
    Login - username used for authentication
    Password - password used for authentication
    Keep Password - if unchecked, the password is not saved to the list

Menu Items

    File
        New - Create a new managed router list in a specified location
        Open - Open managed router list file
        Save As - Save current managed router list to file
        Exit - Exit WinBox loader

    Tools
        Advanced Mode - Enables/Disables advanced mode view
        Import - Imports saved session file
        Export - Exports saved session file
        Move Session Folder - Change path where session files are stored
        Clear cache - Clear WinBox cache
        Check For Updates - Check for updates for WinBox loader

Advanced mode

Additional WinBox loader parameters are revealed when an advanced mode is enabled with Tools → Advanced Mode:

Buttons/check-boxes and Other Fields

Buttons/check-boxes

    Browse - Browse file directory for some specific session
    Keep Password - if unchecked, the password is not saved to the list
    Secure mode - if checked, WinBox will use DH-1984 for key exchange and modified and hardened RC4-drop3072 encryption to secure the session.
    Autosave session - Saves sessions automatically for devices to which connections are made.

Fields:

    Session - Saved router session.
    Note - Note that is assigned to save router entry.
    Group - Group to which saved router entry is assigned.
    RoMON Agent - Select RoMON Agent from the available device list


Managed routers list is encrypted, but it can still be loaded with another WinBox, IF the master password is not set for it!
Command Line

It is possible to use the command line to pass connect to, user, password and session ("workspace" for WInBox 4) parameters automatically:

winbox.exe [<connect-to> [<login> [<password>]] <session|workspace>]

For example (with no password):

winbox.exe 10.5.101.1 admin "" "<own>"

Will connect to router 10.5.101.1 with user "admin" without a password and use session|workspace "<own>".

It is possible to use the command line to pass connect to, user, and password parameters automatically to connect to the router through RoMON. In this case, RoMON Agent must be saved on the Managed routers list so WinBox would know the user and password for this device:

winbox.exe --romon [<romon-agent> [<connect-to> [<login> [<password>]]] <session|workspace>]

For example (with no password):

winbox.exe --romon 10.5.101.1 D4:CA:6D:E1:B5:7D admin "" "<own>"

Will connect to router D4:CA:6D:E1:B5:7D, through 10.5.101.1 via RoMON Agent with user "admin" without a password and apply session|workspace called "<own>".
IPv6 connectivity

WinBox supports IPv6 connectivity. To connect to the router's IPv6 address, it must be placed in square braces the same as in web browsers when connecting to the IPv6 server. Example: 

[db8::1]

when connecting to the link-local address interface index must be entered after the %:

[0:a00:27ff:fe70::e88c%2]

Port number is set after the square brace when it is necessary to connect WinBox to other port than the default:

[0:a00:27ff:fe70::e88c]:8299

WinBox neighbor discovery is capable of discovering IPv6 enabled routers. There are two entries for each IPv6 enabled router, one entry is with IPv4 address and another one with IPv6 link-local address. You can easily choose which one you want to connect to.
Run WinBox on macOS

Starting with macOS 10.15 Catalina, Apple has removed support for 32bit applications, meaning it is no longer possible to use regular Wine and regular WinBox in this OS. Wine has made available a 64bit version for macOS, and MikroTik has released a special WinBox64.exe version as well.

To run WinBox64 the following steps are required.

    Install latest Wine from the Wine macOS builds page ( wine-devel-7.X-osx64.tar.xz) and make sure you have downloaded the WinBox64.exe executable from the MikroTik download page.
    Launch WinBox64.exe with "open file with" > Wine64.app

Run WinBox on Linux

It is possible to run WinBox on Linux by using Wine emulation software. Make sure that the Microsoft font pack is installed, otherwise, you may see distortions.
Interface Overview

WinBox interface has been designed to be intuitive for most of the users. The interface consists of:

    The main toolbar at the top where users can add various info fields, like CPU and memory usage.
    The menu bar on the left - list of all available menus and sub-menus. This list changes depending on what packages are installed. For example, if the IPv6 package is disabled, then the IPv6 menu and all its sub-menus will not be displayed.
    Work area - an area where all menu windows are opened.

The title bar shows information to identify with which router WinBox session is opened. Information is displayed in the following format:

[username]@[Router's IP or MAC] ( [RouterID] ) - WinBox [ROS version] on [RB model] ([platform])

From screenshot above we can see that user krisjanis is logged into router with IPv4/IPv6 address [fe80::4e5e:cff:fef6:c0ab%3]. Router's ID is 3C18-Krisjanis_GW, currently installed RouterOS version is v6.36rc6, RouterBoard is CCR1036-12G-4S and platform is tile.

On the Main toolbar's left side is located:

    undo
    redo
    Safe Mode 
     Currently loaded session

More about Safe mode and undoing performed actions read in this article.

On the right side is located:

    an indicator that shows whether the WinBox session uses encryption
    WinBox traffic indicator displayed as a green bar,
    Custom info fields that can be added by the user by right-clicking on the toolbar and picking available info fields from the list


Work Area and Child Windows

WinBox has an MDI interface meaning that all menu configuration (child) widows are attached to the main (parent) WinBox window and is showed in the work area.

Child windows can not be dragged out of the working area. Notice in the screenshot above that the Interface window is dragged out of the visible working area and a horizontal scroll bar appeared at the bottom. If any window is outside visible work area boundaries the vertical or/and horizontal scrollbars will appear.
Child window menu bar

Each child window has its own toolbar. Most of the windows have the same set of toolbar buttons:

     Add - add a new item to the list
     Remove - remove the selected item from the list
     Enable - enable selected item (the same as enable command from console)
     Disable - disable selected item (the same as disable command from console)
     Comment - add or edit a comment
     Sort - allows to sort out items depending on various parameters. Read more >> 

Almost all windows have a quick search input field on the right side of the toolbar. Any text entered in this field is searched through all the items and highlighted as illustrated in the screenshot below

Notice that on the right side next to the quick find input filed there is a drop-down box. For the currently opened (IP Route) window, this drop-down box allows to quickly sort out items by routing tables. For example, if the main is selected, then only routes from the main routing table will be listed.
A similar drop-down box is also in all firewall windows to quickly sort out rules by chains.
Sorting out displayed items

Almost every window has a Sort button. When clicking on this button several options appear as illustrated in the screenshot below

The example shows how to quickly filter out routes that are in the 10.0.0.0/8 range

    Press Sort button
    Choose Dst.Address from the first drop-down box.
    Choose in form the second drop-down box. "in" means that filter will check if DST address value is in range of the specified network.
    Enter the network against which values will be compared (in our example enter "10.0.0.0/8")
    These buttons are to add or remove another filter to the stack.
    Press the Filter button to apply our filter.

As you can see from the screenshot WinBox sorted out only routes that are within the 10.0.0.0/8 range.

Comparison operators (Number 3 in the screenshot) may be different for each window. For example "IP Route" window has only two is and in. Other windows may have operators such as "is not", "contains", "contains not".

WinBox allows building a stack of filters. For example, if there is a need to filter by destination address and gateway, then

    set the first filter as described in the example above,
    press [+] button to add another filter bar in the stack.
    set up a second filter to filter by the gateway
    press the Filter button to apply filters.

You can also remove unnecessary filters from the stack by pressing the [-] button.
Customizing list of displayed columns

By default, WinBox shows the most commonly used parameters. However sometimes it is needed to see other parameters, for example, "BGP AS Path" or other BGP attributes to monitor if routes are selected properly.

WinBox allows to customize displayed columns for each individual window. For example to add BGP AS path column:

    Click on the little arrow button (1) on the right side of the column titles or right mouse click on the route list.
    From popped up menu move to Show Columns (2) and from the sub-menu pick the desired column, in our case click on BGP AS Path (3)

Changes made to window layout are saved and next time when WinBox is opened the same column order and size are applied.
Detail mode

It is also possible to enable Detail mode. In this mode all parameters are displayed in columns, the first column is the parameter name, the second column is the parameter's value.

To enable detail mode right mouse click on the item list and from the popup menu pick Detail mode

Category view

It is possible to list items by categories. In this mode, all items will be grouped alphabetically or by another category. For example, items may be categorized alphabetically if sorted by name, items can also be categorized by type like in the screenshot below.

To enable Category view, right mouse click on the item list and from the popup menu pick Show Categories

Drag & Drop

It is possible to upload and download files to/from the router using WinBox drag & drop functionality. You can also download the file by pressing the right mouse button on it and selecting "Download".


Drag & Drop works if WinBox is running on Linux using wine4. Drag and drop between two WinBox windows may fail.
Traffic monitoring

WinBox can be used as a tool to monitor the traffic of every interface, queue, or firewall rule in real-time. The screenshot below shows Ethernet traffic monitoring graphs.

Item copy

This shows how easy it is to copy an item in WinBox. In this example, we will use the COPY button to make a Dynamic PPPoE server interface into a Static interface.

This image shows us the initial state, as you see DR indicates "D" which means Dynamic:

Double-Click on the interface and click on COPY:

A new interface window will appear, a new name will be created automatically (in this case pppoe-in1)

After this Down/Up event this interface will be Static:

Transferring Settings

    Managed router transfer - In the File menu, use Save As and Open functions to save the managed router list to file and open it up again on a new workstation.

    Router sessions transfer - In the Tools menu, use Export and Import functions to save existing sessions to file and import them again on a new workstation.

WinBox Keyboard Shortcuts
Ctrl + F	Find
Ctrl + G	Find Next
F3
	Find / Find next
Ctrl + M	Add or edit a comment
Ctrl + E  or Num+	Enables a selected setting
Ctrl + D or Num-	Disables a selected setting
Ctrl + +	Zoom in WinBox
Ctrl + -	Zoom out WinBox 
Tab	Choose next control
Tab + Shift	Choose previous control
Space	Select focused control
F4 or Esc	Close window
F6
	Focus previous window
F6 + Shift	Focus next window
Insert
	Add new entry into list
Delete
	Delete entry from list
Troubleshooting
WinBox cannot connect to the router's IP address, devices do not show up in the Neighbors list

Make sure that the Windows firewall is set to allow WinBox connections through Private and/or Public network interfaces in the Windows firewall, it can be changed in Control Panel\System and Security\Windows Defender Firewall\Allowed applications or disable the Windows firewall.
I get an error '(port 20561) timed out' when connecting to routers mac address

Windows (7/8) does not allow mac connection if file and print sharing is disabled.
I can't find my device in WinBox IPv4 Neighbors list or MAC connection fails with "ERROR could not connect to XX-XX-XX-XX-XX-XX"

Most of the network drivers will not enable IP stack unless your host device has an IP configuration. Set IPv4 configuration on your host device.

Sometimes the device will be discovered due to caching, but MAC connection will still fail with "ERROR: could not connect to XX:XX:XX:XX:XX:XX

WinBox MAC-ADDRESS connection requires MTU value set to 1500, unfragmented. Other values can perform poorly - loss of connectivity can occur.






    Creado por Oskars K., actualizado por última vez por Mārtiņš S. el may 08, 2024 5 min de lectura

    Description
    FlashFig Example
        Requirements
        Pre-Configuration
            Windows Computer
            RouterBOARD
        Connect
        Run FlashFig
    Troubleshoot
        FlashFig can not find a router
        FlashFig finds a router, flashing is not done (no TFTP request)
        FlashFig is done, but a configuration is not applied
        Not enough flash space, ignoring

Description

FlashFig is an application for mass router configuration. It can be used by MikroTik distributors, ISPs, or any other companies who need to apply RouterOS configuration to many routers in the shortest possible time.

FlashFig applies MikroTik RouterOS configuration to any RouterBOARD within 3 seconds. You can perform FlashFig on a batch of routers, the only thing you need is to connect RouterBOARD to a Layer 2 network running FlashFig and to power a FlashFig-enabled RouterBOARD up.

FlashFig only runs on a Windows computer and is available from the downloads page.

All RouterBOARDs support FlashFig mode. It works between a Windows computer running FlashFig and a RouterBOARD in the same broadcast domain (direct Layer 2 Ethernet network connection is required).

FlashFig support is enabled on every new RouterBOARD manufactured since March 2010 by default from the factory. For older models, FlashFig can be enabled via RouterBOOT or from MikroTik RouterOS console - /system routerboard settings set boot-device=flash-boot-once-then-nand or /system routerboard settings set boot-device=flash-boot.

Starting from RouterOS/RouterBOOT v7.16, flash boot mode will be enabled in the same way as from the factory, after every system reset initiated from the software. The same mode will be initiated when you reset router with the reset button, (bootloader version  v7.16 or higher is required). 
Please note that if you press and hold reset button before powering on the router, then the backup booter is used. The backup booter firmware (installed in the factory) must also then be v7.16 or higher. 

FlashFig mode on a brand new RouterBOARD is disabled on further boots only after the first successful user login or successful FlashFig attempt to avoid unwanted reconfiguration at a later time. To use FlashFig a second time on the same router, you need to enable flash-boot in Bootloader settings (this setting will revert to NAND after a successful configuration change OR once any user logs into the board).

If RouterOS reset-configuration command is used later (or configuration reset using the Reset button), FlashFig configuration is loaded. To permanently overwrite, use the Netinstall process and check Apply default configuration or use -r flag in Linux-based command line.

You view FlashFig video tutorial on MikroTik YouTube channel.
FlashFig Example

This is a step-by-step example of how to use the FlashFig process to apply a chosen MikroTik RouterOS configuration to a 'factory fresh' RouterBOARD.
Requirements

The Windows computer must be equipped with the following ports and contain the following files:

    A working Ethernet port;
    Valid .rsc file(s) with MikroTik RouterOS configuration similar to an export/import file. In addition to regular configuration commands, it is also possible to re-apply the factory passwords by using the read-only variables $defconfPassword and $defconfWifiPassword (starting from RouterOS 7.10beta8);
    Always use the latest FlashFig program available from the downloads page;
    The RouterBOARD has to be in flash-boot mode, if this is the very first boot, nothing needs to be done

Be aware of the text editor's treatment of CR/LF characters and test that the config has no errors when normally applied onto an identical version of RouterOS before applying via FlashFig as run-time errors will not be visible!
Pre-Configuration
Windows Computer

    Run FlashFig;
    Prepare .rsc file, .rsc file is regular/import file, it accepts valid MikroTik RouterOS CLI commands. You can create .rsc file with any text editor program (Notepad, Notepad++, Texteditor, TextEdit, Microsoft Word, OpenOffice Writer)

    Assign Boot Client Address, which should be an address within the same subnet as that configured on the computer's Ethernet interface,

    Browse for .rsc MikroTik RouterOS configuration file to apply to the RouterBOARD, highlight the file and Select to approve it,

    Activate FlashFig server, now it is ready to FlashFig. Note, any RouterBOARD will be FlashFig'ed within the network when they are powered on with boot-device configured to flash-boot or flash-boot-once-then-nand,

RouterBOARD

    FlashFig mode is enabled on every RouterBOARD from the factory by default, which means no configuration is required on RouterBOARD.

    If FlashFig is not enabled on your router, access the RouterBOARD with WinBox/Console and change the boot-device to flash-boot or flash-boot-once-then-nand:

system/routerboard/settings/set boot-device=flash-boot

Or use a more preferable option, for a single boot flash-boot:
system/routerboard/settings/set boot-device=flash-boot-once-then-nand

Your router is now ready for FlashFig.
Connect

Connect the Boot port of RouterBOARD and FlashFig computer to the same Local Area Network.
Run FlashFig

    Plug-in power for RouterBOARD
    Check the status on FlashFig program,

Messages log shows "FlashFigged" and RouterBOARD should repeatedly make the morse code sound for the character "/" ("_.._." and flash the LED - it is now safe to unplug / power down the router.

    FlashFig configuration was applied to the RouterBOARD and it is ready to be used in production with this new config.

Troubleshoot
FlashFig can not find a router

If between a PC and a router there is another device (a router/switch), ensure that for this device:

    DHCP server is disabled;
    if used ports are in a bridge, set bridge protocol-mode to none;
    HW-offload for used ports is disabled.

FlashFig finds a router, flashing is not done (no TFTP request)

Ensure that the computer on which FlashFig is running has only one network interface active.
FlashFig is done, but a configuration is not applied

If all procedures went successfully, but RouterOS configuration from .rsc file is not applied, add startup delay to *.rsc configuration file. The reason might be, that the configuration script is executed before all interfaces boots up.
Not enough flash space, ignoring
FlashFig configuration maximum file size is up to 4000 bytes, otherwise program will return an error as above.



Authentication, Authorization, Accounting

    Creado por Usuario desconocido (emils), actualizado por última vez el may 31, 2022 1 min de lectura

In This Section:

        Certificates
        Dot1X
        HotSpot - Captive portal
        PPP AAA
        RADIUS
        User
        User Manager






    Creado por Artūrs C., actualizado por última vez por Matīss O. el jun 17, 2025 6 min de lectura

Overview

    Overview
        Certificate Template
            Certificate properties
            Certificate read-only properties
        Sign Certificate
        Export Certificate
        Import Certificate
        Settings
    Let's Encrypt certificates
        Server properties
            Example:
    SCEP
    Built-in root certificate authorities

/certificate

The general menu is used to manage certificates, add templates, issue certificates, and manage CRL and SCEP Clients.
Certificate Template

Certificate templates are used to prepare a desired certificate for signing.

Certificate template is deleted right after a certificate is signed or a certificate request command is executed
/certificate
add name=CA-Template common-name=CAtemp key-usage=key-cert-sign,crl-sign
add name=Server common-name=server
add name=Client common-name=client

To print out certificates:
[admin@4k11] /certificate> print detail 
Flags: K - private-key; L - crl; C - smart-card-key; A - authority; I - issued, R - revoked; E - expired; T - trusted 
 0         name="CA-Template" key-type=rsa common-name="CAtemp" key-size=2048 subject-alt-name="" days-valid=365 key-usage=key-cert-sign,crl-sign 

 1         name="Server" key-type=rsa common-name="server" key-size=2048 subject-alt-name="" days-valid=365 
           key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client 

 2         name="Client" key-type=rsa common-name="client" key-size=2048 subject-alt-name="" days-valid=365 
           key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client 
Certificate properties
common-name (string)	Certificate common name
copy-from (name)	Certificate name from which to copy general settings
country (string)	Certificate issuer country
days-valid (days Default: 365)	Days certificate will be valid after signing
digest-algorithm (md5 | sha1 | sha256 | sha384 | sha512 Default: sha256 )	Certificate public key algorithm
key-size (1024 | 1536 | 2048 | 4096 | 8192 | prime256v1 | secp384r1 | secp521r1 Default: 2048)	Certificate public key size

key-usage (code-sign | crl-sign | decipher-only | dvcs | encipher-only     key-cert-sign | ocsp-sign | tls-client | content-commitment | data-encipherment | digital-signature | email-protect | key-agreement | key-encipherment | timestamp | tls-server Default: digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign,tls-server,tls-client)
	Certificate usage

locality (string)
	Certificate issuer locality

name (string)
	Certificate name

organization (string)
	Certificate issuer organization

state (string)
	Certificate issuer state

subject-alt-name (DNS: | IP: | email:)
	Certificate subject alternative name

trusted (no| yes Default: )
	

unit (string)
	Certificate issuer organizational unit
Certificate read-only properties

After a certificate is signed, most of a certificate template properties are converted to read-only (except name and trusted)
serial-number	Certificate serial number
fingerprint	
akid	Certificate authority ID
skid	Certificate subject ID
invalid-before	Date and time before which a certificate expired
invalid-after	Date and time after which a certificate expired

expires-after 
	
key-type	
ca	Certificate authority common name

If the CA certificate is removed, all issued certificates in the chain are also removed.
Sign Certificate

Certificates should be signed. In the following example, we will sign certificates and add CRL URL for the server certificate:
/certificate 
sign CA-Template 
sign Client      
sign Server ca-crl-host=192.168.88.1 name=ServerCA

Let`s check is the certificates are signed:
[admin@MikroTik] /certificate> print
Flags: K - private-key; L - crl; A - authority; T - trusted
Columns: NAME, COMMON-name, FINGERPRINT
#        NAME         COMMON  FINGERPRINT                                                     
0  K AT  CA-Template  CAtemp  0c7aaa7607a4dde1bbf33deaae6be7bac9fe4064ba47d64e8a73dcefad6cfc38
1  K AT  Client       client  b3ff25ecb166ea41e15733a7493003f3ea66310c10390c33e98fe32364c3659f
2  KLAT  ServerCA     server  152b88c9d81f4b765a59e2302e01efd1fbf11ceeed6e59f4974e87787a5bb980

For a video example click here.

The time of the key signing process depends on the key size of a specific certificate. With values of 4k and higher, it might take a substantial time to sign this specific certificate on less powerful CPU-based devices.


Export Certificate

It is possible to export client certificates with keys and CA certificates in two formats - PEM or PCKS12.
export-passphrase (string Default: none)	Passphrase that will be used for exported certificate private key encryption.
file-name (string Default: cert_export_[Certificate name].crt/key/pkcs12)	Exported certificate file name.
type (pem | pkcs12 Default: pem)	

Exported certificate type.

In case of PEM, certificate will be exported with CRT extension, if export-passphrase is specified, also encrypted private KEY file will be exported.

In case of PKCS12, certificate will be exported with P12 extension, if export-passphrase is specified, exported certificate will contain encryted private key.
/certificate 
export-certificate CA-Template 
export-certificate ServerCA export-passphrase=yourpassphrase
export-certificate Client export-passphrase=yourpassphrase

Exported certificates are available under the /file section:
[admin@MikroTik] > file print
Columns: NAME, TYPE, SIZE, CREATION-TIME
#  NAME                         TYPE        SIZE  CREATION-TIME       
0  skins                        directory         jan/19/2019 00:00:04
1  flash                        directory         jan/19/2019 01:00:00
2  pub                          directory         jan/19/2019 02:42:16
3  cert_export_CA-Template.crt  .crt file   1119  jan/19/2019 04:15:21
4  cert_export_ServerCA.crt     .crt file   1229  jan/19/2019 04:15:42
5  cert_export_ServerCA.key     .key file   1858  jan/19/2019 04:15:42
6  cert_export_Client.crt       .crt file   1164  jan/19/2019 04:15:55
7  cert_export_Client.key       .key file   1858  jan/19/2019 04:15:55

Exporting certificates requires "sensitive" user policy.
Import Certificate

To import certificates, certificates must be uploaded to a device using one of the file upload methods.

Certificates must be imported as a file.

Supported are PEM, DER, CRT, PKCS12 formats.
name (string Default: file-name_number)	A certificate name that will be shown in the certificate manager
file-name (string)	A file name that will be imported
passphrase (string Default: none)	File passphrase if there is such
trusted (yes | no Default: yes)	Adds trusted flag for imported certificate







